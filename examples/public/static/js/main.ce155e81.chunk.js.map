{"version":3,"sources":["assets/icons/alerts.svg","assets/icons/geographicalfeatures.svg","assets/icons/incidents-disabled.svg","assets/icons/dashboards-disabled.svg","assets/icons/stakeholders.svg","assets/icons/resources.svg","assets/icons/emergencyplans.svg","assets/icons/assessments.svg","assets/icons/alerts/issuedalerts.svg","assets/icons/alerts/actions-disabled.svg","assets/icons/alerts/surveyandfeedback-disabled.svg","assets/icons/alerts/servicerequest-disabled.svg","assets/icons/alerts/feeds-disabled.svg","assets/icons/alerts/sources.svg","assets/icons/assessment/indicators.svg","assets/icons/assessment/questionnaires.svg","assets/icons/assessment/questions.svg","assets/icons/assessment/responses-disabled.svg","assets/icons/district.svg","assets/icons/evacuationCenter.svg","assets/icons/geographicalfeatures/facilities.svg","assets/icons/geographicalfeatures/infrastructures.svg","assets/icons/geographicalfeatures/warehouse.svg","assets/icons/region.svg","assets/icons/subward.svg","assets/icons/ward.svg","assets/icons/incidents/incidentcommandcenter.svg","assets/icons/incidents/assessments.svg","assets/icons/incidents/incidenttype.svg","assets/icons/incidents/lossdatabase.svg","assets/icons/incidents/feed.svg","assets/icons/incidents/actions.svg","assets/icons/emergencyplans/activations-disabled.svg","assets/icons/emergencyplans/disseminations-disabled.svg","assets/icons/emergencyplans/drillsandexercises-disabled.svg","assets/icons/emergencyplans/planner.svg","assets/icons/emergencyplans/procedures.svg","assets/icons/emergencyplans/activities.svg","assets/icons/resources/adjustment.svg","assets/icons/resources/item.svg","assets/icons/resources/itemcategory.svg","assets/icons/resources/stock.svg","assets/icons/resources/utilization-disabled.svg","assets/icons/resources/warehouse.svg","assets/icons/resources/itemunit.svg","assets/icons/stakeholders/agency.svg","assets/icons/stakeholders/contacts.svg","assets/icons/stakeholders/notifications-disabled.svg","assets/icons/stakeholders/roles.svg","components/NavigationMenu/index.js","Alerts/index.js","components/EmptyState/index.js","Alerts/layouts/Actions.js","util.js","Alerts/components/Alerts/ActionBar/index.js","Alerts/components/Alerts/Filters/index.js","components/SearchableSelectInput/index.js","Alerts/components/Alerts/Form/index.js","Alerts/components/Alerts/ListHeader/index.js","Alerts/components/Alerts/ListItem/index.js","Alerts/components/Alerts/List/index.js","Alerts/components/Alerts/index.js","Alerts/layouts/Alerts.js","Alerts/layouts/Feedback.js","Alerts/layouts/Feeds.js","Alerts/layouts/ServiceRequests.js","Alerts/components/AlertSources/ActionBar/index.js","Alerts/components/AlertSources/Form/index.js","Alerts/components/AlertSources/ListHeader/index.js","Alerts/components/AlertSources/ListItem/index.js","Alerts/components/AlertSources/List/index.js","Alerts/components/AlertSources/index.js","Alerts/layouts/Sources.js","Assessments/index.js","Assessments/components/Indicators/ActionBar/index.js","Assessments/components/Indicators/ListHeader/index.js","Assessments/components/Indicators/ListItem/index.js","Assessments/components/Indicators/List/index.js","Assessments/components/Indicators/Filters/index.js","Assessments/components/Indicators/Form/index.js","Assessments/components/Indicators/index.js","Assessments/layouts/Indicators.js","Assessments/components/Questionnaires/ActionBar/index.js","Assessments/components/Questionnaires/ListHeader/index.js","Assessments/components/Questionnaires/ListItem/index.js","Assessments/components/Questionnaires/List/index.js","Assessments/components/Questionnaires/Filters/index.js","Assessments/components/Questionnaires/Form/index.js","Assessments/components/Questionnaires/index.js","Assessments/layouts/Questionnaires.js","Assessments/components/Questions/ActionBar/index.js","Assessments/components/Questions/ListHeader/index.js","Assessments/components/Questions/ListItem/index.js","Assessments/components/Questions/List/index.js","Assessments/components/Questions/Filters/index.js","Assessments/components/Questions/Form/index.js","Assessments/components/Questions/index.js","Assessments/layouts/Questions.js","Assessments/layouts/Responses.js","components/UIState/index.js","components/UIState/PageNotFound.js","GeographicalFeatures/index.js","GeographicalFeatures/components/AdministrativeBoundaries/ListHeader/index.js","GeographicalFeatures/components/AdministrativeBoundaries/ListItem/index.js","GeographicalFeatures/components/AdministrativeBoundaries/List/index.js","GeographicalFeatures/components/AdministrativeBoundaries/Filters/index.js","GeographicalFeatures/components/AdministrativeBoundaries/ActionBar/index.js","GeographicalFeatures/components/AdministrativeBoundaries/index.js","GeographicalFeatures/layouts/AdministrativeBoundaries.js","GeographicalFeatures/components/Districts/ActionBar/index.js","GeographicalFeatures/components/Districts/ListItem/index.js","GeographicalFeatures/components/Districts/ListHeader/index.js","GeographicalFeatures/components/Districts/List/index.js","GeographicalFeatures/components/Districts/Filters/index.js","GeographicalFeatures/components/Districts/Form/index.js","GeographicalFeatures/components/Districts/index.js","GeographicalFeatures/layouts/Districts.js","GeographicalFeatures/components/EvacuationCenters/ListHeader/index.js","GeographicalFeatures/components/EvacuationCenters/ListItem/index.js","GeographicalFeatures/components/EvacuationCenters/List/index.js","GeographicalFeatures/components/EvacuationCenters/Form/index.js","GeographicalFeatures/components/EvacuationCenters/Filters/index.js","GeographicalFeatures/components/EvacuationCenters/ActionBar/index.js","GeographicalFeatures/components/EvacuationCenters/index.js","GeographicalFeatures/layouts/EvacuationCenters.js","GeographicalFeatures/components/Facilities/ListHeader/index.js","GeographicalFeatures/components/Facilities/ListItem/index.js","GeographicalFeatures/components/Facilities/List/index.js","GeographicalFeatures/components/Facilities/Form/index.js","GeographicalFeatures/components/Facilities/Filters/index.js","GeographicalFeatures/components/Facilities/ActionBar/index.js","GeographicalFeatures/components/Facilities/index.js","GeographicalFeatures/layouts/Facilities.js","GeographicalFeatures/components/Infrastructure/ListHeader/index.js","GeographicalFeatures/components/Infrastructure/ListItem/index.js","GeographicalFeatures/components/Infrastructure/List/index.js","GeographicalFeatures/components/Infrastructure/Form/index.js","GeographicalFeatures/components/Infrastructure/Filters/index.js","GeographicalFeatures/components/Infrastructure/ActionBar/index.js","GeographicalFeatures/components/Infrastructure/index.js","GeographicalFeatures/layouts/Infrastructure.js","GeographicalFeatures/components/Regions/ActionBar/index.js","GeographicalFeatures/components/Regions/ListItem/index.js","GeographicalFeatures/components/Regions/LIstHeader/index.js","GeographicalFeatures/components/Regions/List/index.js","GeographicalFeatures/components/Regions/Form/index.js","GeographicalFeatures/components/Regions/Filters/index.js","GeographicalFeatures/components/Regions/index.js","GeographicalFeatures/layouts/Regions.js","GeographicalFeatures/layouts/SubWards.js","GeographicalFeatures/components/Wards/ActionBar/index.js","GeographicalFeatures/components/Wards/ListItem/index.js","GeographicalFeatures/components/Wards/ListHeader/index.js","GeographicalFeatures/components/Wards/List/index.js","GeographicalFeatures/components/Wards/Filters/index.js","GeographicalFeatures/components/Wards/Form/index.js","GeographicalFeatures/components/Wards/index.js","GeographicalFeatures/layouts/Wards.js","GeographicalFeatures/components/Warehouses/ListHeader/index.js","GeographicalFeatures/components/Warehouses/ListItem/index.js","GeographicalFeatures/components/Warehouses/List/index.js","GeographicalFeatures/components/Warehouses/Form/index.js","GeographicalFeatures/components/Warehouses/Filters/index.js","GeographicalFeatures/components/Warehouses/ActionBar/index.js","GeographicalFeatures/components/Warehouses/index.js","GeographicalFeatures/layouts/Warehouses.js","Home/index.js","Incidents/index.js","Incidents/layouts/Actions.js","Incidents/layouts/Assessments.js","Incidents/layouts/CommandCenter.js","Incidents/layouts/Feeds.js","Incidents/components/IncidentTypes/ActionBar/index.js","Incidents/components/IncidentTypes/ListHeader/index.js","Incidents/components/IncidentTypes/ListItem/index.js","Incidents/components/IncidentTypes/List/index.js","Incidents/components/IncidentTypes/Filters/index.js","Incidents/components/IncidentTypes/Form/index.js","Incidents/components/IncidentTypes/index.js","Incidents/layouts/IncidentTypes.js","Incidents/layouts/LossDatabase.js","Plans/index.js","Plans/layouts/Activations.js","Plans/components/Activities/ActivityForm/index.js","Plans/components/Activities/Filters/index.js","Plans/components/Activities/ActionBar/index.js","Plans/components/Activities/ListHeader/index.js","Plans/components/Activities/ListItem/index.js","Plans/components/Activities/List/index.js","Plans/components/Activities/NotificationForm/index.js","Plans/components/Activities/index.js","Plans/layouts/Activities.js","Plans/layouts/Disseminations.js","Plans/layouts/Drills.js","Plans/components/Planner/Filters/index.js","Plans/components/Planner/ActionBar/index.js","Plans/components/Planner/GridListItem/index.js","Plans/components/Planner/ListHeader/index.js","Plans/components/Planner/ListItem/index.js","Plans/components/Planner/List/index.js","Plans/components/Planner/NotificationForm/index.js","Plans/components/Planner/PlanForm/index.js","Plans/components/Planner/index.js","Plans/layouts/Planner.js","Plans/components/Procedures/Filters/index.js","Plans/components/Procedures/ActionBar/index.js","Plans/components/Procedures/ListHeader/index.js","Plans/components/Procedures/ListItem/index.js","Plans/components/Procedures/List/index.js","Plans/components/Procedures/NotificationForm/index.js","Plans/components/Procedures/ProcedureForm/index.js","Plans/components/Procedures/index.js","Plans/layouts/Procedures.js","Resources/index.js","components/Topbar/index.js","Resources/components/Adjustments/ListItem/index.js","components/ListHeader/index.js","components/Toolbar/index.js","Resources/components/Adjustments/List/index.js","Resources/components/Adjustments/Filters/index.js","Resources/components/Adjustments/index.js","Resources/layouts/Adjustments.js","components/NotificationForm/index.js","Resources/components/ItemCategories/Form/index.js","components/ListItemActions/index.js","Resources/components/ItemCategories/ListItem/index.js","Resources/components/ItemCategories/List/index.js","Resources/components/ItemCategories/index.js","Resources/layouts/ItemCategories.js","Resources/components/Items/Filters/index.js","Resources/components/Items/Form/index.js","Resources/components/Items/ListItem/index.js","Resources/components/Items/List/index.js","Resources/components/Items/index.js","Resources/layouts/Items.js","Resources/components/ItemUnits/ListItem/index.js","Resources/components/ItemUnits/List/index.js","Resources/components/ItemUnits/Form/index.js","Resources/components/ItemUnits/index.js","Resources/layouts/ItemUnit.js","Resources/components/Stock/Form/index.js","components/SelectInput/index.js","Resources/components/Stock/AdjustmentForm/index.js","Resources/components/Stock/ListItem/index.js","Resources/components/Stock/List/index.js","Resources/components/Stock/index.js","Resources/layouts/Stock.js","Resources/layouts/Utilization.js","Resources/components/Warehouses/ListItem/index.js","Resources/components/Warehouses/List/index.js","Resources/components/Warehouses/Form/index.js","Resources/components/Warehouses/Filters/index.js","Resources/components/Warehouses/index.js","Resources/layouts/Warehouses.js","Stakeholders/index.js","Stakeholders/components/Agencies/AgencyForm/index.js","Stakeholders/components/Agencies/Filters/index.js","Stakeholders/components/Agencies/ListItem/index.js","Stakeholders/components/Agencies/List/index.js","Stakeholders/components/Agencies/NotificationForm/index.js","Stakeholders/components/Agencies/index.js","Stakeholders/layouts/Agencies.js","Stakeholders/components/FocalPeople/Filters/index.js","Stakeholders/components/FocalPeople/Form/index.js","Stakeholders/components/FocalPeople/ListItem/index.js","Stakeholders/components/FocalPeople/List/index.js","Stakeholders/components/FocalPeople/index.js","Stakeholders/layouts/FocalPeople.js","Stakeholders/layouts/Notifications.js","Stakeholders/components/Roles/Filters/index.js","Stakeholders/components/Roles/ListItem/index.js","Stakeholders/components/Roles/List/index.js","Stakeholders/components/Roles/Form/index.js","Stakeholders/components/Roles/NotificationForm/index.js","Stakeholders/components/Roles/index.js","Stakeholders/layouts/Roles.js","layouts/components/HeaderNavMenu.js","layouts/BaseLayout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavigationMenuItem","_ref","name","icon","path","disabled","description","react_default","a","createElement","Link","to","popover","content","style","width","textAlign","textJustify","placement","className","src","alt","concat","height","NavigationMenu","_ref2","routes","match","url","colSpan","length","row","type","align","map","route","col","key","span","NavigationMenu_NavigationMenuItem","defaultProps","undefined","issuedAlertsIcon","modules","alertsIssued","actionsIcon","alertsActions","feedsIcon","alertsFeeds","surveyAndFeedbackIcon","alertsAssessments","sourceIcon","alertsSources","serviceRequestsIcon","alertsServiceRequests","Alerts","components_NavigationMenu","EmptyState","buttonLabel","onClick","es_icon","es_button","AlertActionsLayout","marginTop","components_EmptyState","notifyError","error","navigator","onLine","message","notifySuccess","details","success","AlertsActionBar","page","total","onFilter","xl","es_checkbox","shape","title","refreshAlerts","size","offset","xxl","pagination","simple","defaultCurrent","onChange","nextPage","paginateAlerts","AlertsFilters","handleSubmit","e","preventDefault","_this$props","_this","props","validateFields","form","onCancel","values","filterAlerts","handleClearFilter","clearAlertFilters","_this$props2","this","getFieldDecorator","filter","alertSchema","formItemLayout","labelCol","xs","sm","md","lg","wrapperCol","es_form","onSubmit","autoComplete","Item","Object","assign","label","initialValue","Group","enum","margin","value","category","response","urgency","severity","certainty","marginLeft","htmlType","Component","Filters","create","Connect","Option","SearchableSelectInput","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleSearch","onSearch","q","then","setState","data","loading","handleChange","handleOnDropdownVisibleChange","open","state","toConsumableArray","catch","getOptionProp","prop","option","isFunction","isArray","isEmpty","_this2","_this$state","optionValue","optionLabel","isFilter","otherProps","objectWithoutProperties","options","es_select","showSearch","mode","allowClear","onDropdownVisibleChange","filterOption","notFoundContent","spin","getAlertSources","httpActions","getFeatures","TextArea","AlertForm","validateFieldsAndScroll","alert","isEditForm","event","area","instruction","headline","expectedAt","expiredAt","payload","toISOString","source","updatedAlert","putAlert","postAlert","renderSelectOptions","Form_Option","renderAreaOptions","id","_id","posting","justify","rules","required","input","placeholder","status","SearchableSelectInput_SearchableSelectInput","moment","utc","date_picker","showTime","format","autosize","minRows","maxRows","Form","headerLayout","header","AlertsListHeader","item","AlertsListItem","isHovered","handleMouseEnter","handleMouseLeave","toHumanReadableDate","isoFormatDate","formatTime","date","timeAgo","fromNow","abbreviation","color","onEdit","eventTitle","avatarBackgroundColor","randomColor","onMouseEnter","onMouseLeave","avatar","backgroundColor","react","dateSortDesc","date1","date2","AlertList","_ref5","alerts","sortedAlerts","sort","_ref3","_ref4","ISOdate1","updatedAt","ISOdate2","sortByUpdatedAt","sortByExpiredAt","Alerts_ListHeader","list","dataSource","renderItem","reportedAt","Alerts_ListItem","toUpperCase","charAt","Search","showFilters","openFiltersModal","closeFiltersModal","openForm","openAlertForm","closeForm","closeAlertForm","searchAlerts","target","handleEdit","selectAlert","handleAfterCloseForm","getAlerts","showForm","ActionBar","List","modal","visible","destroyOnClose","maskClosable","footer","AlertsLayout","components_Alerts","AlertFeedbackLayout","AlertFeedsLayout","AlertsServiceRequestLayout","AlertSourcesActionBar","refreshAlertSources","paginateAlertSources","AlertSourceForm","alertSource","updatedContact","putAlertSource","postAlertSource","website","mobile","email","AlertSources_Form","AlertSourcesListHeader","AlertSourcesListItem","onArchive","AlertSourceList","alertSources","AlertSources_ListHeader","AlertSources_ListItem","AlertSources","openAlertSourceForm","closeAlertSourceForm","search","searchAlertSources","selectAlertSource","AlertSources_Search","AlertSources_ActionBar","AlertSources_List","AlertSourcesLayout","components_AlertSources","responsesIcon","assessmentsObservations","questionnairesIcon","assessmentsQuestionnaires","questionsIcon","assessmentsQuestions","indicatorIcon","assessmentsIndicators","Assessments","IndicatorsActionBar","refreshIndicators","paginateIndicators","IndicatorsListHeader","IndicatorListItem","subject","topic","IndicatorsList","indicators","Indicators_ListHeader","Indicators_ListItem","IndicatorsFilters","filterIndicators","clearIndicatorFilters","subjects","IndicatorForm","onChangeColor","setFieldsValue","indicator","putIndicator","postIndicator","Indicators_Form_Option","Form_TextArea","lib_default","animation","Indicators","openIndicatorForm","closeIndicatorForm","selectIndicator","getIndicators","Indicators_Search","Indicators_ActionBar","Indicators_List","Indicators_Filters","afterClose","Indicators_Form","AssessmentIndicatorsLayout","components_Indicators","QuestionnairesActionBar","refreshQuestionnaires","paginateQuestionnaires","QuestionnairesListHeader","QuestionnairesListItem","phase","assess","stage","avatarBackground","QuestionnairesList","questionnaires","Questionnaires_ListHeader","questionnaire","Questionnaires_ListItem","QuestionnairesFilters","filterQuestionnaires","clearQuestionnaireFilters","stages","phases","QuestionnaireForm","updatedQuestionnaire","putQuestionnaire","postQuestionnaire","Questionnaires_Form_Option","Questionnaires_Form_TextArea","Questionnaires","openQuestionnaireForm","closeQuestionnaireForm","selectQuestionnaire","getQuestionnaires","Questionnaires_Search","searchQuestionnaires","Questionnaires_ActionBar","Questionnaires_List","Questionnaires_Filters","Questionnaires_Form","AssessmentQuestionnairesLayout","components_Questionnaires","QuestionsActionBar","refreshQuestions","paginateQuestions","QuestionsListHeader","QuestionsListItem","QuestionsList","questions","Questions_ListHeader","question","Questions_ListItem","QuestionsFilters","filterQuestions","clearQuestionFilters","QuestionForm","updatedQuestion","putQuestion","postQuestion","types","Questions_Form_Option","Questions","openQuestionForm","closeQuestionForm","selectQuestion","getQuestions","Questions_Search","searchQuestions","Questions_ActionBar","Questions_List","Questions_Filters","Questions_Form","AssessmentQuestionsLayout","components_Questions","AssessmentResponsesLayout","UIState","PageNotFound","components_UIState","regionIcon","geographicalFeaturesRegions","districtIcon","geographicalFeaturesDistricts","wardIcon","geographicalFeaturesWards","subwardIcon","geographicalFeaturesSubwards","EvacuationIcon","geographicalFeaturesEvacuationCenters","facilitiesIcon","geographicalFeaturesFacilities","warehousesIcon","geographicalFeaturesWarehouses","infrastructureIcon","geographicalFeaturesCriticalInfrastructure","GeographicalFeatures","AdminstrativeBoundaryListHeader","AdminstrativeBoundaryListItem","level","AdminstrativeBoundaryList","adminstrativeBoundaries","AdministrativeBoundaries_ListHeader","adminstrativeBoundary","AdministrativeBoundaries_ListItem","categories","levels","AdministrativeBoundariesFilters","AdministrativeBoundaries_Filters","AdminstrativeBoundariesActionBar","AdminstrativeBoundaries","searchAdminstrativeBoundaries","AdministrativeBoundaries_Search","AdministrativeBoundaries_ActionBar","AdministrativeBoundaries_List","AdministrativeBoundariesLayout","AdministrativeBoundaries","DistrictsActionBar","refreshFeatures","paginateFeatures","DistrictsListItem","nature","family","DistrictsListHeader","DistrictsList","districts","Districts_ListHeader","district","Districts_ListItem","DistrictsFilters","filterFeatures","clearFeatureFilters","natures","families","DistrictForm","updatedRegion","putFeature","postFeature","Districts_Form_Option","Districts","searchDistricts","searchFeatures","openFeatureForm","closeFeatureForm","selectFeature","Districts_Search","Districts_ActionBar","Districts_List","Districts_Filters","Districts_Form","DistrictsLayout","components_Districts","EvacuationCenterListHeader","EvacuationCenterListItem","slice","EvacuationCenterList","evacuationCenters","EvacuationCenters_ListHeader","evacuationCenter","EvacuationCenters_ListItem","EvacuationCenterForm","updatedEvacuationCenter","objectSpread","continent","country","EvacuationCenters_Form_Option","EvacuationCenters_Form","EvacuationCentersFilters","natureItem","EvacuationCenters_Filters","EvacuationCentersActionBar","EvacuationCenters","EvacuationCenters_Search","EvacuationCenters_ActionBar","EvacuationCenters_List","EvacuationCentersLayout","components_EvacuationCenters","FacilityListHeader","FacilityListItem","FacilityList","facilities","Facilities_ListHeader","facility","Facilities_ListItem","FacilityForm","updatedFacility","Facilities_Form_Option","Facilities_Form","FacilitiesFilters","Facilities_Filters","FacilitiesActionBar","Facilities","Facilities_Search","Facilities_ActionBar","Facilities_List","FacilitiesLayout","components_Facilities","CriticalInfrastructureListHeader","CriticalInfrastructureListItem","CriticalInfrastructureList","criticalInfrastructures","Infrastructure_ListHeader","criticalInfrastructure","Infrastructure_ListItem","CriticalInfrastructureForm","updatedCriticalInfrastructure","Infrastructure_Form_Option","Infrastructure_Form","CriticalInfrastructuresFilters","Infrastructure_Filters","CriticalInfrastructuresActionBar","CriticalInfrastructures","Infrastructure_Search","Infrastructure_ActionBar","Infrastructure_List","CriticalInfrastructureLayout","Infrastructure","RegionsActionBar","RegionsListItem","RegionsListHeader","RegionsList","regions","LIstHeader","region","Regions_ListItem","RegionForm","Regions_Form_Option","RegionsFilters","Regions","searchRegions","Regions_Search","Regions_ActionBar","Regions_List","Regions_Filters","Regions_Form","RegionsLayout","components_Regions","SubWardsLayout","WardsActionBar","WardsListItem","WardsListHeader","WardsList","wards","Wards_ListHeader","ward","Wards_ListItem","WardsFilters","WardForm","Wards_Form_Option","Wards","searchWards","Wards_Search","Wards_ActionBar","Wards_List","Wards_Filters","Wards_Form","WardsLayout","components_Wards","WarehouseListHeader","WarehouseListItem","WarehouseList","warehouses","Warehouses_ListHeader","warehouse","Warehouses_ListItem","WarehouseForm","updatedWarehouse","Warehouses_Form_Option","Warehouses_Form","WarehousesFilters","Warehouses_Filters","WarehousesActionBar","Warehouses","Warehouses_Search","Warehouses_ActionBar","Warehouses_List","destroyOnCloseName","WarehousesLayout","components_Warehouses","alertIcon","assessmentIcon","assessments","planIcon","geographicalFeaturesIcon","geographicalfeatures","incidentIcon","incidents","resourceIcon","resources","stakeholderIcon","stakeholders","dashboardIcon","dashboards","Home","commandCenterIcon","incidentsCommandCenter","incidentsActions","incidentsAssessments","feedIcon","incidentsFeeds","incidentTypeIcon","incidentsTypes","lossDatabaseIcon","incidentsLossDatabase","Incidents","IncidentsActionsLayout","IncidentsAssessmentsLayout","IncidentsCommandCenterLayout","IncidentsFeedsLayout","IncidentTypesActionBar","refreshIncidentTypes","paginateIncidentTypes","IncidentTypesListHeader","IncidentTypesListItem","cap","code","IncidentTypesList","incidenttypes","IncidentTypes_ListHeader","incidenttype","IncidentTypes_ListItem","IncidentTypesFilters","filterIncidentTypes","clearIncidentTypeFilters","IncidentTypeForm","updatedIncidentType","putIncidentType","postIncidentType","caps","IncidentTypes_Form_Option","IncidentTypes","openIncidentTypeForm","closeIncidentTypeForm","selectIncidentType","getIncidentTypes","IncidentTypes_Search","searchIncidentTypes","IncidentTypes_ActionBar","IncidentTypes_List","IncidentTypes_Filters","IncidentTypes_Form","IncidentsIncidentTypesLayout","components_IncidentTypes","IncidentsLossDatabaseLayout","plannerIcon","emergencyPlansPlanner","activitiesIcon","emergencyPlansActivities","proceduresIcon","emergencyPlansProcedures","disseminationIcon","emergencyPlansDisseminations","activationIcon","emergencyPlansActivations","drillsAndExercisesIcon","emergencyPlansDrillsExercises","EmergencyPlans","EmergencyPlansActivationsLayout","getItems","getPlans","getRoles","ActivityForm","activity","updatedActivity","putActivity","postActivity","plan","incidentType","owner","ActivityForm_TextArea","es_radio","primary","role","supportive","ActivitiesFilters","filterActivities","clearActivityFilters","ActivitiesActionBar","selectedItemCount","onNotify","refreshActivities","paginateActivities","ActivitiesListHeader","ActivitiesListItem","handleToggleSelect","isSelected","onSelectItem","onDeselectItem","checked","sideComponent","withRouter","ActivitiesList","selectedActivities","handleOnSelectActivity","handleSelectAll","handleFilterByStatus","handleOnDeselectActivity","selectedList","remove","activities","selectedActivitiesCount","Activities_ActionBar","onFilterByStatus","Activities_ListHeader","Activities_ListItem","includes","deleteActivity","getActivities","NotificationForm","notification","$in","recipients","body","console","log","NotificationForm_TextArea","Activities_NotificationForm","Activities","showNotificationForm","openActivityForm","closeActivityForm","searchActivities","selectActivity","openNotificationForm","closeNotificationForm","params","planId","Activities_Search","Activities_List","Activities_Filters","Activities_ActivityForm","activePlan","EmergencyPlansActivitiesLayout","components_Activities","EmergencyPlansDisseminationsLayout","EmergencyPlansDrillsLayout","PlansFilters","filterPlans","clearPlanFilters","PlansActionBar","isGridLayout","onToggleLayout","refreshPlans","current","paginatePlans","PlanOptions","onEditPlan","PlansGridListItem","showPopover","handlePopoverVisibilityChange","isVisible","handleHidePopover","handleEditPlan","handleDisseminatePlan","handleActivatePlan","jurisdiction","activityCount","card","borderLeft","padding","fontSize","badge","count","boxShadow","Intl","DateTimeFormat","Date","GridListItem_PlanOptions","trigger","onVisibleChange","PlansListHeader","PlansListItem","boundary","PlansList","selectedPlans","handleOnSelectPlan","handleToggleLayout","previousState","handleOnDeselectPlan","plans","selectedPlansCount","Planner_ActionBar","grid","gutter","GridListItem","handleOpenPlanEditForm","Planner_ListHeader","Planner_ListItem","deletePlan","Planner_NotificationForm_TextArea","Planner_NotificationForm","getFocalPeople","PlanForm","updatedPlan","putPlan","postPlan","feature","upperFirst","Planner_PlanForm","Plans","openPlanForm","closePlanForm","searchPlans","selectPlan","Planner_Search","Planner_List","Planner_Filters","EmergencyPlansPlannerLayout","Planner","ProceduresFilters","filterProcedures","clearProcedureFilters","ProceduresActionBar","refreshProcedures","paginateProcedures","ProceduresListHeader","ProceduresListItem","ProceduresList","selectedProcedures","handleOnSelectProcedure","procedure","handleOnDeselectProcedure","procedures","selectedProceduresCount","Procedures_ActionBar","Procedures_ListHeader","Procedures_ListItem","deleteProcedure","getProcedures","Procedures_NotificationForm_TextArea","Procedures_NotificationForm","ProcedureForm","updatedProcedure","putProcedure","postProcedure","ProcedureForm_TextArea","Procedures_ProcedureForm","Procedures","openProcedureForm","closeProcedureForm","searchProcedures","selectProcedure","activityId","Procedures_Search","Procedures_List","Procedures_Filters","EmergencyPlansProceduresLayout","components_Procedures","adjustmentsIcon","resourcesAdjustments","itemsIcon","resourcesItems","itemCategoriesIcon","resourcesItemCategories","stockIcon","resourcesStocks","utilizationIcon","resourcesConsumption","itemUnitsIcon","Resources","Topbar","actions","Topbar_Search","action","AdjustmentListItem","itemName","warehouseName","quantity","cost","reason","creationDate","ListHeader","onSelectAll","onDeselectAll","isBulkSelected","Toolbar","selectedItemsCount","exportUrl","onPaginate","onRefresh","onShare","href","download","fontWeight","pluralize","singularize","getAdjustmentsExportUrl","AdjustmentsList","selectedAdjustments","selectedPages","handleSelectAdjustment","adjustment","adjustments","uniqBy","pages","uniq","handleDeselectAdjustment","handleDeselectAll","_this$state2","forEach","_this$props3","_this$state3","selectedAdjustmentsCount","intersectionBy","components_Toolbar","paginateAdjustments","refreshAdjustments","components_ListHeader","Adjustments_ListItem","store","AdjustmentsFilters","filterAdjustments","clearAdjustmentFilters","reasons","from","Adjustments_Filters","Adjustments","searchAdjustments","getAdjustments","searchQuery","components_Topbar","Adjustments_List","ResourcesAdjustmentsLayout","components_Adjustments","onSearchRecipients","contact","tooltip","components_NotificationForm_TextArea","components_NotificationForm","ItemCategoryForm","itemCategory","updateItemCategory","putItemCategory","postItemCategory","defaultColor","ItemCategories_Form_TextArea","ItemCategories_Form","ListItemActions","edit","share","archive","transfer","adjust","dropdown","overlay","menu","confirm","ListItem","showArchiveConfirm","okText","okType","cancelText","onOk","truncate","components_ListItemActions","getItemCategoriesExportUrl","ItemCategoriesList","selectedItemCategories","handleOnSelectItem","itemCategories","handleOnDeselectItem","paginateItemCategories","refreshItemCategories","ItemCategories_ListItem","deleteItemCategory","getItemCategoriesFromAPI","getItemCategories","ItemCategories","notificationBody","openItemCategoryForm","closeItemCategoryForm","searchItemCategories","selectItemCategory","handleShare","handleBulkShare","join","handleAfterCloseNotificationForm","ItemCategories_List","onBulkShare","ResourceItemCategoriesLayout","components_ItemCategories","ItemsFilters","filterItems","clearItemFilters","uoms","uom","getItemUnits","ItemForm","updatedItem","putItem","postItem","Items_Form_TextArea","getItemsExportUrl","ItemsList","selectedItems","items","resourceItem","paginateItems","refreshItems","Items_ListItem","deleteItem","getItemsFromAPI","Items","openItemForm","closeItemForm","searchItems","selectItem","Items_List","Items_Filters","Items_Form","ResourceItemsLayout","components_Items","ItemUnitListItem","getItemUnitsExportUrl","ItemUnitList","selectedItemUnit","handleSelectItemUnit","itemUnit","itemUnits","handleDeselectItemUnit","selectedItemUnitsCount","paginateItemUnits","refreshItemUnits","ItemUnits_ListItem","deleteItemUnit","ItemUnitForm","putItemUnit","postItemUnit","ItemUnits_Form_TextArea","ItemUnits_Form","ItemUnit","openItemUnitForm","closeItemUnitForm","selectItemUnit","searchItemUnit","searchItemUnits","ItemUnits_List","ResourcesItemUnitLayout","ItemUnits","getAgencies","getWarehouses","StockForm","stock","updatedStock","putStock","postStock","Stock_Form","SelectInput","SelectInput_Option","AdjustmentForm","party","postAdjustment","components_SelectInput","input_number","min","AdjustmentForm_TextArea","StockListItem","onAdjust","getStocksExportUrl","StockList","selectedStocks","handleSelectStock","stocks","handleDeselectStock","selectedStocksCount","paginateStocks","refreshStocks","Stock_ListItem","Stocks","openStockForm","closeStockForm","openAdjustmentForm","closeAdjustmentForm","searchStocks","selectStock","handleAdjustment","getStocks","postingAdjustment","showAdjustmentForm","Stock_List","Stock_AdjustmentForm","ResourcesStockLayout","Stock","ResourcesUtilizationLayout","getWarehousesExportUrl","selectedWarehouse","handleOnSelectWarehouse","handleOnDeselectWarehouse","selectedWarehouseCount","paginateWarehouses","refreshWarehouses","components_Warehouses_ListItem","deleteWarehouse","React","putWarehouse","postWarehouse","components_Warehouses_Form_Option","components_Warehouses_Form","filterWarehouses","clearWarehouseFilters","components_Warehouses_Filters","openWarehouseForm","closeWarehouseForm","searchWarehouse","searchWarehouses","selectWarehouse","components_Warehouses_List","ResourcesWarehousesLayout","Resources_components_Warehouses","contactsIcon","stakeholdersFocalPeople","agenciesIcon","stakeholdersAgencies","rolesIcon","stakeholdersRoles","notificationsIcon","stakeholdersNotifications","Stakeholders","AgencyForm","agency","updatedAgency","putAgency","postAgency","groups","group","location","landline","fax","physicalAddress","AgencyForm_TextArea","postalAddress","AgenciesFilters","filterAgencies","clearAgencyFilters","AgencyListItem","getAgenciesExportUrl","AgencyList","selectedAgencies","handleOnSelectAgency","agencies","handleOnDeselectAgency","selectedAgenciesCount","paginateAgencies","refreshAgencies","Agencies_ListItem","deleteAgency","Agencies_NotificationForm_TextArea","Agencies_NotificationForm","generateShareAgencyContent","Agencies","openAgencyForm","closeAgencyForm","searchAgencies","selectAgency","Agencies_Search","Agencies_List","Agencies_Filters","Agencies_AgencyForm","StakeholdersAgenciesLayout","components_Agencies","FocalPeopleFilters","filterFocalPeople","clearFocalPersonFilters","FocalPersonForm","focalPerson","updatedFocalPerson","putFocalPerson","postFocalPerson","FocalPeople_Form_TextArea","FocalPeopleListItem","agencyAbbreviation","getFocalPeopleExportUrl","FocalPersonsList","selectedFocalPeople","handleOnSelectFocalPerson","focalPeople","handleOnDeselectFocalPerson","selectedFocalPeopleCount","paginateFocalPeople","refreshFocalPeople","FocalPeople_ListItem","compact","place","deleteFocalPerson","getFocalPeopleFromAPI","FocalPeople","openFocalPersonForm","closeFocalPersonForm","searchFocalPeople","selectFocalPerson","FocalPeople_List","FocalPeople_Filters","FocalPeople_Form","StakeholdersFocalPeopleLayout","components_FocalPeople","StakeholdersNotificationsLayout","RolesFilters","filterRoles","clearRoleFilters","properties","Roles_Filters","RoleListItem","getRolesExportUrl","RoleList","selectedRoles","handleOnSelectRole","handleOnDeselectRole","roles","selectedRolesCount","paginateRoles","refreshRoles","Roles_ListItem","deleteRole","RoleForm","updatedRole","putRole","postRole","Roles_Form_TextArea","Roles_Form","getStakeholders","Roles_NotificationForm_TextArea","Roles_NotificationForm","Roles","openRoleForm","closeRoleForm","searchRoles","selectRole","Roles_Search","Roles_List","StakeholdersRolesLayout","components_Roles","NavItem","ModuleNavMenu","HeaderNavMenu_NavItem","Header","Content","breadcrumbNameMap","/","/alerts","/alerts/actions","/alerts/feedback","/alerts/feeds","/alerts/alerts","/alerts/servicerequests","/alerts/sources","/assessments","/assessments/indicators","/assessments/questionnaires","/assessments/questions","/assessments/responses","/geographicalfeatures/administrativeboundaries","/geographicalfeatures/districts","/geographicalfeatures/evacuationcenters","/geographicalfeatures/facilities","/geographicalfeatures","/geographicalfeatures/infrastructure","/geographicalfeatures/regions","/geographicalfeatures/subwards","/geographicalfeatures/warehouses","/geographicalfeatures/wards","/incidents/actions","/incidents/assessments","/incidents/commandcenter","/incidents/feeds","/incidents","/incidents/incidenttypes","/incidents/lossdatabase","/plans/activations","/plans/activities","/plans/disseminations","/plans/drills","/plans","/plans/planner","/plans/procedures","/resources","/resources/adjustments","/resources/items","/resources/itemcategories","/resources/unitsofmeasure","/resources/stocks","/resources/utilization","/resources/warehouses","/stakeholders/focalpeople","/stakeholders/agencies","/stakeholders/notifications","/stakeholders/roles","/stakeholders","userMenu","BaseLayout","pathSnippets","pathname","split","i","lastPath","extraBreadcrumbItems","_","index","breadcrumb","breadcrumbItems","layout","separator","HeaderNavMenu","borderRadius","Switch","Route","exact","component","AlertsActionsLayout","AlertsFeedsLayout","AlertsFeedbackLayout","AlertsSourcesLayout","AlertsServiceRequestsLayout","AssessmentsIndicatorsLayout","AssessmentsQuestionnairesLayout","AssessmentsQuestionsLayout","AssessmentsResponsesLayout","GeographicalFeaturesFacilitiesLayout","GeographicalFeaturesInfrastructureLayout","GeographicalFeaturesWarehousesLayout","EmergencyPlanPlannerLayout","EmergencyPlanProceduresLayout","EmergencyPlanActivationsLayout","EmergencyPlanActivitiesLayout","EmergencyPlanDisseminationsLayout","EmergencyPlanDrillsLayout","ResourcesItemsLayout","ResourcesItemCategoriesLayout","initializeApp","setDefaultIndicator","App","es","HashRouter","hashType","layouts_BaseLayout","Boolean","window","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,2DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC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","file":"static/js/main.ce155e81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alerts.2b9676ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/geographicalfeatures.afaa3522.svg\";","module.exports = __webpack_public_path__ + \"static/media/incidents-disabled.50e41655.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboards-disabled.b009fe31.svg\";","module.exports = __webpack_public_path__ + \"static/media/stakeholders.9e15a723.svg\";","module.exports = __webpack_public_path__ + \"static/media/resources.046ce00f.svg\";","module.exports = __webpack_public_path__ + \"static/media/emergencyplans.a8e6ba77.svg\";","module.exports = __webpack_public_path__ + \"static/media/assessments.03d92314.svg\";","module.exports = __webpack_public_path__ + \"static/media/issuedalerts.dac64e5f.svg\";","module.exports = __webpack_public_path__ + \"static/media/actions-disabled.bf16cb83.svg\";","module.exports = __webpack_public_path__ + \"static/media/surveyandfeedback-disabled.28798a51.svg\";","module.exports = __webpack_public_path__ + \"static/media/servicerequest-disabled.594b8580.svg\";","module.exports = __webpack_public_path__ + \"static/media/feeds-disabled.1b6c1873.svg\";","module.exports = __webpack_public_path__ + \"static/media/sources.53329387.svg\";","module.exports = __webpack_public_path__ + \"static/media/indicators.0358a355.svg\";","module.exports = __webpack_public_path__ + \"static/media/questionnaires.ef3048f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/questions.234208b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/responses-disabled.3bd401e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/district.c4a734ba.svg\";","module.exports = __webpack_public_path__ + \"static/media/evacuationCenter.ba784640.svg\";","module.exports = __webpack_public_path__ + \"static/media/facilities.eae574be.svg\";","module.exports = __webpack_public_path__ + \"static/media/infrastructures.86cbb4a6.svg\";","module.exports = __webpack_public_path__ + \"static/media/warehouse.2c3a52a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/region.72ba24f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/subward.bbf7618b.svg\";","module.exports = __webpack_public_path__ + \"static/media/ward.d2a06fa0.svg\";","module.exports = __webpack_public_path__ + \"static/media/incidentcommandcenter.4548c575.svg\";","module.exports = __webpack_public_path__ + \"static/media/assessments.35cd8d74.svg\";","module.exports = __webpack_public_path__ + \"static/media/incidenttype.7e9d1623.svg\";","module.exports = __webpack_public_path__ + \"static/media/lossdatabase.3fe15a23.svg\";","module.exports = __webpack_public_path__ + \"static/media/feed.d2615595.svg\";","module.exports = __webpack_public_path__ + \"static/media/actions.d23d778a.svg\";","module.exports = __webpack_public_path__ + \"static/media/activations-disabled.1fbcc5b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/disseminations-disabled.5a3c1288.svg\";","module.exports = __webpack_public_path__ + \"static/media/drillsandexercises-disabled.35c24e22.svg\";","module.exports = __webpack_public_path__ + \"static/media/planner.7bb2d55c.svg\";","module.exports = __webpack_public_path__ + \"static/media/procedures.89aeadc1.svg\";","module.exports = __webpack_public_path__ + \"static/media/activities.a50b1f93.svg\";","module.exports = __webpack_public_path__ + \"static/media/adjustment.ed65575d.svg\";","module.exports = __webpack_public_path__ + \"static/media/item.2081cf36.svg\";","module.exports = __webpack_public_path__ + \"static/media/itemcategory.73fcb79a.svg\";","module.exports = __webpack_public_path__ + \"static/media/stock.d96e1408.svg\";","module.exports = __webpack_public_path__ + \"static/media/utilization-disabled.5016bf07.svg\";","module.exports = __webpack_public_path__ + \"static/media/warehouse.2c3a52a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/itemunit.969973b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/agency.36b84771.svg\";","module.exports = __webpack_public_path__ + \"static/media/contacts.88944012.svg\";","module.exports = __webpack_public_path__ + \"static/media/notifications-disabled.1fe753a4.svg\";","module.exports = __webpack_public_path__ + \"static/media/roles.c8c6059a.svg\";","import { Col, Row, Popover } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './styles.css';\n\n/**\n * @function\n * @name NavigationMenuItem\n * @description Navigation menu item that have icon(image) and name for the module to\n * navigate to\n *\n * @param {Object} props props object\n * @param {string} props.name  name/description/label for nav item\n * @param {string} props.icon  path to svg image used as nav icon\n * @param {string} props.path  path to navigate to when clicked\n * @param {boolean} props.disabled flag to mark it navigation menu is disabled\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst NavigationMenuItem = ({ name, icon, path, disabled, description }) => (\n  <Link to={path}>\n    {description ? (\n      <Popover\n        content={\n          <p\n            style={{\n              width: '200px',\n              textAlign: 'justify',\n              textJustify: 'auto',\n            }}\n          >\n            {description}\n          </p>\n        }\n        placement=\"bottom\"\n      >\n        <div className=\"NavigationMenuItem\">\n          <img\n            src={icon}\n            alt={`${name} icon not available`}\n            width={130}\n            height={130}\n            className=\"image\"\n          />\n          <span className={`text ${disabled ? 'text-disabled' : ''}`}>\n            {name}\n          </span>\n        </div>\n      </Popover>\n    ) : (\n      <div className=\"NavigationMenuItem\">\n        <img\n          src={icon}\n          alt={`${name} icon not available`}\n          width={130}\n          height={130}\n          className=\"image\"\n        />\n        <span className={`text ${disabled ? 'text-disabled' : ''}`}>\n          {name}\n        </span>\n      </div>\n    )}\n  </Link>\n);\n\n/**\n *\n * @function\n * @name Home\n * @description Navigation Menu which renders provided routes\n *\n * @param {Object} props props object\n * @param {Object[]} props.routes list of all navigation routes\n * @param {Object} props.match match object from react router\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst NavigationMenu = ({ routes, match }) => {\n  let url = '';\n  let colSpan = 12;\n\n  if (match) {\n    ({ url } = match);\n  }\n\n  if (routes.length > 4) {\n    colSpan = 8;\n  }\n\n  return (\n    <div className=\"NavigationMenu\">\n      <Row type=\"flex\" align=\"middle\">\n        {routes.map(route => (\n          <Col key={route.path} span={colSpan}>\n            <NavigationMenuItem\n              name={route.name}\n              icon={route.icon}\n              path={route.disabled ? '#' : url + route.path}\n              disabled={route.disabled}\n              description={route.description}\n            />\n          </Col>\n        ))}\n      </Row>\n    </div>\n  );\n};\n\n/* props validation */\nNavigationMenuItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n};\n\nNavigationMenu.propTypes = {\n  routes: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      path: PropTypes.string.isRequired,\n      icon: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  match: PropTypes.shape({ url: PropTypes.string }),\n};\n\nNavigationMenu.defaultProps = {\n  match: undefined,\n};\nNavigationMenuItem.defaultProps = {\n  disabled: false,\n};\n\nexport default NavigationMenu;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport issuedAlertsIcon from '../assets/icons/alerts/issuedalerts.svg';\nimport actionsIcon from '../assets/icons/alerts/actions-disabled.svg';\nimport surveyAndFeedbackIcon from '../assets/icons/alerts/surveyandfeedback-disabled.svg';\nimport serviceRequestsIcon from '../assets/icons/alerts/servicerequest-disabled.svg';\nimport feedsIcon from '../assets/icons/alerts/feeds-disabled.svg';\nimport sourceIcon from '../assets/icons/alerts/sources.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Issued Alerts',\n    path: '/alerts',\n    icon: issuedAlertsIcon,\n    description: modules.alertsIssued,\n  },\n  {\n    name: 'Actions Taken',\n    path: '/actions',\n    icon: actionsIcon,\n    description: modules.alertsActions,\n    disabled: true,\n  },\n  {\n    name: 'Alerts Feed',\n    path: '/feeds',\n    icon: feedsIcon,\n    description: modules.alertsFeeds,\n    disabled: true,\n  },\n  {\n    name: 'Surveys & Feedbacks',\n    path: '/feedback',\n    icon: surveyAndFeedbackIcon,\n    description: modules.alertsAssessments,\n    disabled: true,\n  },\n  {\n    name: 'Alert Sources',\n    path: '/sources',\n    icon: sourceIcon,\n    description: modules.alertsSources,\n  },\n  {\n    name: 'Service Requests',\n    path: '/servicerequests',\n    icon: serviceRequestsIcon,\n    description: modules.alertsServiceRequests,\n    disabled: true,\n  },\n];\n\n/**\n * @function\n * @name Alerts\n * @description Alerts component which shows to navigation Nav\n *\n * @param {Object} match object with routes information\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Alerts = ({ match }) => <NavigationMenu match={match} routes={routes} />;\n\n/* props validation */\nAlerts.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default Alerts;\n","import { Button, Icon } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * @function\n * @name EmptyState\n * @description Empty state component\n *\n * @param {Object} props props object\n * @param {string} props.icon path to state icon\n * @param {string} props.description state description\n * @param {string} props.buttonLabel state button label\n * @param {Function} props.onClick state button onClick callback\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst EmptyState = ({ icon, description, buttonLabel, onClick }) => (\n  <div className=\"EmptyState\">\n    <Icon type={icon} className=\"Icon\" />\n    <p className=\"description\">{description}</p>\n    <Button onClick={onClick}>{buttonLabel}</Button>\n  </div>\n);\n\n/* Props validation */\nEmptyState.propTypes = {\n  icon: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  buttonLabel: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default EmptyState;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\n/**\n * @function\n * @name AlertActionsLayout\n * @description Render alert actions layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertActionsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Alerts Actions yet,but when they are available will appear here\"\n      buttonLabel=\"New Alert\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default AlertActionsLayout;\n","import { message } from 'antd';\n\n/**\n * @function\n * @name notifyError\n * @description Show error message box\n *\n * @param {Object} error  error object\n * @returns {undefined} undefined\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nexport const notifyError = error => {\n  // eslint-disable-next-line\n  if (!navigator.onLine) {\n    return message.error(\n      'You are currently offline, Please ensure Network connection is available'\n    );\n  }\n\n  return message.error(error);\n};\n\n/**\n * @function\n * @name notifySuccess\n * @description Show a success message box\n *\n * @param {string} details information to be displayed on message box\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nexport const notifySuccess = details => {\n  message.success(details);\n};\n\n/**\n * @function\n * @name notifyInfo\n * @description Show a info message box\n *\n * @param {string} info information to be displayed on message box\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nexport const notifyInfo = info => {\n  message.info(info);\n};\n","import { refreshAlerts, paginateAlerts } from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name AlertsActionBar\n * @description  Render action bar for actions which are applicable\n * to list content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of alerts\n * @param {Function} props.onFilter function to filter alerts\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertsActionBar = ({ page, total, onFilter }) => (\n  <div className=\"AlertsActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Alerts\"\n          onClick={() =>\n            refreshAlerts(\n              () => {\n                notifySuccess('Alerts refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing alerts, please alerts \n                  system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"mail\"\n          title=\"Send Alerts\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Alerts\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={13}\n        xl={{ span: 1, offset: 14 }}\n        xxl={{ span: 1, offset: 16 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Alerts\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateAlerts(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nAlertsActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default AlertsActionBar;\n","import {\n  clearAlertFilters,\n  Connect,\n  filterAlerts,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name AlertsFilters\n * @description Filter modal component for filtering alerts\n *\n * @param {Object} props props object\n * @param {Object} props.alertSchema alert schema object\n * @param {Object} props.filter alert filter object\n * @param {Object} props.form antd form\n * @param {Function} props.onCancel function to cancel alert filters\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AlertsFilters extends Component {\n  static propTypes = {\n    alertSchema: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      urgency: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      severity: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      certainty: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      type: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      response: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n    }).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        category: PropTypes.arrayOf(PropTypes.string),\n        urgency: PropTypes.arrayOf(PropTypes.string),\n        severity: PropTypes.arrayOf(PropTypes.string),\n        certainty: PropTypes.arrayOf(PropTypes.string),\n        type: PropTypes.arrayOf(PropTypes.string),\n        response: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    onCancel: PropTypes.func.isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterAlerts(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * Action handle when clear\n   *\n   * @function\n   * @name handleClearFilter\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearAlertFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      filter,\n      alertSchema,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start alert types filters */}\n        <Form.Item {...formItemLayout} label=\"By  Message Types\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {alertSchema.type.enum.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end alert types filters */}\n\n        {/* start alert categories filters */}\n        <Form.Item {...formItemLayout} label=\"By  Categories\">\n          {getFieldDecorator('category', {\n            initialValue: filter ? filter.category : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {alertSchema.category.enum.map(category => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={category}>\n                    <Checkbox value={category}>{category}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end alert categories filters */}\n\n        {/* start alert responses filters */}\n        <Form.Item {...formItemLayout} label=\"By  Response Type\">\n          {getFieldDecorator('response', {\n            initialValue: filter ? filter.response : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {alertSchema.response.enum.map(response => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={response}>\n                    <Checkbox value={response}>{response}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end alert responses filters */}\n\n        {/* start alert urgency filters */}\n        <Form.Item {...formItemLayout} label=\"By  Urgency\">\n          {getFieldDecorator('urgency', {\n            initialValue: filter ? filter.urgency : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {alertSchema.urgency.enum.map(urgency => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={urgency}>\n                    <Checkbox value={urgency}>{urgency}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end alert urgency filters */}\n\n        {/* start alert severity filters */}\n        <Form.Item {...formItemLayout} label=\"By  Severity\">\n          {getFieldDecorator('severity', {\n            initialValue: filter ? filter.severity : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {alertSchema.severity.enum.map(severity => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={severity}>\n                    <Checkbox value={severity}>{severity}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end alert severity filters */}\n\n        {/* start alert cetainity filters */}\n        <Form.Item {...formItemLayout} label=\"By  Certainity\">\n          {getFieldDecorator('certainty', {\n            initialValue: filter ? filter.certainty : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {alertSchema.certainty.enum.map(certainty => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={certainty}>\n                    <Checkbox value={certainty}>{certainty}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end alert certainity filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(AlertsFilters, {\n    alertSchema: 'alerts.schema.properties',\n    filter: 'alerts.filter',\n  })\n);\n","import { Select, Spin } from 'antd';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport isFunction from 'lodash/isFunction';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/* local constants */\nconst { Option } = Select;\n\n/**\n *\n * @class\n * @name SearchableSelectInput\n * @description Searchable select input\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nexport default class SearchableSelectInput extends Component {\n  static propTypes = {\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func.isRequired,\n    optionLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n      .isRequired,\n    optionValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.func,\n    ]).isRequired,\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.func,\n    ]),\n    initialValue: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.number,\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n      }),\n    ]),\n    isFilter: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    onChange: null,\n    value: undefined,\n    initialValue: undefined,\n    isFilter: false,\n  };\n\n  constructor(props) {\n    super(props);\n    const { initialValue } = props;\n\n    if (isArray(initialValue)) {\n      this.state = {\n        data: [...initialValue],\n        loading: false,\n      };\n    } else if (!isEmpty(initialValue)) {\n      // console.log(props.initialValue[optionValue]);\n      this.state = {\n        data: [initialValue],\n        loading: false,\n      };\n    } else {\n      this.state = {\n        data: [],\n        loading: false,\n      };\n    }\n  }\n\n  /**\n   *\n   * @function\n   * @name handleSearch\n   * @description Function called when searching in select box\n   *\n   * @param {string} value value passed to the when function called\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSearch = value => {\n    const { onSearch } = this.props;\n    onSearch({ q: value }).then(response => {\n      this.setState({ data: response.data, loading: false });\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleChange\n   * @description Function called when value of select box changes\n   *\n   * @param {string} value value passed to the when function called\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleChange = value => {\n    const { onChange } = this.props;\n    this.setState({\n      value,\n    });\n    onChange(value);\n  };\n\n  /**\n   *\n   * @function\n   * @name handleOnDropdownVisibleChange\n   * @description Function called when the select box is opened\n   *\n   * @param {string} open open select box\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDropdownVisibleChange = open => {\n    const { onSearch } = this.props;\n    const { data } = this.state;\n\n    if (open && data.length < 9) {\n      this.setState({ loading: true });\n      onSearch()\n        .then(response => {\n          this.setState({ data: [...response.data], loading: false });\n        })\n        .catch(() => {\n          // TODO handle error here\n          this.setState({ loading: false });\n        });\n    }\n  };\n\n  /**\n   * Extract Option property based on provided prop\n   *\n   * @function\n   * @name getOptionProp\n   *\n   * @param {string|Function} prop - The property name or value return from\n   *                                   a provided function\n   * @param {Object} option - A single data item for select options\n   * @returns {string} - Value of the extracted property\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  getOptionProp = (prop, option) => {\n    if (isFunction(prop)) {\n      return prop(option);\n    }\n    return option[prop];\n  };\n\n  render() {\n    const { data, loading, value } = this.state;\n    const { optionValue, optionLabel, isFilter, ...otherProps } = this.props;\n\n    const options = data.map(option => (\n      <Option key={this.getOptionProp(optionValue, option)}>\n        {this.getOptionProp(optionLabel, option)}\n      </Option>\n    ));\n\n    if (isFilter) {\n      return (\n        <Select\n          {...otherProps}\n          showSearch\n          mode=\"multiple\"\n          onSearch={this.handleSearch}\n          onChange={this.handleChange}\n          allowClear\n          value={value}\n          onDropdownVisibleChange={this.handleOnDropdownVisibleChange}\n          filterOption={false}\n          notFoundContent={\n            loading ? <Spin size=\"small\" /> : 'Results Not Found'\n          }\n        >\n          {options}\n        </Select>\n      );\n    }\n\n    return (\n      <Select\n        {...otherProps}\n        showSearch\n        onSearch={this.handleSearch}\n        onChange={this.handleChange}\n        allowClear\n        onDropdownVisibleChange={this.handleOnDropdownVisibleChange}\n        filterOption={false}\n        notFoundContent={loading ? <Spin size=\"small\" /> : 'Results Not Found'}\n      >\n        {options}\n      </Select>\n    );\n  }\n}\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Connect, postAlert, putAlert } from '@codetanzania/emis-api-states';\nimport { Button, Col, DatePicker, Form, Input, Row, Select } from 'antd';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getAlertSources, getFeatures } = httpActions;\nconst { Option } = Select;\nconst { TextArea } = Input;\nconst eventTitle =\n  'The text denoting the type of the subject event of the alert message';\nconst headlineTitle = `A brief human-readable headline.  it SHOULD be made as direct and actionable\n   as possible while remaining short. 160 characters MAY be a useful target limit for headline length.`;\nconst areaTitle = 'A text description of the affected area(s).';\nconst onSetTitle =\n  'The expected time of the beginning of the subject event of the alert message';\nconst expiredAtTitle =\n  'The expiry time of the information of the alert message';\nconst instructionsTitle =\n  'The text describing the recommended action to be taken by recipients of the alert message';\nconst statusTitle =\n  'The code denoting the appropriate handling of the alert message';\nconst categoryTitle =\n  'The code denoting the category of the subject event of the alert message';\nconst urgencyTitle =\n  'The code denoting the urgency of the subject event of the alert message';\nconst severityTitle =\n  'The code denoting the severity of the subject event of the alert message';\nconst certaintyTitle =\n  'The code denoting the certainty of the subject event of the alert message';\nconst typeTitle = 'The code denoting the nature of the alert message';\nconst responseTypetitle =\n  'The code denoting the type of action recommended for the target audience';\nconst alertSourceTitle =\n  'The human-readable name of the agency or authority issuing this alert.';\n\n/**\n * @class\n * @name AlertForm\n * @description  form for creating a new alert\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AlertForm extends Component {\n  static propTypes = {\n    alertSchema: PropTypes.shape({\n      category: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      urgency: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      severity: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      certainty: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      type: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n      response: PropTypes.arrayOf(\n        PropTypes.shape({ enum: PropTypes.arrayOf(PropTypes.string) })\n      ),\n    }).isRequired,\n    alert: PropTypes.shape({\n      event: PropTypes.string,\n      category: PropTypes.string,\n      urgency: PropTypes.string,\n      area: PropTypes.string,\n      severity: PropTypes.string,\n      certainty: PropTypes.string,\n      instruction: PropTypes.string,\n      headline: PropTypes.string,\n      expiredAt: PropTypes.string,\n      expectedAt: PropTypes.string,\n      _id: PropTypes.string,\n    }),\n    posting: PropTypes.bool.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    isEditForm: PropTypes.bool.isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n  };\n\n  static defaultProps = {\n    alert: null,\n  };\n\n  componentDidMount() {\n    getFeatures();\n  }\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description  handle alert form submission\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      alert,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const {\n          event,\n          area,\n          category,\n          urgency,\n          severity,\n          certainty,\n          instruction,\n          headline,\n          expectedAt,\n          expiredAt,\n        } = values;\n\n        const payload = {\n          category,\n          headline,\n          expectedAt: expectedAt.toISOString(),\n          expiredAt: expiredAt.toISOString(),\n          event,\n          area,\n          urgency,\n          severity,\n          certainty,\n          instruction,\n          source: 'testing',\n        };\n        if (isEditForm) {\n          const updatedAlert = Object.assign({}, alert, payload);\n          putAlert(\n            updatedAlert,\n            () => {\n              notifySuccess('Alert was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating alert, please try again!'\n              );\n            }\n          );\n        } else {\n          postAlert(\n            payload,\n            () => {\n              notifySuccess('Alert was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving alert, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * @function\n   * @name renderSelectOptions\n   * @description  display select options\n   * @param {Array} options select options\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  renderSelectOptions = options =>\n    options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ));\n\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * @function\n   * @name renderAreaOptions\n   * @description  display area options\n   * @param {Array} options area options\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  renderAreaOptions = options =>\n    options.map(({ name, _id: id }) => (\n      <Option key={id} value={name}>\n        {name}\n      </Option>\n    ));\n\n  render() {\n    const {\n      posting,\n      onCancel,\n      alert,\n      isEditForm,\n      alertSchema,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        <Row justify=\"space-between\" type=\"flex\">\n          <Col span={11}>\n            {/* Alert event */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={eventTitle}>Event</span>}\n            >\n              {getFieldDecorator('event', {\n                initialValue: isEditForm ? alert.event : undefined,\n                rules: [{ required: true, message: 'Alert event is required' }],\n              })(<Input placeholder=\"e.g Flood Tandale\" />)}\n            </Form.Item>\n            {/* end Alert event */}\n\n            {/* Alert headline */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={headlineTitle}>Headline</span>}\n            >\n              {getFieldDecorator('headline', {\n                initialValue: isEditForm ? alert.headline : undefined,\n                rules: [\n                  { required: true, message: 'Alert headline is required' },\n                ],\n              })(\n                <Input placeholder=\"e.g ORANGE WARNING. Strong winds and Large waves\" />\n              )}\n            </Form.Item>\n            {/* end Alert headline */}\n\n            {/* alert status */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={statusTitle}>Status</span>}\n            >\n              {getFieldDecorator('status', {\n                initialValue: isEditForm ? alert.category : undefined,\n                rules: [\n                  { required: true, message: 'Alert status is required' },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.status.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert status */}\n\n            {/* alert area */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={areaTitle}>Area(s)</span>}\n            >\n              {getFieldDecorator('area', {\n                rules: [\n                  { required: true, message: 'Affected area(s) is required' },\n                ],\n              })(\n                <SearchableSelectInput\n                  placeholder=\"Please select affected area\"\n                  onSearch={getFeatures}\n                  optionLabel=\"name\"\n                  optionValue=\"name\"\n                />\n              )}\n            </Form.Item>\n            {/* end alert area */}\n\n            {/* alert onset date  */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={onSetTitle}>OnSet</span>}\n            >\n              {getFieldDecorator('expectedAt', {\n                initialValue: isEditForm\n                  ? moment(alert.expectedAt).utc()\n                  : undefined,\n                rules: [\n                  { required: true, message: 'Alert  OnSet date is required' },\n                ],\n              })(\n                <DatePicker\n                  style={{ width: '100%' }}\n                  showTime\n                  format=\"YYYY-MM-DD HH:mm:ss\"\n                />\n              )}\n            </Form.Item>\n            {/* end alert onset date */}\n\n            {/* alert expires date  */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={expiredAtTitle}>Expires At</span>}\n            >\n              {getFieldDecorator('expiredAt', {\n                initialValue: isEditForm\n                  ? moment(alert.expiredAt).utc()\n                  : undefined,\n                rules: [\n                  { required: true, message: 'Alert Expire date is required' },\n                ],\n              })(\n                <DatePicker\n                  style={{ width: '100%' }}\n                  showTime\n                  format=\"YYYY-MM-DD HH:mm:ss\"\n                />\n              )}\n            </Form.Item>\n            {/* end alert expire date */}\n\n            {/* alert instructions  */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={instructionsTitle}>Instructions</span>}\n            >\n              {getFieldDecorator('instruction', {\n                initialValue: isEditForm ? alert.instruction : undefined,\n                rules: [\n                  { required: true, message: 'Alert  Instruction is required' },\n                ],\n              })(<TextArea autosize={{ minRows: 2, maxRows: 8 }} />)}\n            </Form.Item>\n            {/* end alert instructions */}\n          </Col>\n          <Col span={11}>\n            {/* alert category */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={categoryTitle}>Category</span>}\n            >\n              {getFieldDecorator('category', {\n                initialValue: isEditForm ? alert.category : undefined,\n                rules: [\n                  { required: true, message: 'Alert category is required' },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.category.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert category */}\n\n            {/* alert urgency */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={urgencyTitle}>Urgency</span>}\n            >\n              {getFieldDecorator('urgency', {\n                initialValue: isEditForm ? alert.urgency : undefined,\n                rules: [\n                  { required: true, message: 'Alert urgency is required' },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.urgency.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert urgency */}\n\n            {/* alert severity */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={severityTitle}>Severity</span>}\n            >\n              {getFieldDecorator('severity', {\n                initialValue: isEditForm ? alert.severity : undefined,\n                rules: [\n                  { required: true, message: 'Alert severity is required' },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.severity.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert severity */}\n            {/* alert certainty */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={certaintyTitle}>Certainty</span>}\n            >\n              {getFieldDecorator('certainty', {\n                initialValue: isEditForm ? alert.certainty : undefined,\n                rules: [\n                  { required: true, message: 'Alert certainty is required' },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.certainty.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert certainty */}\n\n            {/* alert type */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={typeTitle}>Message Type</span>}\n            >\n              {getFieldDecorator('type', {\n                initialValue: isEditForm ? alert.type : undefined,\n                rules: [\n                  { required: true, message: 'Alert Message Type is required' },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.type.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert type */}\n\n            {/* alert response type */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={responseTypetitle}>Response Type</span>}\n            >\n              {getFieldDecorator('response', {\n                initialValue: isEditForm ? alert.response : undefined,\n                rules: [\n                  {\n                    required: true,\n                    message: 'Alert Response Type is required',\n                  },\n                ],\n              })(\n                <Select showSearch>\n                  {this.renderSelectOptions(alertSchema.response.enum)}\n                </Select>\n              )}\n            </Form.Item>\n            {/* end alert response type */}\n\n            {/* alert source */}\n            <Form.Item\n              {...formItemLayout}\n              label={<span title={alertSourceTitle}>Alert Source</span>}\n            >\n              {getFieldDecorator('source', {\n                rules: [\n                  { required: true, message: 'Alert Source is required' },\n                ],\n              })(\n                <SearchableSelectInput\n                  placeholder=\"Please select alert source\"\n                  onSearch={getAlertSources}\n                  optionLabel=\"name\"\n                  optionValue=\"_id\"\n                />\n              )}\n            </Form.Item>\n            {/* end alert source */}\n          </Col>\n        </Row>\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(\n  Connect(AlertForm, {\n    alertSchema: 'alerts.schema.properties',\n  })\n);\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 7, header: 'Event', offset: 1 },\n  { span: 2, header: 'Severity' },\n  { span: 2, header: 'Certainty' },\n  { span: 2, header: 'Urgency' },\n  { span: 2, header: 'Expected' },\n  { span: 2, header: 'Expires' },\n  { span: 3, header: 'Source' },\n];\n\nconst AlertsListHeader = () => (\n  <Row className=\"AlertsListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default AlertsListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n * @class\n * @name AlertsListItem\n * @description Single alert list item component. Render single alert details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AlertsListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    abbreviation: PropTypes.string.isRequired,\n    headline: PropTypes.string,\n    description: PropTypes.string,\n    source: PropTypes.string.isRequired,\n    event: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    certainty: PropTypes.string.isRequired,\n    expiredAt: PropTypes.string.isRequired,\n    expectedAt: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    severity: PropTypes.func.isRequired,\n    urgency: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    description: '',\n    headline: '',\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @function\n   * @name toHumanReadableDate\n   * @description Transforms ISO date to human readable date\n   *\n   * @param {string} isoFormatDate iso format date string\n   * @returns {string} humanReadableDate\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  toHumanReadableDate = isoFormatDate =>\n    moment(isoFormatDate)\n      .utc()\n      .format('ddd, MMM DD YYYY hA');\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @function\n   * @name formatTime\n   * @description formats date to ddd, MMM DD YYYY hA format\n   *\n   * @param {Object} date date object\n   * @returns {string} formatted date\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  formatTime = date => moment(date).format('ddd, MMM DD YYYY hA');\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @function\n   * @name timeAgo\n   * @description creates relative date\n   *\n   * @param {Object} date date object\n   * @returns {string} relative time\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  timeAgo = date => moment(date).fromNow();\n\n  render() {\n    const {\n      abbreviation,\n      source,\n      color,\n      certainty,\n      onEdit,\n      event,\n      headline,\n      description,\n      expiredAt,\n      expectedAt,\n      urgency,\n      severity,\n    } = this.props;\n    const { isHovered } = this.state;\n    const eventTitle = description || headline;\n    const avatarBackgroundColor = color || randomColor();\n    return (\n      <div\n        className=\"AlertsListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: avatarBackgroundColor }}>\n                {abbreviation}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={7} title={eventTitle}>\n            {event}\n          </Col>\n          <Col span={2}>{severity}</Col>\n          <Col span={2}>{certainty}</Col>\n          <Col span={2}>{urgency}</Col>\n          <Col title={this.formatTime(expectedAt)} span={2}>\n            {this.timeAgo(expectedAt)}\n          </Col>\n          <Col title={this.formatTime(expectedAt)} span={2}>\n            {this.timeAgo(expiredAt)}\n          </Col>\n          <Col span={3}>{source}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Alert\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n\n                <Icon\n                  type=\"mail\"\n                  title=\"Send Alert\"\n                  className=\"actionIcon\"\n                  onClick={() => {}}\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AlertsListItem;\n","import { List } from 'antd';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport AlertsListHeader from '../ListHeader';\nimport AlertListItem from '../ListItem';\n\n/**\n * @function\n * @name dateSortDesc\n * @description This is a comparison function that will result in dates being\n *  sorted in DESCENDING order\n *\n * @param {Object} date1 first date object\n * @param {Object} date2 second date object\n *\n * @returns {number} result\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst dateSortDesc = (date1, date2) => {\n  if (date1 > date2) return -1;\n  if (date1 < date2) return 1;\n  return 0;\n};\n\n/**\n * @function\n * @name sortByExpiredAt\n * @description Sorts alerts  in ASCENDING ORDER by expiredAt field\n *\n * @param {Array} alerts alerts to be sorted\n *\n * @returns {Array} sorted Alerts\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst sortByExpiredAt = alerts =>\n  alerts.sort(({ expiredAt: ISOdate1 }, { expiredAt: ISOdate2 }) => {\n    const date1 = moment(ISOdate1);\n    const date2 = moment(ISOdate2);\n    return dateSortDesc(date1, date2);\n  });\n\n/**\n * @function\n * @name sortByUpdatedAt\n * @description Sorts alerts  in DESCENDING ORDER by updatedAt field\n *\n * @param {Array} alerts alerts to be filtered\n *\n * @returns {Array} sortedAlerts\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst sortByUpdatedAt = alerts =>\n  alerts.sort(({ updatedAt: ISOdate1 }, { updatedAt: ISOdate2 }) => {\n    const date1 = moment(ISOdate1);\n    const date2 = moment(ISOdate2);\n    return dateSortDesc(date1, date2);\n  });\n\nconst AlertList = ({ alerts, loading, onEdit }) => {\n  const sortedAlerts = sortByUpdatedAt(sortByExpiredAt(alerts));\n  return (\n    <Fragment>\n      <AlertsListHeader />\n      <List\n        loading={loading}\n        dataSource={sortedAlerts}\n        renderItem={alert => {\n          const {\n            _id: id,\n            urgency,\n            area,\n            certainty,\n            event,\n            expiredAt,\n            expectedAt,\n            source,\n            color,\n            headline,\n            description,\n            reportedAt,\n            severity,\n          } = alert;\n          return (\n            <AlertListItem\n              key={id}\n              abbreviation={source.toUpperCase().charAt(0)}\n              urgency={urgency}\n              area={area}\n              certainty={certainty}\n              event={event}\n              headline={headline}\n              description={description}\n              source={source}\n              color={color}\n              reportedAt={reportedAt}\n              expiredAt={expiredAt}\n              expectedAt={expectedAt}\n              severity={severity}\n              onEdit={() => onEdit(alert)}\n            />\n          );\n        }}\n      />\n    </Fragment>\n  );\n};\n\nAlertList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  alerts: PropTypes.arrayOf(\n    PropTypes.shape({\n      event: PropTypes.string,\n      headline: PropTypes.string,\n      description: PropTypes.string,\n      source: PropTypes.string,\n      color: PropTypes.string.isRequired,\n      reportedAt: PropTypes.string,\n      expiredAt: PropTypes.string,\n      expectedAt: PropTypes.string,\n      _id: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default AlertList;\n","import {\n  closeAlertForm,\n  Connect,\n  getAlerts,\n  openAlertForm,\n  searchAlerts,\n  selectAlert,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport AlertsActionBar from './ActionBar';\nimport AlertsFilters from './Filters';\nimport AlertForm from './Form';\nimport AlertList from './List';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name Alerts\n * @description Render alert module which have search box, actions and alert\n * list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Alerts extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    alert: PropTypes.shape({\n      event: PropTypes.string,\n      category: PropTypes.string,\n      urgency: PropTypes.string,\n      area: PropTypes.string,\n      severity: PropTypes.string,\n      certainty: PropTypes.string,\n      instruction: PropTypes.string,\n      expiredAt: PropTypes.string,\n      expectedAt: PropTypes.string,\n      _id: PropTypes.string,\n    }),\n    alerts: PropTypes.arrayOf(\n      PropTypes.shape({\n        event: PropTypes.string,\n        headline: PropTypes.string,\n        description: PropTypes.string,\n        source: PropTypes.string,\n        reportedAt: PropTypes.string,\n        expiredAt: PropTypes.string,\n        expectedAt: PropTypes.string,\n        _id: PropTypes.string,\n      })\n    ).isRequired,\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    alert: null,\n  };\n\n  componentWillMount() {\n    getAlerts();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   * to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property\n   *  to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * Open alert form\n   *\n   * @function\n   * @name openForm\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openAlertForm();\n  };\n\n  /**\n   * close alert form\n   *\n   * @function\n   * @name openForm\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeAlertForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * Search Alerts List based on supplied filter word\n   *\n   * @function\n   * @name searchAlerts\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchAlerts = event => {\n    searchAlerts(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} alert alert to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = alert => {\n    selectAlert(alert);\n    this.setState({ isEditForm: true });\n    openAlertForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      alerts,\n      alert,\n      loading,\n      posting,\n      page,\n      showForm,\n      total,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"Alerts\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for alerts here ...\"\n              onChange={this.searchAlerts}\n            />\n            {/* end search input component */}\n          </Col>\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Alert\"\n              onClick={this.openForm}\n            >\n              New Alert\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <AlertsActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n        {/* list starts */}\n        <AlertList alerts={alerts} loading={loading} onEdit={this.handleEdit} />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Alerts\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          destroyOnClose\n          maskClosable={false}\n          width={800}\n          footer={null}\n        >\n          <AlertsFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Alert' : 'Add New Alert'}\n          visible={showForm}\n          footer={null}\n          maskClosable={false}\n          onCancel={this.closeForm}\n          width=\"60%\"\n          destroyOnClose\n        >\n          <AlertForm\n            posting={posting}\n            onCancel={this.closeForm}\n            isEditForm={isEditForm}\n            alert={alert}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Alerts, {\n  alerts: 'alerts.list',\n  alert: 'alerts.selected',\n  loading: 'alerts.loading',\n  posting: 'alerts.posting',\n  page: 'alerts.page',\n  total: 'alerts.total',\n  showForm: 'alerts.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Alerts from '../components/Alerts';\n\n/**\n * @function\n * @name AlertsLayout\n * @description Render alerts layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertsLayout = () => <Alerts />;\n\nexport default AlertsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\n/**\n * @function\n * @name AlertFeedbackLayout\n * @description Render alert feedback layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertFeedbackLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Alerts Feedback yet,but when they are available will appear here\"\n      buttonLabel=\"New Alert\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default AlertFeedbackLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\n/**\n * @function\n * @name AlertFeedsLayout\n * @description Render alert feeds layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertFeedsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Alerts Feeds yet,but when they are available will appear here\"\n      buttonLabel=\"New Alert\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default AlertFeedsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\n/**\n * @function\n * @name AlertsServiceRequestLayout\n * @description Render alert service requests layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertsServiceRequestLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Alert Sources yet,but when you create an Alert Source it will appear here\"\n      buttonLabel=\"New Alert\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default AlertsServiceRequestLayout;\n","import {\n  refreshAlertSources,\n  paginateAlertSources,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name AlertSourcesActionBar\n * @description  Render action bar for actions which are applicable\n *  to list content\n *\n * @param {Object} props props object\n * @param {page} props.page current  page\n * @param {number} props.total total number of alert sources\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertSourcesActionBar = ({ page, total }) => (\n  <div className=\"AlertSourcesActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Alert Sources\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={() =>\n            refreshAlertSources(\n              () => {\n                notifySuccess('Alert Sources refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing alert sources, please\n                   alert sources system administrator!`\n                );\n              }\n            )\n          }\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Alert Sources\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Alert Sources\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={13}\n        xl={{ span: 1, offset: 15 }}\n        xxl={{ span: 1, offset: 16 }}\n      />\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateAlertSources(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nAlertSourcesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n};\n\nexport default AlertSourcesActionBar;\n","import { postAlertSource, putAlertSource } from '@codetanzania/emis-api-states';\nimport { Button, Form, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @class\n * @name AlertSourcesActionBar\n * @description  Render form for creating a new alert source\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AlertSourceForm extends Component {\n  static propTypes = {\n    alertSource: PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n      _id: PropTypes.string,\n    }).isRequired,\n    isEditForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    onCancel: PropTypes.func.isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n  };\n\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * @function\n   * @name handleSubmit\n   * @description  call back function to handle submit action\n   *\n   * @param {Object} e event object\n   *\n   * @returns {undefined} does not return anything\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      alertSource,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedContact = Object.assign({}, alertSource, values);\n          putAlertSource(\n            updatedContact,\n            () => {\n              notifySuccess('Alert Source was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating Alert Source, please try again!'\n              );\n            }\n          );\n        } else {\n          postAlertSource(\n            values,\n            () => {\n              notifySuccess('Alert Source was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving Alert Source, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      posting,\n      onCancel,\n      isEditForm,\n      alertSource,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* Alert Source name */}\n        <Form.Item {...formItemLayout} label=\"Organization name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? alertSource.name : undefined,\n            rules: [\n              {\n                required: true,\n                message: ' Alert Source organization name is required',\n              },\n            ],\n          })(<Input placeholder=\"e.g Tanzania Meteorological Agency\" />)}\n        </Form.Item>\n        {/* end organization name */}\n\n        {/* Alert source website */}\n        <Form.Item {...formItemLayout} label=\"Website\">\n          {getFieldDecorator('website', {\n            initialValue: isEditForm ? alertSource.website : undefined,\n            rules: [\n              { required: true, message: 'Alert Source Website is required' },\n            ],\n          })(<Input placeholder=\"e.g tma.com\" />)}\n        </Form.Item>\n        {/* end Alert source website */}\n\n        {/* Alert Source url */}\n        <Form.Item {...formItemLayout} label=\"Feed\">\n          {getFieldDecorator('url', {\n            initialValue: isEditForm ? alertSource.url : undefined,\n            rules: [\n              { required: true, message: 'Alert Source Website is required' },\n            ],\n          })(\n            <Input placeholder=\"e.g http://tma.meteo.go.tz:8080/feeds/en/alerts/rss.xml\" />\n          )}\n        </Form.Item>\n        {/* end Alert Source url */}\n\n        {/* Alert Source number */}\n        <Form.Item {...formItemLayout} label=\"Phone Number\">\n          {getFieldDecorator('mobile', {\n            initialValue: isEditForm ? alertSource.mobile : undefined,\n            rules: [{ required: true, message: 'Phone number is required' }],\n          })(<Input placeholder=\"e.g 255799999999\" />)}\n        </Form.Item>\n        {/* end Alert Source number */}\n\n        {/* Alert Source email */}\n        <Form.Item {...formItemLayout} label=\"Email\">\n          {getFieldDecorator('email', {\n            initialValue: isEditForm ? alertSource.email : undefined,\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n              },\n              { required: true, message: 'Email address is required' },\n            ],\n          })(<Input placeholder=\"e.g example@mail.com\" />)}\n        </Form.Item>\n        {/* end Alert Source email */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(AlertSourceForm);\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Organization', offset: 1 },\n  { span: 3, header: 'Email' },\n  { span: 3, header: 'Phone' },\n  { span: 4, header: 'Website' },\n  { span: 5, header: 'Feed Url' },\n];\n\n/**\n * @function\n * @name AlertSourcesListHeader\n * @description display alert source list metadata\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertSourcesListHeader = () => (\n  <Row className=\"AlertSourcesListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default AlertSourcesListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n * @class\n * @name AlertSourcesListItem\n * @description Single Alert Source list item component. Render\n * single Source details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AlertSourcesListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    mobile: PropTypes.string.isRequired,\n    website: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onArchive: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description show item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description hide item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, url, email, mobile, website, onEdit, onArchive } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"AlertSourcesListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar>{name.toUpperCase().charAt(0)}</Avatar>\n            )}\n          </Col>\n          <Col span={5}>{name}</Col>\n          <Col span={3}>{email}</Col>\n          <Col span={3}>{mobile}</Col>\n          <Col span={4}>{website}</Col>\n          <Col span={5}>{url}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Alert Source\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n\n                <Icon\n                  type=\"sync\"\n                  title=\"Reload Alerts\"\n                  className=\"actionIcon\"\n                  onClick={() => {}}\n                />\n\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Source\"\n                  className=\"actionIcon\"\n                  onClick={onArchive}\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AlertSourcesListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport AlertSourcesListHeader from '../ListHeader';\nimport AlertSourcesListItem from '../ListItem';\n\n/**\n * @function\n * @name AlertSourcesList\n * @description Render source list which has search box and actions\n *\n * @param {Object} props props object\n * @param {string} props.sources array of alert source objects\n * @param {string} props.loading represents loading status\n * @param {Function} props.onEdit call back function called during editing\n *  alert source\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertSourceList = ({ alertSources, loading, onEdit }) => (\n  <Fragment>\n    <AlertSourcesListHeader />\n    <List\n      loading={loading}\n      dataSource={alertSources}\n      renderItem={alertSource => {\n        const { _id: id, name, url, email, mobile, website } = alertSource;\n        return (\n          <AlertSourcesListItem\n            key={id}\n            name={name}\n            url={url}\n            email={email}\n            mobile={mobile}\n            website={website}\n            onEdit={() => onEdit(alertSource)}\n          />\n        );\n      }}\n    />\n  </Fragment>\n);\n\nAlertSourceList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  alertSources: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      url: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n      _id: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default AlertSourceList;\n","import {\n  closeAlertSourceForm,\n  selectAlertSource,\n  Connect,\n  getAlertSources,\n  searchAlertSources,\n  openAlertSourceForm,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport AlertSourcesActionBar from './ActionBar';\nimport AlertSourceForm from './Form';\nimport AlertSourceList from './List';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name AlertSources\n * @description Render Alert Sources module which have search box\n * actions and source list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AlertSources extends Component {\n  state = {\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    alertSource: PropTypes.shape({\n      name: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n      url: PropTypes.string,\n      website: PropTypes.string,\n      _id: PropTypes.string,\n    }),\n    alertSources: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n        url: PropTypes.string,\n        website: PropTypes.string,\n        _id: PropTypes.string,\n      })\n    ).isRequired,\n    posting: PropTypes.bool.isRequired,\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    alertSource: null,\n  };\n\n  componentWillMount() {\n    getAlertSources();\n  }\n\n  /**\n   * @function\n   * @name openForm\n   * @description Open Alert Sources form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openAlertSourceForm();\n  };\n\n  /**\n   * @function\n   * @name closeForm\n   * @description close Alert Sources form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeAlertSourceForm();\n  };\n\n  /**\n   * @function\n   * @name searchAlertSources\n   * @description Search Alert Source List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  search = event => {\n    searchAlertSources(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} alertSource alert source to be edited\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = alertSource => {\n    selectAlertSource(alertSource);\n    this.setState({ isEditForm: true });\n    openAlertSourceForm();\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description handle after form close actions\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      posting,\n      page,\n      showForm,\n      total,\n      alertSources,\n      alertSource,\n      loading,\n    } = this.props;\n    const { isEditForm } = this.state;\n    return (\n      <div className=\"AlertSources\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for alert sources here ...\"\n              onChange={this.search}\n            />\n            {/* end search input component */}\n          </Col>\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Alert Source\"\n              onClick={this.openForm}\n            >\n              New Alert Source\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <AlertSourcesActionBar total={total} page={page} />\n        {/* end list header */}\n        {/* list starts */}\n        <AlertSourceList\n          alertSources={alertSources}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Alert Source' : 'Add New Alert Source'}\n          visible={showForm}\n          footer={null}\n          maskClosable={false}\n          onCancel={this.closeForm}\n          destroyOnClose\n        >\n          <AlertSourceForm\n            posting={posting}\n            alertSource={alertSource}\n            onCancel={this.closeForm}\n            isEditForm={isEditForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(AlertSources, {\n  alertSources: 'alertSources.list',\n  alertSource: 'alertSources.selected',\n  loading: 'alertSources.loading',\n  posting: 'alertSources.posting',\n  page: 'alertSources.page',\n  total: 'alertSources.total',\n  showForm: 'alertSources.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport AlertSources from '../components/AlertSources';\n\n/**\n * @function\n * @name AlertSourcesLayout\n * @description Render alert sources layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AlertSourcesLayout = () => <AlertSources />;\n\nexport default AlertSourcesLayout;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport indicatorIcon from '../assets/icons/assessment/indicators.svg';\nimport questionnairesIcon from '../assets/icons/assessment/questionnaires.svg';\nimport questionsIcon from '../assets/icons/assessment/questions.svg';\nimport responsesIcon from '../assets/icons/assessment/responses-disabled.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Observations / Response',\n    path: '/responses',\n    icon: responsesIcon,\n    description: modules.assessmentsObservations,\n    disabled: true,\n  },\n  {\n    name: 'Questionnaires',\n    path: '/questionnaires',\n    icon: questionnairesIcon,\n    description: modules.assessmentsQuestionnaires,\n  },\n  {\n    name: 'Questions',\n    path: '/questions',\n    icon: questionsIcon,\n    description: modules.assessmentsQuestions,\n  },\n  {\n    name: 'Indicators',\n    path: '/indicators',\n    icon: indicatorIcon,\n    description: modules.assessmentsIndicators,\n  },\n];\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name Assessments\n * @description Home component which shows to navigation Nav\n *\n * @param {Object} props props object\n * @param {Object} props.match props for navigation url\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Assessments = ({ match }) => (\n  <NavigationMenu routes={routes} match={match} />\n);\n\n/* props validation */\nAssessments.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default Assessments;\n","import {\n  paginateIndicators,\n  refreshIndicators,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Pagination, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name IndicatorsActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of indicators\n * @param {Function} props.onFilter function for filtering indicators\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst IndicatorsActionBar = ({ page, total, onFilter }) => (\n  <div className=\"IndicatorsActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh indicator\"\n          onClick={() =>\n            refreshIndicators(\n              () => {\n                notifySuccess('Indicator refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing indicators, please contact system administrator!'\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Indicator\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={17}\n        xl={{ span: 1, offset: 16 }}\n        xxl={{ span: 1, offset: 17 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Indicators\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateIndicators(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nIndicatorsActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default IndicatorsActionBar;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 6, header: 'Subject', offset: 1 },\n  { span: 6, header: 'Topic' },\n  { span: 8, header: 'Description' },\n];\n\n/**\n * @function\n * @name IndicatorsListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst IndicatorsListHeader = () => (\n  <Row className=\"IndicatorsListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default IndicatorsListHeader;\n","import { Icon, Avatar, Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n * @class\n * @name IndicatorListItem\n * @description single  indicator list item component.Render single indicator\n * details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass IndicatorListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    subject: PropTypes.string.isRequired,\n    topic: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { subject, topic, description, color, onEdit } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"IndicatorListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: color }}>\n                {subject.charAt(0).toUpperCase()}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={6}>{subject}</Col>\n          <Col span={6}>{topic}</Col>\n          <Col span={8}>{description}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update indicator\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive indicator\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default IndicatorListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport IndicatorsListHeader from '../ListHeader';\nimport IndicatorListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name IndicatorsList\n * @description render list of indicators\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of indictors\n * @param {Array} props.indicators array list of indictors\n * @param {Function} props.onEdit function for editing single indictor\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst IndicatorsList = ({ indicators, loading, onEdit }) => (\n  <Fragment>\n    <IndicatorsListHeader />\n    <List\n      loading={loading}\n      dataSource={indicators}\n      renderItem={({ subject, topic, description, color, _id: id }) => (\n        <IndicatorListItem\n          key={id}\n          subject={subject}\n          topic={topic}\n          description={description}\n          color={color}\n          onEdit={() => onEdit({ subject, topic, description, color, _id: id })}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nIndicatorsList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  indicators: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default IndicatorsList;\n","import {\n  clearIndicatorFilters,\n  Connect,\n  filterIndicators,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name IndicatorsFilters\n * @description Filter modal component for filtering indicators\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass IndicatorsFilters extends Component {\n  static propTypes = {\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        families: PropTypes.arrayOf(PropTypes.string).isRequired,\n        natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n      })\n    ),\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterIndicators(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearIndicatorFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      subjects,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start subject filters */}\n        <Form.Item {...formItemLayout} label=\"By Subject\">\n          {getFieldDecorator('subject', {\n            initialValue: filter ? filter.subject : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {subjects.map(subject => (\n                  <Col span={8} style={{ margin: '10px 0' }} key={subject}>\n                    <Checkbox value={subject}>{subject}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end subject filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Connect(Form.create()(IndicatorsFilters), {\n  subjects: 'indicators.schema.properties.subject.enum',\n  filter: 'indicators.filter',\n});\n","import {\n  putIndicator,\n  postIndicator,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select, Row, Col } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ColorPicker from 'rc-color-picker';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport 'rc-color-picker/assets/index.css';\nimport './styles.css';\n\nconst { TextArea } = Input;\nconst { Option } = Select;\n\n/**\n * @class\n * @name IndicatorForm\n * @description Render indicator form for creating/editing indicator\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass IndicatorForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    indicator: PropTypes.shape({\n      subject: PropTypes.string,\n      topic: PropTypes.string,\n      description: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    indicator: null,\n  };\n\n  /**\n   * @function\n   * @name onChangeColor\n   * @description Handle changing of color\n   *\n   * @param {Object} color event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  onChangeColor = ({ color }) => {\n    const {\n      form: { setFieldsValue },\n    } = this.props;\n    setFieldsValue({ color });\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle create/edit action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      indicator,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedContact = Object.assign({}, indicator, values);\n          putIndicator(\n            updatedContact,\n            () => {\n              notifySuccess('Indicator was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating Indicator, please try again!'\n              );\n            }\n          );\n        } else {\n          postIndicator(\n            values,\n            () => {\n              notifySuccess('Indicator was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving Indicator, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      indicator,\n      posting,\n      onCancel,\n      subjects,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/*  subject */}\n        <Form.Item {...formItemLayout} label=\"Subject\">\n          {getFieldDecorator('subject', {\n            initialValue: isEditForm ? indicator.subject : undefined,\n            rules: [{ required: true, message: 'Subject is required' }],\n          })(\n            <Select placeholder=\"e.g Water\">\n              {subjects.map(subject => (\n                <Option key={subject} value={subject}>\n                  {subject}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end subject */}\n\n        {/* Topic */}\n        <Form.Item {...formItemLayout} label=\"Topic\">\n          {getFieldDecorator('topic', {\n            initialValue: isEditForm ? indicator.topic : undefined,\n            rules: [{ required: true, message: 'Topic is required' }],\n          })(<Input placeholder=\"e.g Increase of prices\" />)}\n        </Form.Item>\n        {/* end topic */}\n\n        {/* indicators description */}\n        <Form.Item {...formItemLayout} label=\"Indicator Summary\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? indicator.description : undefined,\n          })(\n            <TextArea\n              placeholder=\"e.g Additional details about an indicator.\"\n              autosize={{ minRows: 2, maxRows: 6 }}\n            />\n          )}\n        </Form.Item>\n        {/* end description */}\n\n        {/* color code */}\n        <Row>\n          <Col span={19}>\n            <Form.Item {...formItemLayout} label=\"Color Code\">\n              {getFieldDecorator('color', {\n                initialValue: isEditForm ? indicator.color : undefined,\n              })(\n                <Input\n                  placeholder=\"e.g #36c\"\n                  title=\"Click button to select color\"\n                />\n              )}\n            </Form.Item>\n          </Col>\n          <Col span={4} offset={1} className=\"IndicatorFormColor\">\n            <ColorPicker animation=\"slide-up\" onChange={this.onChangeColor} />\n          </Col>\n        </Row>\n        {/* end  color code */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(IndicatorForm), {\n  subjects: 'indicators.schema.properties.subject.enum',\n});\n","import {\n  Connect,\n  getIndicators,\n  openIndicatorForm,\n  closeIndicatorForm,\n  selectIndicator,\n} from '@codetanzania/emis-api-states';\nimport { Input, Col, Row, Button, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport IndicatorsActionBar from './ActionBar';\nimport IndicatorsList from './List';\nimport IndicatorsFilters from './Filters';\nimport IndicatorForm from './Form';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name Indicators\n * @description Render indicator list which have search box and actions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Indicators extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    indicators: PropTypes.arrayOf(\n      PropTypes.shape({\n        subject: PropTypes.string,\n        topic: PropTypes.string,\n        description: PropTypes.string,\n        color: PropTypes.string,\n        _id: PropTypes.string,\n      })\n    ).isRequired,\n    indicator: PropTypes.shape({ subject: PropTypes.string }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    posting: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    indicator: null,\n  };\n\n  componentDidMount() {\n    getIndicators();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open indicator form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openIndicatorForm();\n  };\n\n  /**\n   *\n   * @function closeForm\n   * @name\n   * @description close indicator form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeIndicatorForm();\n    this.setState({ isEditForm: false });\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} indicator indicator object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = indicator => {\n    selectIndicator(indicator);\n    this.setState({ isEditForm: true });\n    openIndicatorForm();\n  };\n\n  render() {\n    const {\n      indicators,\n      loading,\n      total,\n      page,\n      indicator,\n      showForm,\n      posting,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n\n    return (\n      <div className=\"IndicatorList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for indicators here ...\"\n              onChange={({ target: { value } }) => getIndicators({ q: value })}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Indicator\"\n              onClick={this.openForm}\n            >\n              New Indicator\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list action bar */}\n        <IndicatorsActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list action bar */}\n\n        {/* list starts */}\n        <IndicatorsList\n          indicators={indicators}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Indicators\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <IndicatorsFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end of filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Indicator' : 'Add New Indicator'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <IndicatorForm\n            posting={posting}\n            isEditForm={isEditForm}\n            onCancel={this.closeForm}\n            indicator={indicator}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Indicators, {\n  indicators: 'indicators.list',\n  indicator: 'indicators.selected',\n  loading: 'indicators.loading',\n  page: 'indicators.page',\n  total: 'indicators.total',\n  posting: 'indicators.posting',\n  showForm: 'indicators.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Indicators from '../components/Indicators';\n\nconst AssessmentIndicatorsLayout = () => <Indicators />;\n\nexport default AssessmentIndicatorsLayout;\n","import {\n  refreshQuestionnaires,\n  paginateQuestionnaires,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name QuestionnairesActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of questionnaires\n * @param {Function} props.onFilter function to filters questionnaires\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst QuestionnairesActionBar = ({ page, total, onFilter }) => (\n  <div className=\"QuestionnairesActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Questionnaires\"\n          onClick={() =>\n            refreshQuestionnaires(\n              () => {\n                notifySuccess('Questionnaires refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing questionnaires, please contact system administrator!'\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Questionnaires\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"share-alt\"\n          title=\"Share selected Questionnaires\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Questionnaires\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={15}\n        xl={{ span: 1, offset: 14 }}\n        xxl={{ span: 1, offset: 15 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Questionnaires\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateQuestionnaires(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nQuestionnairesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default QuestionnairesActionBar;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name QuestionnairesListHeader\n * @description Questionnaire list header component.\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst headerLayout = [\n  { span: 8, header: 'Title', offset: 1 },\n  { span: 3, header: 'Phase' },\n  { span: 4, header: 'Assess' },\n  { span: 3, header: 'Stage' },\n];\n\nconst QuestionnairesListHeader = () => (\n  <Row className=\"QuestionnairesListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default QuestionnairesListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport randomColor from 'randomcolor';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name QuestionnairesListItem\n * @description Single questionnaire list item component. Render single\n * questionnaire details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass QuestionnairesListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    phase: PropTypes.string.isRequired,\n    assess: PropTypes.string.isRequired,\n    stage: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { title, phase, assess, stage, onEdit } = this.props;\n    const avatarBackground = randomColor();\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"QuestionnairesListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: avatarBackground }}>\n                {phase.charAt(0)}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={8}>{title}</Col>\n          <Col span={3}>{phase}</Col>\n          <Col span={4}>{assess}</Col>\n          <Col span={3}>{stage}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Questionnaire\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"share-alt\"\n                  title=\"Share Questionnaire\"\n                  className=\"actionIcon\"\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Questionnaire\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default QuestionnairesListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport QuestionnairesListHeader from '../ListHeader';\nimport QuestionnairesListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name IndicatorsList\n * @description Questionnaire list item component. Render questionnaire details\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of questionnaire\n * @param {Array} props.questionnaire array list of questionnaire\n * @param {Function} props.onEdit function for editing single questionnaire\n * @version 0.1.0\n * @since 0.1.0\n */\nconst QuestionnairesList = ({ questionnaires, loading, onEdit }) => (\n  <Fragment>\n    <QuestionnairesListHeader />\n    <List\n      loading={loading}\n      dataSource={questionnaires}\n      renderItem={questionnaire => (\n        <QuestionnairesListItem\n          key={questionnaire.title}\n          title={questionnaire.title}\n          phase={questionnaire.phase}\n          assess={questionnaire.assess}\n          stage={questionnaire.stage}\n          onEdit={() => onEdit(questionnaire)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nQuestionnairesList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  questionnaires: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default QuestionnairesList;\n","import {\n  clearQuestionnaireFilters,\n  Connect,\n  filterQuestionnaires,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name QuestionnairesFilters\n * @description Filter modal component for filtering questionnaires\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass QuestionnairesFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        assess: PropTypes.arrayOf(PropTypes.string).isRequired,\n        phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n        stages: PropTypes.arrayOf(PropTypes.string).isRequired,\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    assess: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n    stages: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterQuestionnaires(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearQuestionnaireFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      assess,\n      stages,\n      phases,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start stage filters */}\n        <Form.Item {...formItemLayout} label=\"By Stage \">\n          {getFieldDecorator('stage', {\n            initialValue: filter ? filter.stage : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {stages.map(stage => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={stage}>\n                    <Checkbox value={stage}>{stage}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end stages filters */}\n\n        {/* start emergency phase filters */}\n        <Form.Item {...formItemLayout} label=\"By Emergency Phases\">\n          {getFieldDecorator('phase', {\n            initialValue: filter ? filter.phase : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {phases.map(phase => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={phase}>\n                    <Checkbox value={phase}>{phase}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end emergency phase filters */}\n\n        {/* start assess filters */}\n        <Form.Item {...formItemLayout} label=\"By Assessment\">\n          {getFieldDecorator('assess', {\n            initialValue: filter ? filter.assess : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {assess.map(data => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={data}>\n                    <Checkbox value={data}>{data}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end assess filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button onClick={this.handleClearFilter} style={{ marginLeft: 8 }}>\n            Clear\n          </Button>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 8 }}>\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(QuestionnairesFilters), {\n  assess: 'questionnaires.schema.properties.assess.enum',\n  phases: 'questionnaires.schema.properties.phase.enum',\n  stages: 'questionnaires.schema.properties.stage.enum',\n  filter: 'questionnaires.filter',\n});\n","import {\n  Connect,\n  putQuestionnaire,\n  postQuestionnaire,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\nconst { TextArea } = Input;\n\n/**\n *\n * @class\n * @name QuestionnairesForm\n * @description Questionnaire form component for creating/editing questionnaires\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass QuestionnaireForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    questionnaire: PropTypes.shape({\n      title: PropTypes.string,\n      stage: PropTypes.string,\n      assess: PropTypes.string,\n      phase: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    assess: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n    stages: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    questionnaire: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle create/edit action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      questionnaire,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedQuestionnaire = Object.assign({}, questionnaire, values);\n          putQuestionnaire(\n            updatedQuestionnaire,\n            () => {\n              notifySuccess('Questionnaire was updated successfully');\n            },\n            () => {\n              notifyError(\n                `Something occurred while updating Questionnaire, please try\n                 again!`\n              );\n            }\n          );\n        } else {\n          postQuestionnaire(\n            values,\n            () => {\n              notifySuccess('Questionnaire was created successfully');\n            },\n            () => {\n              notifyError(\n                `Something occurred while saving Questionnaire, please try \n                again!`\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      questionnaire,\n      posting,\n      onCancel,\n      phases,\n      assess,\n      stages,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* title */}\n        <Form.Item {...formItemLayout} label=\"Title\">\n          {getFieldDecorator('title', {\n            initialValue: isEditForm ? questionnaire.title : undefined,\n            rules: [{ required: true, message: 'Title is required' }],\n          })(<Input placeholder=\"e.g Flood Situation Analysis\" />)}\n        </Form.Item>\n        {/* end title */}\n\n        {/* phase */}\n        <Form.Item {...formItemLayout} label=\"Emergency Phase\">\n          {getFieldDecorator('phase', {\n            initialValue: isEditForm ? questionnaire.phase : undefined,\n            rules: [{ required: true, message: 'Phase is required' }],\n          })(\n            <Select placeholder=\"e.g Mitigation\">\n              {phases.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end phase */}\n\n        {/* assess */}\n        <Form.Item {...formItemLayout} label=\"Assess\">\n          {getFieldDecorator('assess', {\n            initialValue: isEditForm ? questionnaire.assess : undefined,\n            rules: [{ required: true, message: 'Assess is required' }],\n          })(\n            <Select placeholder=\"e.g Need\">\n              {assess.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end assess */}\n\n        {/* stage */}\n        <Form.Item {...formItemLayout} label=\"Stage\">\n          {getFieldDecorator('stage', {\n            initialValue: isEditForm ? questionnaire.stage : undefined,\n            rules: [{ required: true, message: 'Stage is required' }],\n          })(\n            <Select placeholder=\"e.g Before\">\n              {stages.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end stage */}\n\n        {/* description */}\n        <Form.Item {...formItemLayout} label=\"Questionnaire Summary\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? questionnaire.description : undefined,\n            rules: [{ required: true, message: 'Description is required' }],\n          })(\n            <TextArea\n              placeholder=\"e.g Summarized information on Questionnaire\"\n              autosize={{ minRows: 2, maxRows: 6 }}\n            />\n          )}\n        </Form.Item>\n        {/* end description */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(QuestionnaireForm), {\n  assess: 'questionnaires.schema.properties.assess.enum',\n  phases: 'questionnaires.schema.properties.phase.enum',\n  stages: 'questionnaires.schema.properties.stage.enum',\n});\n","import {\n  Connect,\n  getQuestionnaires,\n  openQuestionnaireForm,\n  closeQuestionnaireForm,\n  searchQuestionnaires,\n  selectQuestionnaire,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport QuestionnairesActionBar from './ActionBar';\nimport QuestionnairesList from './List';\nimport QuestionnairesFilters from './Filters';\nimport QuestionnaireForm from './Form';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Questionnaires\n * @description Render questionnaire list which have search box, actions and\n *  questionnaire list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Questionnaires extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    questionnaires: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string })\n    ).isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    posting: PropTypes.bool.isRequired,\n    questionnaire: PropTypes.shape({ name: PropTypes.string }),\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    questionnaire: null,\n  };\n\n  componentWillMount() {\n    getQuestionnaires();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   *  false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open questionnaire form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openQuestionnaireForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close questionnaire form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeQuestionnaireForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} questionnaire questionnaire object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = questionnaire => {\n    selectQuestionnaire(questionnaire);\n    this.setState({ isEditForm: true });\n    openQuestionnaireForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      questionnaires,\n      loading,\n      page,\n      total,\n      posting,\n      showForm,\n      questionnaire,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"Questionnaires\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for questionnaires here ...\"\n              onChange={({ target: { value } }) =>\n                searchQuestionnaires({ q: value })\n              }\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Questionnaire\"\n              onClick={this.openForm}\n            >\n              New Questionnaire\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <QuestionnairesActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n\n        {/* list starts */}\n        <QuestionnairesList\n          questionnaires={questionnaires}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n        <Modal\n          title=\"Filter Questionnaires\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <QuestionnairesFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Questionnaire' : 'Add New Questionnaire'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <QuestionnaireForm\n            posting={posting}\n            isEditForm={isEditForm}\n            questionnaire={questionnaire}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Questionnaires, {\n  questionnaires: 'questionnaires.list',\n  questionnaire: 'questionnaires.selected',\n  loading: 'questionnaires.loading',\n  page: 'questionnaires.page',\n  total: 'questionnaires.total',\n  posting: 'questionnaires.posting',\n  showForm: 'questionnaires.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Questionnaires from '../components/Questionnaires';\n\nconst AssessmentQuestionnairesLayout = () => <Questionnaires />;\n\nexport default AssessmentQuestionnairesLayout;\n","import {\n  refreshQuestions,\n  paginateQuestions,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name QuestionsActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of question\n * @param {Function} props.onFilter function to filters question\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst QuestionsActionBar = ({ page, total, onFilter }) => (\n  <div className=\"QuestionsActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Questions\"\n          onClick={() =>\n            refreshQuestions(\n              () => {\n                notifySuccess('Questions refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing questions,\n                   please contact system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Questions\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"share-alt\"\n          title=\"Share selected Questions\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Questions\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={15}\n        xl={{ span: 1, offset: 14 }}\n        xxl={{ span: 1, offset: 15 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Questions\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateQuestions(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nQuestionsActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default QuestionsActionBar;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\n/**\n *\n * @function\n * @name QuestionsHeader\n * @description Question list header component.\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst headerLayout = [\n  { span: 8, header: 'Label', offset: 1 },\n  { span: 3, header: 'Phase' },\n  { span: 4, header: 'Assess' },\n  { span: 3, header: 'Stage' },\n];\n\nconst QuestionsListHeader = () => (\n  <Row className=\"QuestionsListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default QuestionsListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name QuestionsListItem\n * @description Single question list item component.Render single question\n * details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass QuestionsListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    label: PropTypes.string.isRequired,\n    phase: PropTypes.string.isRequired,\n    assess: PropTypes.string.isRequired,\n    stage: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { label, phase, assess, stage, onEdit, color } = this.props;\n    const { isHovered } = this.state;\n\n    return (\n      <div\n        className=\"QuestionsListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: color }}>\n                {phase.charAt(0).toUpperCase()}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={8}>{label}</Col>\n          <Col span={3}>{phase}</Col>\n          <Col span={4}>{assess}</Col>\n          <Col span={3}>{stage}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Question\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"share-alt\"\n                  title=\"Share Question\"\n                  className=\"actionIcon\"\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Question\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default QuestionsListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport QuestionsListHeader from '../ListHeader';\nimport QuestionsListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name QuestionsList\n * @description question list item component. Render question details\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of questions\n * @param {Array} props.questions array list of questions\n * @param {Function} props.onEdit function for editing single question\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst QuestionsList = ({ questions, loading, onEdit }) => (\n  <Fragment>\n    <QuestionsListHeader />\n    <List\n      loading={loading}\n      dataSource={questions}\n      renderItem={question => (\n        <QuestionsListItem\n          key={question.name}\n          label={question.label}\n          phase={question.phase}\n          assess={question.assess}\n          stage={question.stage}\n          color={question.indicator.color}\n          onEdit={() => onEdit(question)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nQuestionsList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  questions: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default QuestionsList;\n","import {\n  clearQuestionFilters,\n  Connect,\n  filterQuestions,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name QuestionsFilters\n * @description Filter modal component for filtering questions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass QuestionsFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        assess: PropTypes.arrayOf(PropTypes.string).isRequired,\n        phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n        stages: PropTypes.arrayOf(PropTypes.string).isRequired,\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    assess: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n    stages: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterQuestions(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearQuestionFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      assess,\n      stages,\n      phases,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start stage filters */}\n        <Form.Item {...formItemLayout} label=\"By Stage \">\n          {getFieldDecorator('stage', {\n            initialValue: filter ? filter.stage : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {stages.map(stage => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={stage}>\n                    <Checkbox value={stage}>{stage}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end stages filters */}\n\n        {/* start emergency phase filters */}\n        <Form.Item {...formItemLayout} label=\"By Emergency Phases\">\n          {getFieldDecorator('phase', {\n            initialValue: filter ? filter.phase : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {phases.map(phase => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={phase}>\n                    <Checkbox value={phase}>{phase}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end emergency phase filters */}\n\n        {/* start assess filters */}\n        <Form.Item {...formItemLayout} label=\"By Assessed\">\n          {getFieldDecorator('assess', {\n            initialValue: filter ? filter.assess : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {assess.map(data => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={data}>\n                    <Checkbox value={data}>{data}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end assess filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(QuestionsFilters), {\n  assess: 'questions.schema.properties.assess.enum',\n  phases: 'questions.schema.properties.phase.enum',\n  stages: 'questions.schema.properties.stage.enum',\n  filter: 'questions.filter',\n});\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  Connect,\n  postQuestion,\n  putQuestion,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getIndicators } = httpActions;\nconst { Option } = Select;\n\n/**\n *\n * @class\n * @name QuestionsForm\n * @description Question form component for creating/editing questions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\n\nclass QuestionForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    question: PropTypes.shape({\n      label: PropTypes.string,\n      stage: PropTypes.string,\n      type: PropTypes.string,\n      assess: PropTypes.string,\n      phase: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    assess: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n    stages: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    question: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle create/edit action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      question,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedQuestion = Object.assign({}, question, values);\n          putQuestion(\n            updatedQuestion,\n            () => {\n              notifySuccess('Question was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating question, please try again!'\n              );\n            }\n          );\n        } else {\n          postQuestion(\n            values,\n            () => {\n              notifySuccess('Question was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving question, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      question,\n      posting,\n      onCancel,\n      assess,\n      phases,\n      stages,\n      types,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* question name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? question.name : undefined,\n            rules: [{ required: true, message: 'Question name is required' }],\n          })(<Input placeholder=\"e.g Water\" />)}\n        </Form.Item>\n        {/* end name */}\n\n        {/* label */}\n        <Form.Item {...formItemLayout} label=\"Label\">\n          {getFieldDecorator('label', {\n            initialValue: isEditForm ? question.label : undefined,\n            rules: [{ required: true, message: 'Label is required' }],\n          })(<Input placeholder=\"e.g Do you have water?\" />)}\n        </Form.Item>\n        {/* end label */}\n\n        {/* indicators */}\n        <Form.Item {...formItemLayout} label=\"Indicator\">\n          {getFieldDecorator('indicator', {\n            initialValue: isEditForm ? question.indicator._id : undefined, // eslint-disable-line\n            rules: [{ required: true, message: 'Indicator is required' }],\n          })(\n            <SearchableSelectInput\n              placeholder=\"e.g Water and Food\"\n              onSearch={getIndicators}\n              optionLabel=\"subject\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? question.indicator : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end indicator */}\n\n        {/* phase */}\n        <Form.Item {...formItemLayout} label=\"Phase\">\n          {getFieldDecorator('phase', {\n            initialValue: isEditForm ? question.phase : undefined,\n            rules: [{ required: true, message: 'Phase is required' }],\n          })(\n            <Select placeholder=\"e.g Mitigation\">\n              {phases.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end phase */}\n\n        {/* assess */}\n        <Form.Item {...formItemLayout} label=\"Assess\">\n          {getFieldDecorator('assess', {\n            initialValue: isEditForm ? question.assess : undefined,\n            rules: [{ required: true, message: 'Assess is required' }],\n          })(\n            <Select placeholder=\"e.g Need\">\n              {assess.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end assess */}\n\n        {/* Type */}\n        <Form.Item {...formItemLayout} label=\"Type\">\n          {getFieldDecorator('type', {\n            initialValue: isEditForm ? question.type : undefined,\n            rules: [{ required: true, message: 'Type is required' }],\n          })(\n            <Select placeholder=\"e.g text\">\n              {types.map(type => (\n                <Option key={type} value={type}>\n                  {type}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end type */}\n\n        {/* stage */}\n        <Form.Item {...formItemLayout} label=\"Stage\">\n          {getFieldDecorator('stage', {\n            initialValue: isEditForm ? question.stage : undefined,\n            rules: [{ required: true, message: 'Stage is required' }],\n          })(\n            <Select placeholder=\"e.g Before\">\n              {stages.map(data => (\n                <Option key={data} value={data}>\n                  {data}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end stage */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(QuestionForm), {\n  assess: 'questions.schema.properties.assess.enum',\n  phases: 'questions.schema.properties.phase.enum',\n  stages: 'questions.schema.properties.stage.enum',\n  types: 'questions.schema.properties.type.enum',\n});\n","import {\n  Connect,\n  getQuestions,\n  searchQuestions,\n  openQuestionForm,\n  closeQuestionForm,\n  selectQuestion,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport QuestionsActionBar from './ActionBar';\nimport QuestionsList from './List';\nimport QuestionFilters from './Filters';\nimport QuestionForm from './Form';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Questions\n * @description Render question list which have search box, actions and\n * question list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Questions extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    questions: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    posting: PropTypes.bool.isRequired,\n    question: PropTypes.shape({ name: PropTypes.string }),\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    question: null,\n  };\n\n  componentDidMount() {\n    getQuestions();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open question form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openQuestionForm();\n  };\n\n  /**\n   *\n   * @function closeForm\n   * @name\n   * @description close question form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeQuestionForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} question question object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = question => {\n    selectQuestion(question);\n    this.setState({ isEditForm: true });\n    openQuestionForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      questions,\n      loading,\n      page,\n      total,\n      question,\n      posting,\n      showForm,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n\n    return (\n      <div className=\"Questions\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for questions here ...\"\n              onChange={({ target: { value } }) =>\n                searchQuestions({ q: value })\n              }\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Question\"\n              onClick={this.openForm}\n            >\n              New Question\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <QuestionsActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n\n        {/* list starts */}\n        <QuestionsList\n          questions={questions}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Questions\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <QuestionFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end of filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Question' : 'Add New Question'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <QuestionForm\n            posting={posting}\n            isEditForm={isEditForm}\n            question={question}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Questions, {\n  questions: 'questions.list',\n  question: 'questions.selected',\n  loading: 'questions.loading',\n  page: 'questions.page',\n  total: 'questions.total',\n  posting: 'questions.posting',\n  showForm: 'questions.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport QuestionsList from '../components/Questions';\n\nconst AssessmentQuestionsLayout = () => <QuestionsList />;\n\nexport default AssessmentQuestionsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst AssessmentResponsesLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Assessments Responses yet,but when they are available will appear here\"\n      buttonLabel=\"New Assessment\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default AssessmentResponsesLayout;\n","import { Icon } from 'antd';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * @function\n * @name UIState\n * @description Empty/ Error state component\n *\n * @param {Object} props props object\n * @param {string} props.icon path to state icon\n * @param {string} props.description state description\n * @param {string} props.buttonLabel state button label\n * @param {Function} props.onClick state button onClick callback\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst UIState = ({ icon, description }) => (\n  <div className=\"UIState\">\n    <Icon type={icon} className=\"Icon\" />\n    <p className=\"description\">{description}</p>\n    <Link to=\"/\" title=\"Click here to return to home page\">\n      Return to Home Page\n    </Link>\n  </div>\n);\n\n/* Props validation */\nUIState.propTypes = {\n  icon: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\nexport default UIState;\n","import React from 'react';\nimport UIState from './index';\n\n/**\n * @function\n * @name PageNotFound\n * @description Page not found component for error 404\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst PageNotFound = () => (\n  <div style={{ marginTop: '20%' }}>\n    <UIState\n      icon=\"info-circle\"\n      description=\"Sorry Page not Found, Please return to Home Page\"\n    />\n  </div>\n);\n\nexport default PageNotFound;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport districtIcon from '../assets/icons/district.svg';\nimport EvacuationIcon from '../assets/icons/evacuationCenter.svg';\nimport facilitiesIcon from '../assets/icons/geographicalfeatures/facilities.svg';\nimport infrastructureIcon from '../assets/icons/geographicalfeatures/infrastructures.svg';\nimport warehousesIcon from '../assets/icons/geographicalfeatures/warehouse.svg';\nimport regionIcon from '../assets/icons/region.svg';\nimport subwardIcon from '../assets/icons/subward.svg';\nimport wardIcon from '../assets/icons/ward.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Regions',\n    path: '/regions',\n    icon: regionIcon,\n    description: modules.geographicalFeaturesRegions,\n  },\n  {\n    name: 'Districts',\n    path: '/districts',\n    icon: districtIcon,\n    description: modules.geographicalFeaturesDistricts,\n  },\n  {\n    name: 'Wards',\n    path: '/wards',\n    icon: wardIcon,\n    description: modules.geographicalFeaturesWards,\n  },\n  {\n    name: 'Subwards',\n    path: '/subwards',\n    icon: subwardIcon,\n    description: modules.geographicalFeaturesSubwards,\n  },\n  {\n    name: 'Evacuation Centers',\n    path: '/evacuationcenters',\n    icon: EvacuationIcon,\n    description: modules.geographicalFeaturesEvacuationCenters,\n  },\n  {\n    name: 'Facilities',\n    path: '/facilities',\n    icon: facilitiesIcon,\n    description: modules.geographicalFeaturesFacilities,\n  },\n  {\n    name: 'Warehouses',\n    path: '/warehouses',\n    icon: warehousesIcon,\n    description: modules.geographicalFeaturesWarehouses,\n  },\n  {\n    name: 'Critical Infrastructure',\n    path: '/infrastructure',\n    icon: infrastructureIcon,\n    description: modules.geographicalFeaturesCriticalInfrastructure,\n  },\n];\n\n/**\n *\n * @function\n * @name GeographicalFeatures\n * @description Home component which shows to navigation Nav\n *\n * @param {Object} props props object\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst GeographicalFeatures = ({ match }) => (\n  <NavigationMenu routes={routes} match={match} />\n);\n\n/* props validation */\nGeographicalFeatures.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default GeographicalFeatures;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Level', offset: 4 },\n];\n\nconst AdminstrativeBoundaryListHeader = () => (\n  <Row className=\"AdminstrativeBoundaryListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default AdminstrativeBoundaryListHeader;\n","import { Avatar, Col, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name AdminstrativeBoundaryListItem\n * @description Single adminstrative boundary list item component.\n * Render single adminstrative boundary details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdminstrativeBoundaryListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    level: PropTypes.string.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, level } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"AdminstrativeBoundaryListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            <Avatar />\n          </Col>\n          <Col span={9}>{name}</Col>\n          <Col span={10}>{level}</Col>\n          <Col span={3}>{isHovered && <Fragment />}</Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AdminstrativeBoundaryListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport AdminstrativeBoundaryListHeader from '../ListHeader';\nimport AdminstrativeBoundaryListItem from '../ListItem';\n\n/**\n *\n * @function\n * @name AdminstrativeBoundaryList\n * @description Render AdminstrativeBoundary list which have search box and\n * actions\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of adminstrativeBoundaries\n * @param {Array} props.adminstrativeBoundaries array list of\n *  adminstrativeBoundaries\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AdminstrativeBoundaryList = ({ adminstrativeBoundaries, loading }) => (\n  <Fragment>\n    <AdminstrativeBoundaryListHeader />\n    <List\n      loading={loading}\n      dataSource={adminstrativeBoundaries}\n      renderItem={adminstrativeBoundary => (\n        <AdminstrativeBoundaryListItem\n          key={adminstrativeBoundary.name}\n          name={adminstrativeBoundary.name}\n          level={adminstrativeBoundary.level}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nAdminstrativeBoundaryList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  adminstrativeBoundaries: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default AdminstrativeBoundaryList;\n","import { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nconst categories = [\n  'Aerialway',\n  'Aeroway',\n  'Amenity',\n  'Barrier',\n  'Boundary',\n  'Building',\n  'Craft',\n  'Emergency',\n  'Geological',\n  'Highway',\n  'Historic',\n  'Landuse',\n  'Leisure',\n  'Man made',\n  'Military',\n  'Natural',\n  'Office',\n  'Other',\n  'Place',\n  'Power',\n  'Public',\n  'Railway',\n  'Route',\n  'Shop',\n  'Sport',\n  'Telecom',\n  'Tourism',\n  'Transport',\n  'Waterway',\n];\nconst types = [\n  'Access Control',\n  'Accommodation',\n  'Administrative',\n  'Arts',\n  'Assembly Point',\n  'Civic',\n  'Commercial',\n  'Culture',\n  'Education',\n  'Entertainment',\n  'Facilities',\n  'Financial',\n  'Firefighters',\n  'Healthcare',\n  'Landform',\n  'Life cycle',\n  'Lifeguards',\n  'Linear Barriers',\n  'Link Roads',\n  'Medical Rescue',\n  'Other',\n  'Paths',\n  'Religious',\n  'Roads',\n  'Stations',\n  'Stops',\n  'Sustenance',\n  'Tracks',\n  'Transportation',\n  'Vegetation',\n  'Warehouse',\n  'Water',\n  'Watercourses',\n  'Waterways',\n];\nconst levels = [\n  'zone',\n  'region',\n  'district',\n  'division',\n  'ward',\n  'village',\n  'shina',\n  'other',\n];\n\n/**\n *\n * @class\n * @name RolesFilters\n * @description Filter modal component for filtering administrative boundaries\n *\n * @param {Object} e event object\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdministrativeBoundariesFilters extends Component {\n  static propTypes = {\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start administrative boundaries categories filters */}\n        <Form.Item {...formItemLayout} label=\"By Categories\">\n          {getFieldDecorator('types')(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {categories.map(category => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={category}>\n                    <Checkbox value={category}>{category}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end administrative Boundaries categories filters */}\n\n        {/* start administrative Boundaries levels filters */}\n        <Form.Item {...formItemLayout} label=\"By Levels\">\n          {getFieldDecorator('types')(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {levels.map(level => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={level}>\n                    <Checkbox value={level}>{level}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end administrative boundaries levels filters */}\n\n        {/* start administrative boundaries types filters */}\n        <Form.Item {...formItemLayout} label=\"By Types\">\n          {getFieldDecorator('types')(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end administrative boundaries types filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n          <Button style={{ marginLeft: 8 }} onClick={() => {}}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} onClick={onCancel}>\n            Cancel\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(AdministrativeBoundariesFilters);\n","import { getFeatures } from '@codetanzania/emis-api-states';\nimport { Button, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name AdminstrativeBoundariesActionBar\n * @description Render action bar for actions which are applicable to\n * list content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of AdminstrativeBoundaries\n * @param {Function} props.onFilter filters AdminstrativeBoundaries\n *  when function is called\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst AdminstrativeBoundariesActionBar = ({ page, total, onFilter }) => (\n  <div className=\"AdminstrativeBoundariesActionBar\">\n    <Row>\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh adminstrative boundaries\"\n          onClick={() => getFeatures()}\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={17}\n        xl={{ span: 1, offset: 18 }}\n        xxl={{ span: 1, offset: 19 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter adminstrative boundaries\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => getFeatures({ page: nextPage })}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nAdminstrativeBoundariesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default AdminstrativeBoundariesActionBar;\n","import { Connect, getFeatures } from '@codetanzania/emis-api-states';\nimport { Input, Modal, Col, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport AdminstrativeBoundaryList from './List';\nimport AdminstrativeBoundaryFilters from './Filters';\nimport AdminstrativeBoundariesActionBar from './ActionBar';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * Render Adminstrative Boundary module which has search box, actions and list of Adminstrative Boundaries\n *\n * @class\n * @name AdminstrativeBoundary\n *\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdminstrativeBoundaries extends Component {\n  state = {\n    showFilters: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    adminstrativeBoundaries: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        level: PropTypes.string,\n      })\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n  };\n\n  componentWillMount() {\n    getFeatures();\n  }\n\n  /**\n   * open filters modal by setting it's visible property to false via state\n   *\n   * @function\n   * @name openFiltersModal\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * Close filters modal by setting it's visible property to false via state\n   *\n   * @function\n   * @name closeFiltersModal\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * Search AdminstrativeBoundaries List based on supplied filter word\n   *\n   * @function\n   * @name searchAdminstrativeBoundaries\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchAdminstrativeBoundaries = event => {\n    getFeatures({ q: event.target.value });\n  };\n\n  render() {\n    const { adminstrativeBoundaries, loading, total, page } = this.props;\n    const { showFilters } = this.state;\n    return (\n      <div className=\"AdminstrativeBoundaries\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for adminstrative boundaries here here ...\"\n              onChange={this.searchAdminstrativeBoundaries}\n            />\n            {/* end search input component */}\n          </Col>\n          {/* primary actions */}\n          <Col span={3} offset={9} />\n          {/* end primary actions */}\n        </Row>\n        {/* list action bar */}\n        <AdminstrativeBoundariesActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list action bar */}\n        {/* list starts */}\n        <AdminstrativeBoundaryList\n          adminstrativeBoundaries={adminstrativeBoundaries}\n          loading={loading}\n        />\n        {/* end list */}\n        <Modal\n          title=\"Filter Adminstrative Boundaries\"\n          width={800}\n          maskClosable={false}\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n        >\n          <AdminstrativeBoundaryFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Connect(AdminstrativeBoundaries, {\n  adminstrativeBoundaries: 'features.list',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport AdminstrativeBoundaries from '../components/AdministrativeBoundaries';\n\nconst AdministrativeBoundariesLayout = () => <AdminstrativeBoundaries />;\n\nexport default AdministrativeBoundariesLayout;\n","import { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport {\n  refreshFeatures,\n  paginateFeatures,\n} from '@codetanzania/emis-api-states';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name DistrictsActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of district\n * @param {Function} props.onFilter filters district when function is called\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst DistrictsActionBar = ({ page, total, onFilter }) => (\n  <div className=\"DistrictsActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Districts\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess('Districts refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing districts, please contact\n                   system administrator!`\n                );\n              }\n            )\n          }\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Districts\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Districts\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={16}\n        xl={{ span: 1, offset: 15 }}\n        xxl={{ span: 1, offset: 16 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Districts\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          className=\"pagination\"\n          onChange={nextPage => paginateFeatures(nextPage)}\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nDistrictsActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default DistrictsActionBar;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name DistrictsListItem\n * @description Single district list item component.\n *  Render single district details\n *\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass DistrictsListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    nature: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    family: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, nature, family, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    const avatarBackground = randomColor();\n\n    return (\n      <div\n        className=\"DistrictsListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: avatarBackground }}>\n                {name.charAt(0).toUpperCase()}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={5}>{name}</Col>\n          <Col span={6}>{nature}</Col>\n          <Col span={4}>{type}</Col>\n          <Col span={4}>{family}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update District\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive District\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default DistrictsListItem;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Nature' },\n  { span: 4, header: 'Type' },\n  { span: 4, header: 'Family' },\n];\n\n/**\n * @function\n * @name DistrictsListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst DistrictsListHeader = () => (\n  <Row className=\"DistrictsListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default DistrictsListHeader;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport DistrictsListItem from '../ListItem';\nimport DistrictsListHeader from '../ListHeader';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name DistrictsList\n * @description Render Districts list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of district\n * @param {Array} props.districts array list of district\n * @param {Function} props.onEdit function for editing district\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst DistrictsList = ({ districts, loading, onEdit }) => (\n  <Fragment>\n    <DistrictsListHeader />\n    <List\n      loading={loading}\n      dataSource={districts}\n      renderItem={district => (\n        <DistrictsListItem\n          key={district.name}\n          name={district.name}\n          nature={district.nature}\n          type={district.type}\n          family={district.family}\n          onEdit={() => onEdit(district)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nDistrictsList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  districts: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default DistrictsList;\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * Filter modal component for filtering districts\n *\n * @class\n * @name DistrictsFilters\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass DistrictsFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        natures: PropTypes.arrayOf(PropTypes.string),\n        families: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      natures,\n      families,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Region nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {natures.map(nature => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={nature}>\n                    <Checkbox value={nature}>{nature}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end nature filters */}\n\n        {/* start type filters */}\n        <Form.Item {...formItemLayout} label=\"By Region type\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end type filters */}\n\n        {/* start family filters */}\n        <Form.Item {...formItemLayout} label=\"By Family\">\n          {getFieldDecorator('family', {\n            initialValue: filter ? filter.family : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {families.map(family => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={family}>\n                    <Checkbox value={family}>{family}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end family filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Connect(Form.create()(DistrictsFilters), {\n  natures: 'features.schema.properties.nature.enum',\n  families: 'features.schema.properties.family.enum',\n  types: 'features.schema.properties.type.enum',\n  filter: 'features.filter',\n});\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\n/**\n *\n * @class\n * @name DistrictForm\n * @description Render District form for creating and updating District details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass DistrictForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    district: PropTypes.shape({\n      name: PropTypes.string,\n      nature: PropTypes.string,\n      family: PropTypes.string,\n      type: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  /**\n   * Handle submit form action\n   *\n   * @function\n   * @name handleSubmit\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      district,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedRegion = Object.assign({}, district, values);\n          putFeature(\n            updatedRegion,\n            () => {\n              notifySuccess('District was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating district, please try again!'\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('District was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving district, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      district,\n      posting,\n      onCancel,\n      families,\n      natures,\n      types,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* district name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? district.name : undefined,\n            rules: [{ required: true, message: 'District name is required' }],\n          })(<Input placeholder=\"e.g Ilala\" />)}\n        </Form.Item>\n        {/* end district name */}\n\n        {/* nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? district.nature : undefined,\n            rules: [{ required: true, message: 'Nature is required' }],\n          })(\n            <Select placeholder=\"e.g Building\">\n              {natures.map(nature => (\n                <Option key={nature} value={nature}>\n                  {nature}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end nature */}\n\n        {/* district type */}\n        <Form.Item {...formItemLayout} label=\"Type\">\n          {getFieldDecorator('type', {\n            initialValue: isEditForm ? district.type : undefined,\n            rules: [{ required: true, message: 'Type is required' }],\n          })(\n            <Select placeholder=\"e.g District\">\n              {types.map(type => (\n                <Option key={type} value={type}>\n                  {type}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end district type */}\n\n        {/* district family */}\n        <Form.Item {...formItemLayout} label=\"Family\">\n          {getFieldDecorator('family', {\n            initialValue: isEditForm ? district.family : undefined,\n            rules: [{ required: true, message: 'Family is required' }],\n          })(\n            <Select placeholder=\"e.g Hospital\">\n              {families.map(family => (\n                <Option key={family} value={family}>\n                  {family}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end family */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(DistrictForm), {\n  natures: 'features.schema.properties.nature.enum',\n  families: 'features.schema.properties.family.enum',\n  types: 'features.schema.properties.type.enum',\n});\n","import {\n  Connect,\n  filterFeatures,\n  searchFeatures,\n  closeFeatureForm,\n  openFeatureForm,\n  selectFeature,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport DistrictsActionBar from './ActionBar';\nimport DistrictsList from './List';\nimport DistrictsFilters from './Filters';\nimport DistrictForm from './Form';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Districts\n * @description Render districts list which have search box,\n *  actions and districts list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Districts extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    districts: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    district: PropTypes.shape({ name: PropTypes.string }),\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    district: null,\n  };\n\n  componentDidMount() {\n    filterFeatures({ type: 'District', family: 'Administrative' });\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   *  false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name searchDistrict\n   * @description Search Districts List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchDistricts = event => {\n    searchFeatures(event.target.value);\n  };\n\n  /**\n   *\n   * @function\n   * @name openContactForm\n   * @description Open district form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close district form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} district object passed to the function\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = district => {\n    selectFeature(district);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      page,\n      total,\n      districts,\n      loading,\n      posting,\n      showForm,\n      district,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n\n    return (\n      <div className=\"Districts\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for districts here ...\"\n              onChange={this.searchDistricts}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New District\"\n              onClick={this.openForm}\n            >\n              New District\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <DistrictsActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n\n        {/* list starts */}\n        <DistrictsList\n          districts={districts}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Districts\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          width={630}\n          maskClosable={false}\n        >\n          <DistrictsFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit District' : 'Add New District'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <DistrictForm\n            posting={posting}\n            isEditForm={isEditForm}\n            district={district}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Districts, {\n  districts: 'features.list',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n  district: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Districts from '../components/Districts';\n\nconst DistrictsLayout = () => <Districts />;\n\nexport default DistrictsLayout;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Type', offset: 4 },\n];\n\n/**\n * @function\n * @name EvacuationCenterListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst EvacuationCenterListHeader = () => (\n  <Row className=\"EvacuationCenterListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default EvacuationCenterListHeader;\n","import { Icon, Avatar, Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name EvacuationCenterListItem\n * @description Single Evacuation Center list item component.\n * Render single Evacuation Center details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass EvacuationCenterListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"EvacuationCenterListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar>{name.slice(0, 1)}</Avatar>\n            )}\n          </Col>\n          <Col span={9}>{name}</Col>\n          <Col span={10}>{type}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Evacuation Center\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Evacuation Center\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default EvacuationCenterListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport EvacuationCenterListHeader from '../ListHeader';\nimport EvacuationCenterListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name EvacuationCenterList\n * @description Render Evacuation Center list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of Evacuation Center\n * @param {Array} props.districts array list of Evacuation Center\n * @param {Function} props.onEdit function for editing Evacuation Center\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst EvacuationCenterList = ({ evacuationCenters, loading, onEdit }) => (\n  <Fragment>\n    <EvacuationCenterListHeader />\n    <List\n      loading={loading}\n      dataSource={evacuationCenters}\n      renderItem={evacuationCenter => (\n        <EvacuationCenterListItem\n          key={evacuationCenter.name}\n          name={evacuationCenter.name}\n          type={evacuationCenter.type}\n          onEdit={() => onEdit(evacuationCenter)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nEvacuationCenterList.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  evacuationCenters: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default EvacuationCenterList;\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\nclass EvacuationCenterForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    evacuationCenter: PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      evacuationCenter,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedEvacuationCenter = Object.assign({}, evacuationCenter, {\n            ...values,\n            continent: 'Africa',\n            country: 'Tanzania',\n            family: 'EvacuationCenter',\n          });\n          putFeature(\n            updatedEvacuationCenter,\n            () => {\n              notifySuccess('Evacuation Center was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating Evacuation Center, please try again!'\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('Evacuation Center was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving Evacuation Center, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  renderSelectOptions = options =>\n    options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ));\n\n  render() {\n    const {\n      isEditForm,\n      evacuationCenter,\n      posting,\n      onCancel,\n      nature,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* Evacuation Center name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? evacuationCenter.name : undefined,\n            rules: [\n              { required: true, message: 'Evacuation Center name is required' },\n            ],\n          })(<Input placeholder=\"e.g Lindi\" />)}\n        </Form.Item>\n        {/* end Evacuation Center name */}\n\n        {/* Evacuation Center nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? evacuationCenter.nature : undefined,\n            rules: [\n              {\n                required: true,\n                message: 'Evacuation Center nature is required',\n              },\n            ],\n          })(<Select showSearch>{this.renderSelectOptions(nature)}</Select>)}\n        </Form.Item>\n        {/* end evacuationCenter nature */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(\n  Connect(EvacuationCenterForm, {\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name EvacuationCentersFilters\n * @description Filter modal component for filtering evacuation centers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass EvacuationCentersFilters extends Component {\n  static propTypes = {\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        nature: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      filter,\n      nature,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start evacuation centers nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {nature.map(natureItem => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={natureItem}>\n                    <Checkbox value={natureItem}>{natureItem}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end evacuation centers nature filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(EvacuationCentersFilters, {\n    filter: 'features.filter',\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  refreshFeatures,\n  paginateFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Pagination, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name EvacuationCentersActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of Evacuation Centers\n * @param {Function} props.onFilter filters Evacuation Centers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst EvacuationCentersActionBar = ({ page, total, onFilter }) => (\n  <div className=\"EvacuationCentersActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh evacuation center\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess('Evacuation Centers refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing Evacuation Centers,\n                   please Evacuation Centers system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected evacuation center\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={17}\n        xl={{ span: 1, offset: 16 }}\n        xxl={{ span: 1, offset: 17 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter evacuation center\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateFeatures(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nEvacuationCentersActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default EvacuationCentersActionBar;\n","import {\n  Connect,\n  getFeatures,\n  openFeatureForm,\n  selectFeature,\n  closeFeatureForm,\n  searchFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Input, Modal, Col, Row, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport EvacuationCenterList from './List';\nimport EvacuationCenterForm from './Form';\nimport EvacuationCenterFilters from './Filters';\nimport EvacuationCentersActionBar from './ActionBar';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name EvacuationCenters\n * @description Render features module which has search box,\n * actions and list of features\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass EvacuationCenters extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    evacuationCenters: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        type: PropTypes.string,\n      })\n    ).isRequired,\n    evacuationCenter: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    evacuationCenter: null,\n  };\n\n  componentWillMount() {\n    getFeatures();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   * false via state\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open Evacuation Center form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close Evacuation Center form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name searchFeatures\n   * @description Search Evacuation Centers List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  search = event => {\n    searchFeatures({ q: event.target.value });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} evacuationCenter evacuation center object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = evacuationCenter => {\n    selectFeature(evacuationCenter);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      evacuationCenters,\n      loading,\n      total,\n      page,\n      posting,\n      showForm,\n      evacuationCenter,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"EvacuationCenterList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for Evacuation Centers here ...\"\n              onChange={this.search}\n            />\n            {/* end search input component */}\n          </Col>\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Evacuation Center\"\n              onClick={this.openForm}\n            >\n              New Evacuation Center\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n        {/* list action bar */}\n        <EvacuationCentersActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list action bar */}\n        {/* list starts */}\n        <EvacuationCenterList\n          evacuationCenters={evacuationCenters}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Evacuation Centers\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          destroyOnClose\n          maskClosable={false}\n          footer={null}\n          width={800}\n        >\n          <EvacuationCenterFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={\n            isEditForm ? 'Edit Evacuation Center' : 'Add New Evacuation Center'\n          }\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <EvacuationCenterForm\n            posting={posting}\n            isEditForm={isEditForm}\n            evacuationCenter={evacuationCenter}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(EvacuationCenters, {\n  evacuationCenters: 'features.list',\n  evacuationCenter: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport EvacuationCenters from '../components/EvacuationCenters';\n\nconst EvacuationCentersLayout = () => <EvacuationCenters />;\n\nexport default EvacuationCentersLayout;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Type', offset: 4 },\n];\n\n/**\n * @function\n * @name FacilityListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst FacilityListHeader = () => (\n  <Row className=\"FacilityListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default FacilityListHeader;\n","import { Icon, Avatar, Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name FacilityListItem\n * @description  Single Facility list item component.\n * Render single Facility details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FacilityListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"FacilityListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar>{name.slice(0, 1)}</Avatar>\n            )}\n          </Col>\n          <Col span={9}>{name}</Col>\n          <Col span={10}>{type}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Facility\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Facility\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default FacilityListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport FacilityListHeader from '../ListHeader';\nimport FacilityListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name FacilityList\n * @description Render facilities list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of facilities\n * @param {Array} props.districts array list of facilities\n * @param {Function} props.onEdit function for editing facilities\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst FacilityList = ({ facilities, loading, onEdit }) => (\n  <Fragment>\n    <FacilityListHeader />\n    <List\n      loading={loading}\n      dataSource={facilities}\n      renderItem={facility => (\n        <FacilityListItem\n          key={facility.name}\n          name={facility.name}\n          type={facility.type}\n          onEdit={() => onEdit(facility)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nFacilityList.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  facilities: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default FacilityList;\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\nclass FacilityForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    facility: PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * Handle submit form action\n   *\n   * @function\n   * @name handleSubmit\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      facility,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedFacility = Object.assign({}, facility, {\n            ...values,\n            continent: 'Africa',\n            country: 'Tanzania',\n            family: 'FacilityForm',\n          });\n          putFeature(\n            updatedFacility,\n            () => {\n              notifySuccess('Facility was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating Facility, please try again!'\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('Facility was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving Facility, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  renderSelectOptions = options =>\n    options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ));\n\n  render() {\n    const {\n      isEditForm,\n      facility,\n      posting,\n      onCancel,\n      nature,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* Facility name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? facility.name : undefined,\n            rules: [\n              {\n                required: true,\n                message: 'Facility name is required',\n              },\n            ],\n          })(<Input placeholder=\"e.g Lindi\" />)}\n        </Form.Item>\n        {/* end Facility name */}\n\n        {/* Facility nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? facility.nature : undefined,\n            rules: [\n              {\n                required: true,\n                message: 'Facility nature is required',\n              },\n            ],\n          })(<Select showSearch>{this.renderSelectOptions(nature)}</Select>)}\n        </Form.Item>\n        {/* end facility nature */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(\n  Connect(FacilityForm, {\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name FacilitiesFilters\n * @description Filter modal component for filtering facilities\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FacilitiesFilters extends Component {\n  static propTypes = {\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        nature: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      filter,\n      nature,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start facilities nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {nature.map(natureItem => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={natureItem}>\n                    <Checkbox value={natureItem}>{natureItem}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end facilities nature filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(FacilitiesFilters, {\n    filter: 'features.filter',\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  refreshFeatures,\n  paginateFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Pagination, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name FacilitiesActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of facilities\n * @param {Function} props.onFilter filters facilities\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst FacilitiesActionBar = ({ page, total, onFilter }) => (\n  <div className=\"FacilitiesActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Facilities\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess('Facilities refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing Facilities, \n                  please Facilities system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Facilities\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={17}\n        xl={{ span: 1, offset: 16 }}\n        xxl={{ span: 1, offset: 17 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Facilities\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateFeatures(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nFacilitiesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default FacilitiesActionBar;\n","import {\n  Connect,\n  getFeatures,\n  openFeatureForm,\n  selectFeature,\n  closeFeatureForm,\n  searchFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Input, Modal, Col, Row, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport FacilityList from './List';\nimport FacilityForm from './Form';\nimport FacilitiesFilters from './Filters';\nimport FacilitiesActionBar from './ActionBar';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Facilities\n * @description Render Facility module which has search box,\n * actions and list of Facilities\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Facilities extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    facilities: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        type: PropTypes.string,\n      })\n    ).isRequired,\n    facility: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    facility: null,\n  };\n\n  componentWillMount() {\n    getFeatures();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   *  to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible\n   * property to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open Facility form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close Facility form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name searchFeatures\n   * @description Search Facility List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  search = event => {\n    searchFeatures({ q: event.target.value });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} facility facility object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = facility => {\n    selectFeature(facility);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      facilities,\n      loading,\n      total,\n      page,\n      posting,\n      showForm,\n      facility,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"Facilities\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for Facilities here ...\"\n              onChange={this.search}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Facility\"\n              onClick={this.openForm}\n            >\n              New Facility\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n        {/* list action bar */}\n        <FacilitiesActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list action bar */}\n        {/* list starts */}\n        <FacilityList\n          facilities={facilities}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Facilities\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          destroyOnClose\n          maskClosable={false}\n          footer={null}\n          width={800}\n        >\n          <FacilitiesFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Facility' : 'Add New Facility'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <FacilityForm\n            posting={posting}\n            isEditForm={isEditForm}\n            facility={facility}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Facilities, {\n  facilities: 'features.list',\n  facility: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Facilities from '../components/Facilities';\n\nconst FacilitiesLayout = () => <Facilities />;\n\nexport default FacilitiesLayout;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Type', offset: 4 },\n];\n\n/**\n * @function\n * @name CriticalInfrastructureListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst CriticalInfrastructureListHeader = () => (\n  <Row className=\"CriticalInfrastructureListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default CriticalInfrastructureListHeader;\n","import { Icon, Avatar, Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name CriticalInfrastructureListItem\n * @description Single Critical Infrastructure list item component.\n * Render single Critical Infrastructure details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass CriticalInfrastructureListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"CriticalInfrastructureListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar>{name.slice(0, 1)}</Avatar>\n            )}\n          </Col>\n          <Col span={9}>{name}</Col>\n          <Col span={10}>{type}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Critical Infrastructure\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Critical Infrastructure\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default CriticalInfrastructureListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport CriticalInfrastructureListHeader from '../ListHeader';\nimport CriticalInfrastructureListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name CriticalInfrastructureList\n * @description Render Critical Infrastructure list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of Critical Infrastructure\n * @param {Array} props.districts array list of Critical Infrastructure\n * @param {Function} props.onEdit function for editing Critical Infrastructure\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst CriticalInfrastructureList = ({\n  criticalInfrastructures,\n  loading,\n  onEdit,\n}) => (\n  <Fragment>\n    <CriticalInfrastructureListHeader />\n    <List\n      loading={loading}\n      dataSource={criticalInfrastructures}\n      renderItem={criticalInfrastructure => (\n        <CriticalInfrastructureListItem\n          key={criticalInfrastructure.name}\n          name={criticalInfrastructure.name}\n          type={criticalInfrastructure.type}\n          onEdit={() => onEdit(criticalInfrastructure)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nCriticalInfrastructureList.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  criticalInfrastructures: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default CriticalInfrastructureList;\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\nclass CriticalInfrastructureForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    criticalInfrastructure: PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * Handle submit form action\n   *\n   * @function\n   * @name handleSubmit\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      criticalInfrastructure,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedCriticalInfrastructure = Object.assign(\n            {},\n            criticalInfrastructure,\n            {\n              ...values,\n              continent: 'Africa',\n              country: 'Tanzania',\n              family: 'CriticalInfrastructure',\n            }\n          );\n          putFeature(\n            updatedCriticalInfrastructure,\n            () => {\n              notifySuccess('Critical Infrastructure was updated successfully');\n            },\n            () => {\n              notifyError(\n                `Something occurred while updating Critical Infrastructure, \n                please try again!`\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('Critical Infrastructure was created successfully');\n            },\n            () => {\n              notifyError(\n                `Something occurred while saving Critical Infrastructure,\n                 please try again!`\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  renderSelectOptions = options =>\n    options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ));\n\n  render() {\n    const {\n      isEditForm,\n      criticalInfrastructure,\n      posting,\n      onCancel,\n      nature,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* Critical Infrastructure name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? criticalInfrastructure.name : undefined,\n            rules: [\n              {\n                required: true,\n                message: 'Critical Infrastructure name is required',\n              },\n            ],\n          })(<Input placeholder=\"e.g Lindi\" />)}\n        </Form.Item>\n        {/* end Critical Infrastructure name */}\n\n        {/* Critical Infrastructure nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm\n              ? criticalInfrastructure.nature\n              : undefined,\n            rules: [\n              {\n                required: true,\n                message: 'Critical Infrastructure nature is required',\n              },\n            ],\n          })(<Select showSearch>{this.renderSelectOptions(nature)}</Select>)}\n        </Form.Item>\n        {/* end criticalInfrastructure nature */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(\n  Connect(CriticalInfrastructureForm, {\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name CriticalInfrastructuresFilters\n * @description Filter modal component for filtering critical infrastructures\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass CriticalInfrastructuresFilters extends Component {\n  static propTypes = {\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        nature: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      filter,\n      nature,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start critical infrastructures nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {nature.map(natureItem => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={natureItem}>\n                    <Checkbox value={natureItem}>{natureItem}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end critical infrastructures nature filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(CriticalInfrastructuresFilters, {\n    filter: 'features.filter',\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  refreshFeatures,\n  paginateFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Pagination, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name CriticalInfrastructuresActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of CriticalInfrastructures\n * @param {Function} props.onFilter function for filtering\n *  CriticalInfrastructures\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst CriticalInfrastructuresActionBar = ({ page, total, onFilter }) => (\n  <div className=\"CriticalInfrastructuresActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh critical infrastructure\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess(\n                  'Critical Infrastructures refreshed successfully'\n                );\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing Critical Infrastructures,\n                   please Critical Infrastructures system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected critical infrastructure\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={17}\n        xl={{ span: 1, offset: 16 }}\n        xxl={{ span: 1, offset: 17 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter critical infrastructure\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateFeatures(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nCriticalInfrastructuresActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default CriticalInfrastructuresActionBar;\n","import {\n  Connect,\n  getFeatures,\n  openFeatureForm,\n  selectFeature,\n  closeFeatureForm,\n  searchFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Input, Modal, Col, Row, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport CriticalInfrastructureList from './List';\nimport CriticalInfrastructureForm from './Form';\nimport CriticalInfrastructuresFilters from './Filters';\nimport CriticalInfrastructuresActionBar from './ActionBar';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name CriticalInfrastructures\n * @description Render Critical Infrastructure module which has search box,\n *  actions and list of Critical Infrastructures\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass CriticalInfrastructures extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    criticalInfrastructures: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        type: PropTypes.string,\n      })\n    ).isRequired,\n    criticalInfrastructure: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    criticalInfrastructure: null,\n  };\n\n  componentWillMount() {\n    getFeatures();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   * to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property\n   *  to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open Critical Infrastructure form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close Critical Infrastructure form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name searchFeatures\n   * @description Search Critical Infrastructures List based on\n   * supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  search = event => {\n    searchFeatures({ q: event.target.value });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} criticalInfrastructure critical Infrastructure object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = criticalInfrastructure => {\n    selectFeature(criticalInfrastructure);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      criticalInfrastructures,\n      loading,\n      total,\n      page,\n      posting,\n      showForm,\n      criticalInfrastructure,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"CriticalInfrastructureList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for Critical Infrastructures here ...\"\n              onChange={this.search}\n            />\n            {/* end search input component */}\n          </Col>\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Critical Infrastructure\"\n              onClick={this.openForm}\n            >\n              New Critical Infrastructure\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n        {/* list action bar */}\n        <CriticalInfrastructuresActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list action bar */}\n        {/* list starts */}\n        <CriticalInfrastructureList\n          criticalInfrastructures={criticalInfrastructures}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Critical Infrastructures\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          destroyOnClose\n          maskClosable={false}\n          footer={null}\n          width={800}\n        >\n          <CriticalInfrastructuresFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={\n            isEditForm\n              ? 'Edit Critical Infrastructure'\n              : 'Add New Critical Infrastructure'\n          }\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <CriticalInfrastructureForm\n            posting={posting}\n            isEditForm={isEditForm}\n            criticalInfrastructure={criticalInfrastructure}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(CriticalInfrastructures, {\n  criticalInfrastructures: 'features.list',\n  criticalInfrastructure: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport CriticalInfrastructure from '../components/Infrastructure';\n\nconst CriticalInfrastructureLayout = () => <CriticalInfrastructure />;\n\nexport default CriticalInfrastructureLayout;\n","import { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport {\n  paginateFeatures,\n  refreshFeatures,\n} from '@codetanzania/emis-api-states';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name RegionsActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of regions\n * @param {Function} props.onFilter function for filtering regions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst RegionsActionBar = ({ page, total, onFilter }) => (\n  <div className=\"RegionsActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Regions\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess('Regions refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing regions, please contact \n                  system administrator!`\n                );\n              }\n            )\n          }\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Regions\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Regions\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={16}\n        xl={{ span: 1, offset: 15 }}\n        xxl={{ span: 1, offset: 16 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Regions\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          className=\"pagination\"\n          onChange={nextPage => paginateFeatures(nextPage)}\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nRegionsActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default RegionsActionBar;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name RegionsListItem\n * @description  Single region list item component. Render single region details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RegionsListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    nature: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    family: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, family, nature, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    const avatarBackground = randomColor();\n\n    return (\n      <div\n        className=\"RegionsListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: avatarBackground }}>\n                {name.charAt(0).toUpperCase()}{' '}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={5}>{name}</Col>\n          <Col span={6}>{nature}</Col>\n          <Col span={4}>{type}</Col>\n          <Col span={4}>{family}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Region\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Region\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RegionsListItem;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Nature' },\n  { span: 4, header: 'Type' },\n  { span: 4, header: 'Family' },\n];\n\n/**\n * @function\n * @name RegionsListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst RegionsListHeader = () => (\n  <Row className=\"RegionsListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default RegionsListHeader;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport RegionsListItem from '../ListItem';\nimport RegionsListHeader from '../LIstHeader';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name RegionsList\n * @description Render Region list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of region\n * @param {Array} props.regions array list of region\n * @param {Function} props.onEdit function for editing region\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst RegionsList = ({ regions, loading, onEdit }) => (\n  <Fragment>\n    <RegionsListHeader />\n    <List\n      loading={loading}\n      dataSource={regions}\n      renderItem={region => (\n        <RegionsListItem\n          key={region.name}\n          name={region.name}\n          nature={region.nature}\n          type={region.type}\n          family={region.family}\n          onEdit={() => onEdit(region)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nRegionsList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  regions: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default RegionsList;\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\n/**\n *\n * @class\n * @name RegionForm\n * @description  Render Region form for creating and updating Region details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RegionForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    region: PropTypes.shape({\n      name: PropTypes.string,\n      nature: PropTypes.string,\n      family: PropTypes.string,\n      type: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      region,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedRegion = Object.assign({}, region, values);\n          putFeature(\n            updatedRegion,\n            () => {\n              notifySuccess('Region was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating region, please try again!'\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('Region was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving region, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      region,\n      posting,\n      onCancel,\n      families,\n      natures,\n      types,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* region name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? region.name : undefined,\n            rules: [{ required: true, message: 'Region name is required' }],\n          })(<Input placeholder=\"e.g Dar es Salaam\" />)}\n        </Form.Item>\n        {/* end region name */}\n\n        {/* nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? region.nature : undefined,\n            rules: [{ required: true, message: 'Nature is required' }],\n          })(\n            <Select placeholder=\"e.g Building\">\n              {natures.map(nature => (\n                <Option key={nature} value={nature}>\n                  {nature}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end nature */}\n\n        {/* region type */}\n        <Form.Item {...formItemLayout} label=\"Type\">\n          {getFieldDecorator('type', {\n            initialValue: isEditForm ? region.type : undefined,\n            rules: [{ required: true, message: 'Type is required' }],\n          })(\n            <Select placeholder=\"e.g Region\">\n              {types.map(type => (\n                <Option key={type} value={type}>\n                  {type}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end region type */}\n\n        {/* region family */}\n        <Form.Item {...formItemLayout} label=\"Family\">\n          {getFieldDecorator('family', {\n            initialValue: isEditForm ? region.family : undefined,\n            rules: [{ required: true, message: 'Family is required' }],\n          })(\n            <Select placeholder=\"e.g Hospital\">\n              {families.map(family => (\n                <Option key={family} value={family}>\n                  {family}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end family */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(RegionForm), {\n  natures: 'features.schema.properties.nature.enum',\n  families: 'features.schema.properties.family.enum',\n  types: 'features.schema.properties.type.enum',\n});\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name RegionsFilters\n * @description Filter modal component for filtering region\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RegionsFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        natures: PropTypes.arrayOf(PropTypes.string),\n        families: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      natures,\n      families,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Region nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {natures.map(nature => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={nature}>\n                    <Checkbox value={nature}>{nature}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end nature filters */}\n\n        {/* start type filters */}\n        <Form.Item {...formItemLayout} label=\"By Region type\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end type filters */}\n\n        {/* start family filters */}\n        <Form.Item {...formItemLayout} label=\"By Family\">\n          {getFieldDecorator('family', {\n            initialValue: filter ? filter.family : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {families.map(family => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={family}>\n                    <Checkbox value={family}>{family}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end family filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(RegionsFilters), {\n  natures: 'features.schema.properties.nature.enum',\n  families: 'features.schema.properties.family.enum',\n  types: 'features.schema.properties.type.enum',\n  filter: 'features.filter',\n});\n","import {\n  Connect,\n  filterFeatures,\n  searchFeatures,\n  openFeatureForm,\n  closeFeatureForm,\n  selectFeature,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport RegionsActionBar from './ActionBar';\nimport RegionsList from './List';\nimport RegionForm from './Form';\nimport RegionsFilters from './Filters';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Regions\n * @description  Render Regions list which have search box,\n * actions and Regions list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Regions extends Component {\n  state = {\n    isEditForm: false,\n    showFilters: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    regions: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    region: PropTypes.shape({ name: PropTypes.string }),\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    region: null,\n  };\n\n  componentDidMount() {\n    filterFeatures({ type: 'Region', family: 'Administrative' });\n  }\n\n  /**\n   *\n   * @function\n   * @name searchDistrict\n   * @description Search Regions List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchRegions = event => {\n    searchFeatures(event.target.value);\n  };\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   *  false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   *  false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openContactForm\n   * @description Open region form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close region form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} region region object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = region => {\n    selectFeature(region);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      page,\n      total,\n      regions,\n      loading,\n      posting,\n      showForm,\n      region,\n    } = this.props;\n    const { isEditForm, showFilters } = this.state;\n\n    return (\n      <div className=\"Regions\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for regions here ...\"\n              onChange={this.searchRegions}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Region\"\n              onClick={this.openForm}\n            >\n              New Region\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <RegionsActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n\n        {/* list starts */}\n        <RegionsList\n          regions={regions}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Region\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          width={630}\n          maskClosable={false}\n        >\n          <RegionsFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Region' : 'Add New Region'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <RegionForm\n            posting={posting}\n            isEditForm={isEditForm}\n            region={region}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Regions, {\n  regions: 'features.list',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n  region: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Regions from '../components/Regions';\n\nconst RegionsLayout = () => <Regions />;\n\nexport default RegionsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst SubWardsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Evacuation Centers yet,but when they are available will appear here\"\n      buttonLabel=\"New Feature\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default SubWardsLayout;\n","import { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport {\n  refreshFeatures,\n  paginateFeatures,\n} from '@codetanzania/emis-api-states';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name WardsActionBar\n * @description Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of ward\n * @param {Function} props.onFilter filters ward\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst WardsActionBar = ({ page, total, onFilter }) => (\n  <div className=\"WardsActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Wards\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess('Ward refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing ward, please contact\n                   system administrator!`\n                );\n              }\n            )\n          }\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Wards\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Wards\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={16}\n        xl={{ span: 1, offset: 15 }}\n        xxl={{ span: 1, offset: 16 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Wards\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          className=\"pagination\"\n          onChange={nextPage => paginateFeatures(nextPage)}\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nWardsActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default WardsActionBar;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name WardsListItem\n * @description Single ward list item component. Render single ward details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WardsListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    nature: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    family: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, nature, family, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    const avatarBackground = randomColor();\n\n    return (\n      <div\n        className=\"WardsListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: avatarBackground }}>\n                {name.charAt(0).toUpperCase()}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={5}>{name}</Col>\n          <Col span={6}>{nature}</Col>\n          <Col span={4}>{type}</Col>\n          <Col span={4}>{family}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Ward\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Ward\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default WardsListItem;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Nature' },\n  { span: 4, header: 'Type' },\n  { span: 4, header: 'family' },\n];\n\n/**\n * @function\n * @name WardsListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst WardsListHeader = () => (\n  <Row className=\"WardsListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default WardsListHeader;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport WardsListItem from '../ListItem';\nimport WardsListHeader from '../ListHeader';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name WardsList\n * @description Render Wards list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of wards\n * @param {Array} props.wards array list of wards\n * @param {Function} props.onEdit function for editing ward\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst WardsList = ({ wards, loading, onEdit }) => (\n  <Fragment>\n    <WardsListHeader />\n    <List\n      loading={loading}\n      dataSource={wards}\n      renderItem={ward => (\n        <WardsListItem\n          key={ward.name}\n          name={ward.name}\n          nature={ward.nature}\n          type={ward.type}\n          family={ward.family}\n          onEdit={() => onEdit(ward)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nWardsList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  wards: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default WardsList;\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name WardsFilters\n * @description Filter modal component for filtering Wards\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WardsFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        natures: PropTypes.arrayOf(PropTypes.string),\n        families: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      natures,\n      families,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Region nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {natures.map(nature => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={nature}>\n                    <Checkbox value={nature}>{nature}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end nature filters */}\n\n        {/* start type filters */}\n        <Form.Item {...formItemLayout} label=\"By Region type\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end type filters */}\n\n        {/* start family filters */}\n        <Form.Item {...formItemLayout} label=\"By Family\">\n          {getFieldDecorator('family', {\n            initialValue: filter ? filter.family : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {families.map(family => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={family}>\n                    <Checkbox value={family}>{family}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end family filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Connect(Form.create()(WardsFilters), {\n  natures: 'features.schema.properties.nature.enum',\n  families: 'features.schema.properties.family.enum',\n  types: 'features.schema.properties.type.enum',\n  filter: 'features.filter',\n});\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\n/**\n *\n * @class\n * @name RegionForm\n * @description Render form for creating and updating ward details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WardForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    ward: PropTypes.shape({\n      name: PropTypes.string,\n      nature: PropTypes.string,\n      family: PropTypes.string,\n      type: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  /**\n   * Handle submit form action\n   *\n   * @function\n   * @name handleSubmit\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      ward,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedRegion = Object.assign({}, ward, values);\n          putFeature(\n            updatedRegion,\n            () => {\n              notifySuccess('Ward was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating ward, please try again!'\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('Ward was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving ward, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      ward,\n      posting,\n      onCancel,\n      families,\n      natures,\n      types,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* ward name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? ward.name : undefined,\n            rules: [{ required: true, message: 'Region name is required' }],\n          })(<Input placeholder=\"e.g Saranga\" />)}\n        </Form.Item>\n        {/* end ward name */}\n\n        {/* nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? ward.nature : undefined,\n            rules: [{ required: true, message: 'Nature is required' }],\n          })(\n            <Select placeholder=\"e.g Building\">\n              {natures.map(nature => (\n                <Option key={nature} value={nature}>\n                  {nature}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end nature */}\n\n        {/* ward type */}\n        <Form.Item {...formItemLayout} label=\"Type\">\n          {getFieldDecorator('type', {\n            initialValue: isEditForm ? ward.type : undefined,\n            rules: [{ required: true, message: 'Type is required' }],\n          })(\n            <Select placeholder=\"e.g Region\">\n              {types.map(type => (\n                <Option key={type} value={type}>\n                  {type}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end ward type */}\n\n        {/* ward family */}\n        <Form.Item {...formItemLayout} label=\"Family\">\n          {getFieldDecorator('family', {\n            initialValue: isEditForm ? ward.family : undefined,\n            rules: [{ required: true, message: 'Family is required' }],\n          })(\n            <Select placeholder=\"e.g Hospital\">\n              {families.map(family => (\n                <Option key={family} value={family}>\n                  {family}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end family */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(WardForm), {\n  natures: 'features.schema.properties.nature.enum',\n  families: 'features.schema.properties.family.enum',\n  types: 'features.schema.properties.type.enum',\n});\n","import {\n  Connect,\n  searchFeatures,\n  filterFeatures,\n  openFeatureForm,\n  closeFeatureForm,\n  selectFeature,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport WardsActionBar from './ActionBar';\nimport WardsList from './List';\nimport WardsFilters from './Filters';\nimport WardForm from './Form';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Wards\n * @description Render Wards list which have search box, actions and Wards list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Wards extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    wards: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    posting: PropTypes.bool.isRequired,\n    ward: PropTypes.shape({ name: PropTypes.string }),\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    ward: null,\n  };\n\n  componentDidMount() {\n    filterFeatures({ type: 'Ward', family: 'Administrative' });\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   *  false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   *  false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name searchWards\n   * @description Search wards List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchWards = event => {\n    searchFeatures(event.target.value);\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open ward form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close ward form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} ward ward object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = ward => {\n    selectFeature(ward);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const { page, total, wards, loading, posting, showForm, ward } = this.props;\n    const { showFilters, isEditForm } = this.state;\n\n    return (\n      <div className=\"Wards\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for wards here ...\"\n              onChange={this.searchWards}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Ward\"\n              onClick={this.openForm}\n            >\n              New Ward\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <WardsActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n\n        {/* list starts */}\n        <WardsList wards={wards} loading={loading} onEdit={this.handleEdit} />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Wards\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          width={800}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <WardsFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Ward' : 'Add New Ward'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <WardForm\n            posting={posting}\n            isEditForm={isEditForm}\n            ward={ward}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Wards, {\n  wards: 'features.list',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n  ward: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Ward from '../components/Wards';\n\nconst WardsLayout = () => <Ward />;\n\nexport default WardsLayout;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 6, header: 'Type', offset: 4 },\n];\n\n/**\n * @function\n * @name WarehouseListHeader\n * @description Render list headers\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst WarehouseListHeader = () => (\n  <Row className=\"WarehouseListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default WarehouseListHeader;\n","import { Icon, Avatar, Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name WarehouseListItem\n * @description Single warehouse list item component.\n * Render single warehouse details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WarehouseListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    level: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { name, level, onEdit } = this.props;\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"WarehouseListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar>{name.slice(0, 1)}</Avatar>\n            )}\n          </Col>\n          <Col span={9}>{name}</Col>\n          <Col span={10}>{level}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update warehouse\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive warehouse\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default WarehouseListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport WarehouseListHeader from '../ListHeader';\nimport WarehouseListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name WarehouseList\n * @description Render warehouse list which have search box and actions\n *\n * @param {Object} props props object\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst WarehouseList = ({ warehouses, loading, onEdit }) => (\n  <Fragment>\n    <WarehouseListHeader />\n    <List\n      loading={loading}\n      dataSource={warehouses}\n      renderItem={warehouse => (\n        <WarehouseListItem\n          key={warehouse.name}\n          name={warehouse.name}\n          level={warehouse.type}\n          onEdit={() => onEdit(warehouse)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nWarehouseList.propTypes = {\n  onEdit: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  warehouses: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default WarehouseList;\n","import {\n  postFeature,\n  putFeature,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\nclass WarehouseForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    warehouse: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle create/edit action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      warehouse,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedWarehouse = Object.assign({}, warehouse, {\n            ...values,\n            continent: 'Africa',\n            country: 'Tanzania',\n            family: 'Warehouse',\n          });\n          putFeature(\n            updatedWarehouse,\n            () => {\n              notifySuccess('Warehouse was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating warehouse, please try again!'\n              );\n            }\n          );\n        } else {\n          postFeature(\n            values,\n            () => {\n              notifySuccess('Warehouse was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving warehouse, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  renderSelectOptions = options =>\n    options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ));\n\n  render() {\n    const {\n      isEditForm,\n      warehouse,\n      posting,\n      onCancel,\n      nature,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* warehouse name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? warehouse.name : undefined,\n            rules: [{ required: true, message: 'Warehouse name is required' }],\n          })(<Input placeholder=\"e.g Lindi\" />)}\n        </Form.Item>\n        {/* end warehouse name */}\n\n        {/* warehouse nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? warehouse.nature : undefined,\n            rules: [\n              { required: true, message: 'Warehouse nature is required' },\n            ],\n          })(<Select showSearch>{this.renderSelectOptions(nature)}</Select>)}\n        </Form.Item>\n        {/* end warehouse nature */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(\n  Connect(WarehouseForm, {\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  clearFeatureFilters,\n  Connect,\n  filterFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name WarehousesFilters\n * @description Filter modal component for filtering warehouses\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WarehousesFilters extends Component {\n  static propTypes = {\n    nature: PropTypes.arrayOf(PropTypes.string).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        nature: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFeatures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFeatureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      filter,\n      nature,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start warehouses nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {nature.map(natureItem => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={natureItem}>\n                    <Checkbox value={natureItem}>{natureItem}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end warehouse nature filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(WarehousesFilters, {\n    filter: 'features.filter',\n    nature: 'features.schema.properties.nature.enum',\n  })\n);\n","import {\n  refreshFeatures,\n  paginateFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Pagination, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name WarehousesActionBar\n * @description Render action bar for actions which are applicable to\n * list content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of Warehouses\n * @param {Function} props.onFilter filters Warehouses\n *  when function is called\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst WarehousesActionBar = ({ page, total, onFilter }) => (\n  <div className=\"WarehousesActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh warehouse\"\n          onClick={() =>\n            refreshFeatures(\n              () => {\n                notifySuccess('warehouses refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing warehouses, \n                  please warehouses system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected warehouse\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={17}\n        xl={{ span: 1, offset: 16 }}\n        xxl={{ span: 1, offset: 17 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter warehouse\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateFeatures(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nWarehousesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default WarehousesActionBar;\n","import {\n  Connect,\n  filterFeatures,\n  openFeatureForm,\n  selectFeature,\n  closeFeatureForm,\n  searchFeatures,\n} from '@codetanzania/emis-api-states';\nimport { Input, Modal, Col, Row, Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport WarehouseList from './List';\nimport WarehouseForm from './Form';\nimport WarehouseFilters from './Filters';\nimport WarehousesActionBar from './ActionBar';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name Warehouses\n * @description Render features module which has search box, actions and\n *  list of features\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Warehouses extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    warehouses: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        type: PropTypes.string,\n      })\n    ).isRequired,\n    warehouse: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    warehouse: null,\n  };\n\n  componentWillMount() {\n    filterFeatures({ family: 'Warehouse' });\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openForm\n   * @description Open warehouse form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openFeatureForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeForm\n   * @description close warehouse form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeFeatureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name searchFeatures\n   * @description Search Warehouses List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  search = event => {\n    searchFeatures({ q: event.target.value });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} warehouse warehouse object passed in the function\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = warehouse => {\n    selectFeature(warehouse);\n    this.setState({ isEditForm: true });\n    openFeatureForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      warehouses,\n      loading,\n      total,\n      page,\n      posting,\n      showForm,\n      warehouse,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"WarehouseList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for warehouses here ...\"\n              onChange={this.search}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Warehouse\"\n              onClick={this.openForm}\n            >\n              New Warehouse\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list action bar */}\n        <WarehousesActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list action bar */}\n\n        {/* list starts */}\n        <WarehouseList\n          warehouses={warehouses}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Warehouses\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          destroyOnCloseName\n          maskClosable={false}\n          footer={null}\n          width={800}\n        >\n          <WarehouseFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Warehouse' : 'Add New Warehouse'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <WarehouseForm\n            posting={posting}\n            isEditForm={isEditForm}\n            warehouse={warehouse}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Warehouses, {\n  warehouses: 'features.list',\n  warehouse: 'features.selected',\n  posting: 'features.posting',\n  showForm: 'features.showForm',\n  loading: 'features.loading',\n  page: 'features.page',\n  total: 'features.total',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Warehouses from '../components/Warehouses';\n\nconst WarehousesLayout = () => <Warehouses />;\n\nexport default WarehousesLayout;\n","import React from 'react';\nimport alertIcon from '../assets/icons/alerts.svg';\nimport geographicalFeaturesIcon from '../assets/icons/geographicalfeatures.svg';\nimport incidentIcon from '../assets/icons/incidents-disabled.svg';\nimport dashboardIcon from '../assets/icons/dashboards-disabled.svg';\nimport stakeholderIcon from '../assets/icons/stakeholders.svg';\nimport resourceIcon from '../assets/icons/resources.svg';\nimport planIcon from '../assets/icons/emergencyplans.svg';\nimport assessmentIcon from '../assets/icons/assessments.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Alerts',\n    path: '/alerts',\n    icon: alertIcon,\n    description: modules.alerts,\n  },\n  {\n    name: 'Assessment',\n    path: '/assessments',\n    icon: assessmentIcon,\n    description: modules.assessments,\n  },\n  { name: 'Emergency Plans', path: '/plans', icon: planIcon },\n  {\n    name: 'Geographical Features',\n    path: '/geographicalfeatures',\n    icon: geographicalFeaturesIcon,\n    description: modules.geographicalfeatures,\n  },\n  {\n    name: 'Incidents',\n    path: '/incidents',\n    icon: incidentIcon,\n    description: modules.incidents,\n    disabled: true,\n  },\n  {\n    name: 'Resources',\n    path: '/resources',\n    icon: resourceIcon,\n    description: modules.resources,\n  },\n  {\n    name: 'Stakeholders',\n    path: '/stakeholders',\n    icon: stakeholderIcon,\n    description: modules.stakeholders,\n  },\n  {\n    name: 'Dashboards',\n    path: '/dashboards',\n    icon: dashboardIcon,\n    description: modules.dashboards,\n    disabled: true,\n  },\n];\n\n/**\n * Home component which shows to navigation Nav\n *\n * @function\n * @name Home\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Home = () => <NavigationMenu routes={routes} />;\n\nexport default Home;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport commandCenterIcon from '../assets/icons/incidents/incidentcommandcenter.svg';\nimport assessmentIcon from '../assets/icons/incidents/assessments.svg';\nimport incidentTypeIcon from '../assets/icons/incidents/incidenttype.svg';\nimport lossDatabaseIcon from '../assets/icons/incidents/lossdatabase.svg';\nimport feedIcon from '../assets/icons/incidents/feed.svg';\nimport actionsIcon from '../assets/icons/incidents/actions.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Incident Command Center',\n    path: '/commandcenter',\n    icon: commandCenterIcon,\n    description: modules.incidentsCommandCenter,\n  },\n  {\n    name: 'Incidents Actions',\n    path: '/actions',\n    icon: actionsIcon,\n    description: modules.incidentsActions,\n  },\n  {\n    name: 'Assessments',\n    path: '/assessments',\n    icon: assessmentIcon,\n    description: modules.incidentsAssessments,\n  },\n  {\n    name: 'Incidents Feeds',\n    path: '/feeds',\n    icon: feedIcon,\n    description: modules.incidentsFeeds,\n  },\n  {\n    name: 'Incident Types',\n    path: '/incidenttypes',\n    icon: incidentTypeIcon,\n    description: modules.incidentsTypes,\n  },\n  {\n    name: 'Loss Database/History',\n    path: '/lossdatabase',\n    icon: lossDatabaseIcon,\n    description: modules.incidentsLossDatabase,\n  },\n];\n/**\n *\n * @function\n * @name Incidents\n * @description Home component which shows to navigation Nav\n *\n * @param {Object} props props object\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Incidents = ({ match }) => (\n  <NavigationMenu routes={routes} match={match} />\n);\n\n/* props validation */\nIncidents.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default Incidents;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst IncidentsActionsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Incidents Actions yet,but when they are available will appear here\"\n      buttonLabel=\"New Incident\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default IncidentsActionsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst IncidentsAssessmentsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Incidents Assessments yet,but when they are available will appear here\"\n      buttonLabel=\"New Incident\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default IncidentsAssessmentsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst IncidentsCommandCenterLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Command Center yet,but when they are available will appear here\"\n      buttonLabel=\"New Incident\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default IncidentsCommandCenterLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst IncidentsFeedsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Incidents Feeds yet,but when they are available will appear here\"\n      buttonLabel=\"New Incident\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default IncidentsFeedsLayout;\n","import {\n  paginateIncidentTypes,\n  refreshIncidentTypes,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name IncidentTypesActionBar\n * @description  Render action bar for actions which are applicable to list\n * content\n *\n * @param {Object} props props object\n * @param {number} props.page current page\n * @param {number} props.total total number of incident types\n * @param {Function} props.onFilter function to filters incident types\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst IncidentTypesActionBar = ({ page, total, onFilter }) => (\n  <div className=\"IncidentTypesActionBar\">\n    <Row>\n      <Col span={1} xl={1} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh Incident Types\"\n          onClick={() =>\n            refreshIncidentTypes(\n              () => {\n                notifySuccess('Incident Types refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  `An Error occurred while refreshing incident types,\n                   please contact system administrator!`\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"cloud-download\"\n          title=\"Export selected Incident Types\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col span={1} xl={1}>\n        <Button\n          type=\"circle\"\n          icon=\"hdd\"\n          title=\"Archive selected Incident Types\"\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n\n      <Col\n        span={1}\n        offset={16}\n        xl={{ span: 1, offset: 16 }}\n        xxl={{ span: 1, offset: 16 }}\n      >\n        <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter Incident Types\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        />\n      </Col>\n\n      <Col span={3} xl={4} xxl={3}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateIncidentTypes(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n    </Row>\n  </div>\n);\n\n/* props validation */\nIncidentTypesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default IncidentTypesActionBar;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\n/**\n *\n * @function\n * @name IncidentTypesListHeader\n * @description Incident Types list item component. Render Incident Type list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\n\nconst headerLayout = [\n  { span: 5, header: 'Name', offset: 1 },\n  { span: 4, header: 'Nature' },\n  { span: 4, header: 'Family' },\n  { span: 4, header: 'Code' },\n  { span: 4, header: 'Cap' },\n];\n\nconst IncidentTypesListHeader = () => (\n  <Row className=\"IncidentTypesListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default IncidentTypesListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n *\n * @class\n * @name IncidentTypesListItem\n * @description Single incidenttype list item component. Render single\n * incident type details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass IncidentTypesListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    color: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    nature: PropTypes.string.isRequired,\n    family: PropTypes.string.isRequired,\n    cap: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  render() {\n    const { color, name, nature, family, cap, code, onEdit } = this.props;\n\n    const { isHovered } = this.state;\n    return (\n      <div\n        className=\"IncidentTypesListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>\n            {isHovered ? (\n              <Checkbox className=\"Checkbox\" />\n            ) : (\n              <Avatar style={{ backgroundColor: color }}>\n                {name.charAt(0)}\n              </Avatar>\n            )}\n          </Col>\n          <Col span={5}>{name}</Col>\n          <Col span={4}>{nature}</Col>\n          <Col span={4}>{family}</Col>\n          <Col span={4}>{code}</Col>\n          <Col span={3}>{cap}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Incident Types\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Incident Types\"\n                  className=\"actionIcon\"\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default IncidentTypesListItem;\n","import { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment } from 'react';\nimport IncidentTypesListHeader from '../ListHeader';\nimport IncidentTypesListItem from '../ListItem';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n *\n * @function\n * @name IncidentTypesList\n * @description Incident Types list item component. Render Incident Type list\n *\n * @param {Object} props props object\n * @param {boolean} props.loading preload list of incident types\n * @param {Array} props.incidenttype array list of incident types\n * @param {Function} props.onEdit function for editing single incident types\n * @version 0.1.0\n * @since 0.1.0\n */\nconst IncidentTypesList = ({ incidenttypes, loading, onEdit }) => (\n  <Fragment>\n    <IncidentTypesListHeader />\n    <List\n      loading={loading}\n      dataSource={incidenttypes}\n      renderItem={incidenttype => (\n        <IncidentTypesListItem\n          key={incidenttype.color}\n          color={incidenttype.color}\n          name={incidenttype.name}\n          nature={incidenttype.nature}\n          family={incidenttype.family}\n          cap={incidenttype.cap}\n          code={incidenttype.code}\n          onEdit={() => onEdit(incidenttype)}\n        />\n      )}\n    />\n  </Fragment>\n);\n\nIncidentTypesList.propTypes = {\n  loading: PropTypes.bool.isRequired,\n  incidenttypes: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n    .isRequired,\n  onEdit: PropTypes.func.isRequired,\n};\n\nexport default IncidentTypesList;\n","import {\n  clearIncidentTypeFilters,\n  Connect,\n  filterIncidentTypes,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n *\n * @class\n * @name IncidentTypesFilters\n * @description Filter modal component for filtering incident types\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass IncidentTypesFilters extends Component {\n  static propTypes = {\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        families: PropTypes.arrayOf(PropTypes.string).isRequired,\n        natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n      })\n    ),\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   *\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterIncidentTypes(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   *\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearIncidentTypeFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      families,\n      natures,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start families filters */}\n        <Form.Item {...formItemLayout} label=\"By Emergency Families\">\n          {getFieldDecorator('family', {\n            initialValue: filter ? filter.families : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {families.map(family => (\n                  <Col span={8} style={{ margin: '10px 0' }} key={family}>\n                    <Checkbox value={family}>{family}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end families filters */}\n\n        {/* start natures filters */}\n        <Form.Item {...formItemLayout} label=\"By Nature \">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.natures : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {natures.map(nature => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={nature}>\n                    <Checkbox value={nature}>{nature}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end nature filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 8 }}>\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(IncidentTypesFilters), {\n  natures: 'incidentTypes.schema.properties.nature.enum',\n  families: 'incidentTypes.schema.properties.family.enum',\n  filter: 'incidentTypes.filter',\n});\n","import {\n  postIncidentType,\n  putIncidentType,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select, Col, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ColorPicker from 'rc-color-picker';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport 'rc-color-picker/assets/index.css';\nimport './styles.css';\n\nconst { Option } = Select;\n\n/**\n * @class\n * @name IncidentTypeForm\n * @description Render incident type form for creating/editing incident types\n *\n * @version 0.1.0\n * @since 0.1.0\n */\n\nclass IncidentTypeForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    incidenttype: PropTypes.shape({\n      name: PropTypes.string,\n      nature: PropTypes.string,\n      color: PropTypes.string,\n      cap: PropTypes.string,\n      code: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    caps: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    incidenttype: null,\n  };\n\n  /**\n   * @function\n   * @name onChangeColor\n   * @description Handle changing of color\n   *\n   * @param {string} color event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  onChangeColor = ({ color }) => {\n    const {\n      form: { setFieldsValue },\n    } = this.props;\n    setFieldsValue({ color });\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle create/edit action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      incidenttype,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedIncidentType = Object.assign({}, incidenttype, values);\n          putIncidentType(\n            updatedIncidentType,\n            () => {\n              notifySuccess('Incident Type was updated successfully');\n            },\n            () => {\n              notifyError(\n                `Something occurred while updating Incident Type,\n                 please try again!`\n              );\n            }\n          );\n        } else {\n          postIncidentType(\n            values,\n            () => {\n              notifySuccess('Incident Type was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving Incident Type, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      incidenttype,\n      posting,\n      onCancel,\n      families,\n      caps,\n      natures,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* incident types name */}\n        <Form.Item {...formItemLayout} label=\"Name \">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? incidenttype.name : undefined,\n            rules: [{ required: true, message: 'name is required' }],\n          })(<Input placeholder=\"e.g Flood\" />)}\n        </Form.Item>\n        {/* end incident types name */}\n\n        {/* incident types nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? incidenttype.nature : undefined,\n            rules: [\n              { required: true, message: 'Incident Type nature is required' },\n            ],\n          })(\n            <Select placeholder=\"e.g Natural\">\n              {natures.map(nature => (\n                <Option key={nature} value={nature}>\n                  {nature}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end incidenttype nature */}\n\n        {/* incident types cap */}\n        <Form.Item {...formItemLayout} label=\"Cap\">\n          {getFieldDecorator('cap', {\n            initialValue: isEditForm ? incidenttype.cap : undefined,\n            rules: [{ required: true, message: 'Cap is required' }],\n          })(\n            <Select placeholder=\"e.g Geo\">\n              {caps.map(cap => (\n                <Option key={cap} value={cap}>\n                  {cap}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end incident types cap */}\n\n        {/*  incident types family */}\n        <Form.Item {...formItemLayout} label=\"Family\">\n          {getFieldDecorator('family', {\n            initialValue: isEditForm ? incidenttype.family : undefined,\n            rules: [{ required: true, message: 'Family is required' }],\n          })(\n            <Select placeholder=\"e.g Geographical\">\n              {families.map(family => (\n                <Option key={family} value={family}>\n                  {family}\n                </Option>\n              ))}\n            </Select>\n          )}\n        </Form.Item>\n        {/* end incident types family */}\n\n        {/* incident types code */}\n        <Form.Item {...formItemLayout} label=\"Code\">\n          {getFieldDecorator('code', {\n            initialValue: isEditForm ? incidenttype.code : undefined,\n            rules: [{ required: true, message: 'Code is required' }],\n          })(<Input placeholder=\"e.g NMS\" />)}\n        </Form.Item>\n        {/* end incident types code */}\n\n        <Row>\n          <Col span={19}>\n            <Form.Item {...formItemLayout} label=\"Color Code\">\n              {getFieldDecorator('color', {\n                initialValue: isEditForm ? incidenttype.color : undefined,\n              })(\n                <Input\n                  placeholder=\"e.g #36c\"\n                  title=\"Click button to select color\"\n                />\n              )}\n            </Form.Item>\n          </Col>\n          <Col span={4} offset={1} className=\"IncidentTypeFormColor\">\n            <ColorPicker animation=\"slide-up\" onChange={this.onChangeColor} />\n          </Col>\n        </Row>\n        {/* end incident types color code */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(IncidentTypeForm), {\n  natures: 'incidentTypes.schema.properties.nature.enum',\n  families: 'incidentTypes.schema.properties.family.enum',\n  caps: 'incidentTypes.schema.properties.cap.enum',\n});\n","import {\n  Connect,\n  getIncidentTypes,\n  searchIncidentTypes,\n  openIncidentTypeForm,\n  closeIncidentTypeForm,\n  selectIncidentType,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport IncidentTypesActionBar from './ActionBar';\nimport IncidentTypesList from './List';\nimport IncidentTypesFilters from './Filters';\nimport IncidentTypeForm from './Form';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n *\n * @class\n * @name IncidentTypes\n * @description  Render IncidentTypes list which have search box,\n * actions and IncidentTypes list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\n\nclass IncidentTypes extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    incidenttypes: PropTypes.arrayOf(\n      PropTypes.shape({ name: PropTypes.string })\n    ).isRequired,\n    incidenttype: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    posting: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    incidenttype: null,\n  };\n\n  componentDidMount() {\n    getIncidentTypes();\n  }\n\n  /**\n   *\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to\n   * false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   *\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to\n   * false via state\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   *\n   * @function\n   * @name openIncidentTypeForm\n   * @description Open incident type form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openIncidentTypeForm = () => {\n    openIncidentTypeForm();\n  };\n\n  /**\n   *\n   * @function\n   * @name closeIncidentTypeForm\n   * @description close incident type form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeIncidentTypeForm = () => {\n    closeIncidentTypeForm();\n  };\n\n  /**\n   *\n   *\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} incidenttype incidenttype passed when function is called\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = incidenttype => {\n    selectIncidentType(incidenttype);\n    this.setState({ isEditForm: true });\n    openIncidentTypeForm();\n  };\n\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      incidenttypes,\n      incidenttype,\n      loading,\n      posting,\n      page,\n      showForm,\n      total,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <div className=\"IncidentTypes\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for Incident Types here ...\"\n              onChange={({ target: { value } }) =>\n                searchIncidentTypes({ q: value })\n              }\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Incident Type\"\n              onClick={this.openIncidentTypeForm}\n            >\n              New Incident Type\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list header */}\n        <IncidentTypesActionBar\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n        />\n        {/* end list header */}\n\n        {/* list starts */}\n        <IncidentTypesList\n          incidenttypes={incidenttypes}\n          loading={loading}\n          onEdit={this.handleEdit}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Incident Types\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <IncidentTypesFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end of filter modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Incident Type' : 'Add New Incident Type'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeIncidentTypeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <IncidentTypeForm\n            posting={posting}\n            isEditForm={isEditForm}\n            incidenttype={incidenttype}\n            onCancel={this.closeIncidentTypeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(IncidentTypes, {\n  incidenttypes: 'incidentTypes.list',\n  loading: 'incidentTypes.loading',\n  page: 'incidentTypes.page',\n  total: 'incidentTypes.total',\n  incidenttype: 'incidentTypes.selected',\n  posting: 'incidentTypes.posting',\n  showForm: 'incidentTypes.showForm',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport IncidentTypes from '../components/IncidentTypes';\n\nconst IncidentsIncidentTypesLayout = () => <IncidentTypes />;\n\nexport default IncidentsIncidentTypesLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst IncidentsLossDatabaseLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Incidents Loss Database yet,but when they are available will appear here\"\n      buttonLabel=\"New Incident\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default IncidentsLossDatabaseLayout;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport activationIcon from '../assets/icons/emergencyplans/activations-disabled.svg';\nimport disseminationIcon from '../assets/icons/emergencyplans/disseminations-disabled.svg';\nimport drillsAndExercisesIcon from '../assets/icons/emergencyplans/drillsandexercises-disabled.svg';\nimport plannerIcon from '../assets/icons/emergencyplans/planner.svg';\nimport proceduresIcon from '../assets/icons/emergencyplans/procedures.svg';\nimport activitiesIcon from '../assets/icons/emergencyplans/activities.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Emergency Planner',\n    path: '/planner',\n    icon: plannerIcon,\n    description: modules.emergencyPlansPlanner,\n  },\n  {\n    name: 'Emergency Plans Activities',\n    path: '/activities',\n    icon: activitiesIcon,\n    description: modules.emergencyPlansActivities,\n  },\n  {\n    name: 'Emergency Plans Procedures',\n    path: '/procedures',\n    icon: proceduresIcon,\n    description: modules.emergencyPlansProcedures,\n  },\n  {\n    name: 'Disseminations',\n    path: '/disseminations',\n    icon: disseminationIcon,\n    description: modules.emergencyPlansDisseminations,\n    disabled: true,\n  },\n  {\n    name: 'Activations',\n    path: '/activations',\n    icon: activationIcon,\n    description: modules.emergencyPlansActivations,\n    disabled: true,\n  },\n  {\n    name: 'Drills & Exercises',\n    path: '/drills',\n    icon: drillsAndExercisesIcon,\n    description: modules.emergencyPlansDrillsExercises,\n    disabled: true,\n  },\n];\n\n/**\n * @function\n * @name EmergencyPlans\n * @description Emergency Plans Home page component allow navigation to emergency\n * plans modules\n *\n * @param {Object} props props object\n * @param {Object} props.match match object inserted by react router\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst EmergencyPlans = ({ match }) => (\n  <NavigationMenu routes={routes} match={match} />\n);\n\n/* props validation */\nEmergencyPlans.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default EmergencyPlans;\n","import React from 'react';\nimport UIState from '../../components/UIState';\n\nconst EmergencyPlansActivationsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <UIState\n      icon=\"exclamation-circle\"\n      description=\"No Emergency Plans Activations yet,but when they are available will appear here\"\n      buttonLabel=\"New Plan\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default EmergencyPlansActivationsLayout;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  Connect,\n  postActivity,\n  putActivity,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Radio } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getItems, getPlans, getQuestionnaires, getRoles } = httpActions;\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name ActivityForm\n * @description Render Activity form for creating and updating activity activity details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ActivityForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    activity: PropTypes.shape({\n      name: PropTypes.string,\n      title: PropTypes.string,\n      abbreviation: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n    }).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      activity,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedActivity = Object.assign({}, activity, values);\n          putActivity(\n            updatedActivity,\n            () => {\n              notifySuccess('Activity was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating activity, please try again!'\n              );\n            }\n          );\n        } else {\n          postActivity(\n            values,\n            () => {\n              notifySuccess('Activity was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving activity, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      activity,\n      phases,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* activity plan select input */}\n        <Form.Item label=\"Plan\" {...formItemLayout}>\n          {getFieldDecorator('plan', {\n            initialValue: isEditForm\n              ? activity.plan._id // eslint-disable-line\n              : undefined,\n            rules: [{ required: true, message: 'Activity Plan is Required' }],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Activity Plan ...\"\n              onSearch={getPlans}\n              optionLabel={plan =>\n                `${plan.incidentType.name} (${plan.owner.name})`\n              }\n              optionValue=\"_id\"\n              initialValue={isEditForm ? activity.plan : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end activity plan select input */}\n\n        {/* activity name */}\n        <Form.Item {...formItemLayout} label=\"Activity Name\">\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: 'Activity Name is Required' }],\n            initialValue: isEditForm ? activity.name : undefined,\n          })(\n            <TextArea\n              autosize={{ minRows: 2, maxRows: 6 }}\n              placeholder=\"Enter Activity Name\"\n            />\n          )}\n        </Form.Item>\n        {/* end activity name */}\n\n        {/* activity description */}\n        <Form.Item {...formItemLayout} label=\"Activity Description\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? activity.description : undefined,\n          })(\n            <TextArea\n              autosize={{ minRows: 3, maxRows: 6 }}\n              placeholder=\"Enter Activity Description\"\n            />\n          )}\n        </Form.Item>\n        {/* end activity description */}\n\n        {/* activity phase */}\n        <Form.Item label=\"Phases\">\n          {getFieldDecorator('phase', {\n            rules: [{ required: true, message: 'Activity Phase is Required' }],\n            initialValue: isEditForm ? activity.phase : undefined,\n          })(\n            <Radio.Group>\n              {phases.map(phase => (\n                <Radio key={phase} value={phase}>\n                  {phase}\n                </Radio>\n              ))}\n            </Radio.Group>\n          )}\n        </Form.Item>\n        {/* end activity phase */}\n\n        {/* responsible roles select input */}\n        <Form.Item label=\"Primary Responsible Role(s)\" {...formItemLayout}>\n          {getFieldDecorator('primary', {\n            rules: [\n              {\n                required: true,\n                message: 'Please Select Responsible Role(s)',\n              },\n            ],\n            initialValue: isEditForm\n              ? map(activity.primary, role => role._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Role ...\"\n              mode=\"multiple\"\n              onSearch={getRoles}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? activity.primary : []}\n            />\n          )}\n        </Form.Item>\n        {/* end responsible roles select input */}\n\n        {/* responsible roles select input */}\n        <Form.Item label=\"Supportive Role(s)\" {...formItemLayout}>\n          {getFieldDecorator('supportive', {\n            initialValue: isEditForm\n              ? map(activity.supportive, role => role._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Role ...\"\n              mode=\"multiple\"\n              onSearch={getRoles}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? activity.supportive : []}\n            />\n          )}\n        </Form.Item>\n        {/* end responsible roles select input */}\n\n        {/* resource select input */}\n        <Form.Item label=\"Resources Needed\" {...formItemLayout}>\n          {getFieldDecorator('resources', {\n            initialValue: isEditForm\n              ? map(activity.resources, item => item._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Resources Needed ...\"\n              mode=\"multiple\"\n              onSearch={getItems}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? activity.resources : []}\n            />\n          )}\n        </Form.Item>\n        {/* end resource select input */}\n\n        {/* assessment select input */}\n        <Form.Item label=\"Assessment(s) to be performed\" {...formItemLayout}>\n          {getFieldDecorator('assessments', {\n            initialValue: isEditForm\n              ? map(activity.assessments, item => item._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Questionnaires ...\"\n              mode=\"multiple\"\n              onSearch={getQuestionnaires}\n              optionLabel=\"title\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? activity.assessments : []}\n            />\n          )}\n        </Form.Item>\n        {/* end assessment select input */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(ActivityForm), {\n  phases: 'activities.schema.properties.phase.enum',\n});\n","import {\n  clearActivityFilters,\n  Connect,\n  filterActivities,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name ActivitiesFilters\n * @description Filter modal component for filtering activities\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ActivitiesFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        phases: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterActivities(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearActivityFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      phases,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {/* start activity type filters */}\n        <Form.Item {...formItemLayout} label=\"By Activity type\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end activity type filters */}\n\n        {/* start emergency phase filters */}\n        <Form.Item {...formItemLayout} label=\"By Emergency Phases\">\n          {getFieldDecorator('phases', {\n            initialValue: filter ? filter.phases : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {phases.map(phase => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={phase}>\n                    <Checkbox value={phase}>{phase}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end emergency phase filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(ActivitiesFilters), {\n  types: 'activity.schema.properties.type.enum',\n  phases: 'activity.schema.properties.phases.enum',\n  filter: 'activity.filter',\n});\n","import {\n  paginateActivities,\n  refreshActivities,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name ActivitiesActionBar\n * @description Render action bar for actions which are applicable to list content\n *\n * @param {Object} props prop object\n * @param {number} props.page current results page number\n * @param {number} props.total total number of activities from the API\n * @param {Function} props.onNotify callback for notify action\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ActivitiesActionBar = ({\n  page,\n  total,\n  selectedItemCount,\n  // onFilter,\n  onNotify,\n}) => (\n  <div className=\"ActivitiesActionBar\">\n    <Row>\n      {/* bulk select action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n      {/* end bulk select action */}\n\n      {/* refresh activities action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh activities\"\n          onClick={() =>\n            refreshActivities(\n              () => {\n                notifySuccess('Activities refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing activities, please activity system administrator!'\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n      {/* end refresh activities action */}\n\n      {/* notify action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          type=\"circle\"\n          icon=\"mail\"\n          title={`Send Notification to${\n            selectedItemCount > 0 ? ' selected' : ''\n          } activities`}\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onNotify}\n        />\n      </Col>\n      {/* end notify action  */}\n\n      {/* export action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"cloud-download\"\n            title=\"Export selected activities\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end export action */}\n\n      {/* bulk share action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"share-alt\"\n            title=\"Share selected activities\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end bulk share action */}\n\n      {/* bulk archive action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"hdd\"\n            title=\"Archive selected activities\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end bulk archive action */}\n\n      {/* selected and activities number summary */}\n      <Col span={6} xl={{ span: 4, offset: 9 }} xxl={{ span: 5, offset: 9 }}>\n        {selectedItemCount > 0 && (\n          <span\n            style={{ color: '#c5c5c5' }}\n          >{`${selectedItemCount} out of `}</span>\n        )}\n        <span style={{ color: '#c5c5c5' }}>{`${total} activities`}</span>\n      </Col>\n      {/* end selected and activities number summary */}\n\n      {/* filter action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {/* <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter activities\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        /> */}\n      </Col>\n      {/* end filter action */}\n\n      {/* pagination */}\n      <Col span={1} xl={{ span: 4 }} xxl={{ span: 3 }}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateActivities(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n      {/* end pagination */}\n    </Row>\n  </div>\n);\n\n/* props validation */\nActivitiesActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  selectedItemCount: PropTypes.number.isRequired,\n  // onFilter: PropTypes.func.isRequired,\n  onNotify: PropTypes.func.isRequired,\n};\n\nexport default ActivitiesActionBar;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 7, header: 'Name', offset: 1 },\n  { span: 6, header: 'Incident Type' },\n  { span: 6, header: 'Phase' },\n];\n\nconst ActivitiesListHeader = () => (\n  <Row className=\"ActivityListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default ActivitiesListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport './styles.css';\n\n/**\n * @class\n * @name ActivitiesListItem\n * @description Single activity list item component. Render single activity details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ActivitiesListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    code: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    incidentType: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    match: PropTypes.shape({ url: PropTypes.string.isRequired }).isRequired,\n    name: PropTypes.string.isRequired,\n    phase: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle mouse enter into a list item event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description Handle mouse leave from list item event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle toggle list item checkbox\n   *\n   * @param {Object} event checkbox toggle event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  render() {\n    const {\n      id,\n      code,\n      color,\n      name,\n      incidentType,\n      description,\n      phase,\n      onEdit,\n      onArchive,\n      match,\n    } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = color || randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>{code}</Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"ActivitiesListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={7} title={description}>\n            {name}\n          </Col>\n          <Col span={6}>{incidentType}</Col>\n          <Col span={6}>{phase}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Link to={`${match.url}/${id}`}>\n                  <Icon\n                    type=\"bars\"\n                    title=\"View Plan Activities\"\n                    className=\"actionIcon\"\n                  />\n                </Link>\n\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Activity\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"share-alt\"\n                  title=\"Share Activity\"\n                  className=\"actionIcon\"\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Activity\"\n                  className=\"actionIcon\"\n                  onClick={onArchive}\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ActivitiesListItem);\n","import { deleteActivity } from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport ActivitiesActionBar from '../ActionBar';\nimport ActivitiesListHeader from '../ListHeader';\nimport ActivitiesListItem from '../ListItem';\n\n/**\n * @class\n * @name ActivitiesList\n * @description Render ActivitiesList component which have actionBar, activities header and\n * activities list components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ActivitiesList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    activities: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onNotify: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedActivities: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectActivity\n   * @description Handle select a single activity action\n   *\n   * @param {Object} activity activity object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectActivity = activity => {\n    const { selectedActivities } = this.state;\n    this.setState({\n      selectedActivities: concat([], selectedActivities, activity),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle selected all activities actions\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {};\n\n  /**\n   * @function\n   * @name handleFilterByStatus\n   * @description Handle filter activities by status action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleFilterByStatus = () => {\n    // if (status === 'All') {\n    //   filterActivities({});\n    // } else if (status === 'Active') {\n    //   filterActivities({});\n    // } else if (status === 'Archived') {\n    //   filterActivities({});\n    // }\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectActivity\n   * @description Handle deselect a single activity action\n   *\n   * @param {Object} activity activity object\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectActivity = activity => {\n    const { selectedActivities } = this.state;\n    const selectedList = [...selectedActivities];\n\n    remove(\n      selectedList,\n      item => item._id === activity._id // eslint-disable-line\n    );\n\n    this.setState({ selectedActivities: selectedList });\n  };\n\n  render() {\n    const {\n      activities,\n      loading,\n      page,\n      total,\n      onEdit,\n      onFilter,\n      onNotify,\n    } = this.props;\n    const { selectedActivities } = this.state;\n    const selectedActivitiesCount = this.state.selectedActivities.length;\n\n    return (\n      <Fragment>\n        {/* list action bar */}\n        <ActivitiesActionBar\n          total={total}\n          page={page}\n          onFilter={onFilter}\n          onNotify={() => {\n            onNotify(selectedActivities);\n          }}\n          selectedItemCount={selectedActivitiesCount}\n          onFilterByStatus={this.handleFilterByStatus}\n        />\n        {/* end action bar */}\n\n        {/* activity list header */}\n        <ActivitiesListHeader />\n        {/* end activity list header */}\n\n        {/* activities list */}\n        <List\n          loading={loading}\n          dataSource={activities}\n          renderItem={activity => (\n            <ActivitiesListItem\n              id={activity._id} // eslint-disable-line\n              key={activity._id} // eslint-disable-line\n              code={activity.incidentType.code}\n              color={activity.incidentType.color}\n              name={activity.name}\n              incidentType={activity.incidentType.name}\n              phase={activity.phase}\n              description={activity.description}\n              isSelected={\n                // eslint-disable-next-line\n                map(selectedActivities, item => item._id).includes(activity._id)\n              }\n              onSelectItem={() => {\n                this.handleOnSelectActivity(activity); // eslint-disable-line\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectActivity(activity); // eslint-disable-line\n              }}\n              onEdit={() => onEdit(activity)}\n              onArchive={() =>\n                deleteActivity(\n                  activity._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('Activity was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      'An Error occurred while archiving Activity please activity system administrator'\n                    );\n                  }\n                )\n              }\n            />\n          )}\n        />\n        {/* end activities list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default ActivitiesList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Form, Input } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\n\n/* constants */\nconst { getActivities } = httpActions;\nconst { TextArea } = Input;\n\nclass NotificationForm extends Component {\n  static propTypes = {\n    selectedActivities: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        abbreviation: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n      })\n    ).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const notification = {\n          to: {\n            _id: {\n              $in: values.recipients,\n            },\n          },\n          subject: values.subject,\n          body: values.body,\n        };\n\n        console.log(notification);\n      }\n    });\n  };\n\n  render() {\n    const {\n      onCancel,\n      form: { getFieldDecorator },\n      selectedActivities,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* notification recipients */}\n        <Form.Item {...formItemLayout} label=\"Recipients\">\n          {getFieldDecorator('recipients', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide at least one recipient',\n              },\n            ],\n            initialValue: map(selectedActivities, activity => activity._id), // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Enter notification recipients\"\n              onSearch={getActivities}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              mode=\"multiple\"\n              initialValue={selectedActivities}\n            />\n          )}\n        </Form.Item>\n        {/* end notification recipients */}\n\n        {/* notification subject */}\n        <Form.Item {...formItemLayout} label=\"Subject\">\n          {getFieldDecorator('subject', {\n            rules: [{ required: true, message: 'Activity time is required' }],\n          })(<Input placeholder=\"Applicable for Email notification only\" />)}\n        </Form.Item>\n        {/* notification subject */}\n\n        {/* notification body */}\n        <Form.Item {...formItemLayout} label=\"Message\">\n          {getFieldDecorator('body', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide notification message',\n              },\n            ],\n          })(\n            <TextArea\n              autosize={{ minRows: 6, maxRows: 10 }}\n              placeholder=\"Write notification message here ...\"\n            />\n          )}\n        </Form.Item>\n        {/* end notification body */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Send\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(NotificationForm);\n","import {\n  closeActivityForm,\n  Connect,\n  filterActivities,\n  getActivities,\n  openActivityForm,\n  searchActivities,\n  selectActivity,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport ActivityForm from './ActivityForm';\nimport ActivityFilters from './Filters';\nimport ActivitiesList from './List';\nimport NotificationForm from './NotificationForm';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name ActivitiesList\n * @description Render activity list which have search box, actions and activity list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Activities extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedActivities: [],\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    activities: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    activity: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n    match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n  };\n\n  static defaultProps = {\n    activity: null,\n  };\n\n  componentDidMount() {\n    const { match } = this.props;\n    if (match.params.planId) {\n      filterActivities({ plan: match.params.planId }); // eslint-disable-line\n    } else {\n      getActivities();\n    }\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description Open filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openActivityForm\n   * @description Open activity form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openActivityForm = () => {\n    openActivityForm();\n  };\n\n  /**\n   * @function\n   * @name openActivityForm\n   * @description close activity form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeActivityForm = () => {\n    closeActivityForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchActivities\n   * @description Search Activities List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchActivities = event => {\n    searchActivities(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} activity activity object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = activity => {\n    selectActivity(activity);\n    this.setState({ isEditForm: true });\n    openActivityForm();\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify activities\n   *\n   * @param {Object[]} activities activities list\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = activities => {\n    this.setState({\n      selectedActivities: activities,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify activities\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Reset isEditForm state to false when modal is closed\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      activities,\n      activity,\n      loading,\n      posting,\n      page,\n      showForm,\n      total,\n    } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedActivities,\n    } = this.state;\n    return (\n      <div className=\"ActivitiesList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for activities here ...\"\n              onChange={this.searchActivities}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* <Col span={3} offset={1}>\n            <Select\n              defaultValue=\"Active\"\n              style={{ width: 120 }}\n              size=\"large\"\n              type=\"primary\"\n            >\n              <Option value=\"All\">All</Option>\n              <Option value=\"Active\">Active</Option>\n              <Option value=\"Archived\">Archived</Option>\n            </Select>\n          </Col> */}\n\n          {/* primary actions */}\n          <Col span={2} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Activity\"\n              onClick={this.openActivityForm}\n            >\n              New Activity\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list starts */}\n        <ActivitiesList\n          total={total}\n          page={page}\n          activities={activities}\n          loading={loading}\n          onEdit={this.handleEdit}\n          onFilter={this.openFiltersModal}\n          onNotify={this.openNotificationForm}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Activities\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <ActivityFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* Notification Modal modal */}\n        <Modal\n          title=\"Notify Activities\"\n          visible={showNotificationForm}\n          onCancel={this.closeNotificationForm}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n          width=\"40%\"\n        >\n          <NotificationForm\n            onCancel={this.closeNotificationForm}\n            selectedActivities={selectedActivities}\n          />\n        </Modal>\n        {/* end Notification modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Activity' : 'Add New Activity'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeActivityForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <ActivityForm\n            posting={posting}\n            isEditForm={isEditForm}\n            activity={activity}\n            onCancel={this.closeActivityForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(withRouter(Activities), {\n  activities: 'activities.list',\n  activity: 'activities.selected',\n  loading: 'activities.loading',\n  posting: 'activities.posting',\n  page: 'activities.page',\n  showForm: 'activities.showForm',\n  total: 'activities.total',\n  activePlan: 'plans.selected',\n});\n","import React from 'react';\nimport Activities from '../components/Activities';\n\nconst EmergencyPlansActivitiesLayout = () => <Activities />;\n\nexport default EmergencyPlansActivitiesLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst EmergencyPlansDisseminationsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Emergency Plans Dissemination yet,but when they are available will appear here\"\n      buttonLabel=\"New Plan\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default EmergencyPlansDisseminationsLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst EmergencyPlansDrillsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Drills yet,but when they are available will appear here\"\n      buttonLabel=\"New Plan\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default EmergencyPlansDrillsLayout;\n","import {\n  clearPlanFilters,\n  Connect,\n  filterPlans,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name PlansFilters\n * @description Filter modal component for filtering plans\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass PlansFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        phases: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterPlans(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearPlanFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      phases,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {/* start plan type filters */}\n        <Form.Item {...formItemLayout} label=\"By Plan type\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end plan type filters */}\n\n        {/* start emergency phase filters */}\n        <Form.Item {...formItemLayout} label=\"By Emergency Phases\">\n          {getFieldDecorator('phases', {\n            initialValue: filter ? filter.phases : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {phases.map(phase => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={phase}>\n                    <Checkbox value={phase}>{phase}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end emergency phase filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(PlansFilters), {\n  types: 'plans.schema.properties.type.enum',\n  phases: 'plans.schema.properties.phases.enum',\n  filter: 'plans.filter',\n});\n","import { paginatePlans, refreshPlans } from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name PlansActionBar\n * @description Render action bar for actions which are applicable to list content\n *\n * @param {Object} props props object\n * @param {number} props.page current page number\n * @param {number} props.total total number of plans from the API\n * @param {number} props.selectedItemCount total nunmber of selected plans\n * @param {boolean} props.isGridLayout flag to indicate if the view is grid or list\n * @param {Function} props.onNotify callback for notify action\n * @param {Function} props.onToggleLayout callback for toggling grid and list\n * layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst PlansActionBar = ({\n  page,\n  total,\n  selectedItemCount,\n  isGridLayout,\n  onNotify,\n  onToggleLayout,\n}) => (\n  <div className=\"PlansActionBar\">\n    <Row>\n      {/* bulk select action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n      {/* end bulk select action */}\n\n      {/* refresh plans action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh plans\"\n          onClick={() =>\n            refreshPlans(\n              () => {\n                notifySuccess('Plans refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing plans, please plan system administrator!'\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n      {/* end refresh plans action */}\n\n      {/* notify action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          type=\"circle\"\n          icon=\"sound\"\n          title={`Disseminate plan to${\n            selectedItemCount > 0 ? ' selected' : ''\n          } activity`}\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onNotify}\n        />\n      </Col>\n      {/* end notify action  */}\n\n      {/* export action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"cloud-download\"\n            title=\"Export selected plans\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end export action */}\n\n      {/* bulk share action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"share-alt\"\n            title=\"Share selected plans\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end bulk share action */}\n\n      {/* bulk archive action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"hdd\"\n            title=\"Archive selected plans\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end bulk archive action */}\n\n      {/* selected and plans number summary */}\n      <Col span={5} xl={{ span: 4, offset: 8 }} xxl={{ span: 5, offset: 8 }}>\n        {selectedItemCount > 0 && (\n          <span\n            style={{ color: '#c5c5c5' }}\n          >{`${selectedItemCount} out of `}</span>\n        )}\n        <span style={{ color: '#c5c5c5' }}>{`${total} plans`}</span>\n      </Col>\n      {/* end selected and plans number summary */}\n\n      {/* filter action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {/* <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter plans\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        /> */}\n      </Col>\n      {/* end filter action */}\n\n      {/* switch list layout action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          type=\"circle\"\n          icon={isGridLayout ? 'bars' : 'appstore'}\n          title=\"Switch plans layout to grid\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onToggleLayout}\n        />\n      </Col>\n      {/* end switch list layout action */}\n\n      {/* pagination */}\n      <Col span={1} xl={{ span: 4 }} xxl={{ span: 3 }}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          current={page}\n          total={total}\n          onChange={nextPage => paginatePlans(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n      {/* end pagination */}\n    </Row>\n  </div>\n);\n\n/* props validation */\nPlansActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  isGridLayout: PropTypes.bool.isRequired,\n  selectedItemCount: PropTypes.number.isRequired,\n  onNotify: PropTypes.func.isRequired,\n  onToggleLayout: PropTypes.func.isRequired,\n};\n\nexport default PlansActionBar;\n","import { Badge, Button, Card, Col, Popover, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport './styles.css';\n\n/**\n * @function\n * @name PlanOptions\n * @description Plan Options\n *\n * @param {Object} props props object\n * @param {Function} props.onEditPlan callback for edit action\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst PlanOptions = ({ onEditPlan }) => (\n  <Fragment>\n    <div>\n      <Button icon=\"poweroff\" className=\"b-0\">\n        Activate\n      </Button>\n    </div>\n    <div>\n      <Button icon=\"sound\" className=\"b-0\">\n        Disseminate\n      </Button>\n    </div>\n    <div>\n      <Button icon=\"edit\" className=\"b-0\" onClick={onEditPlan}>\n        Edit Plan\n      </Button>\n    </div>\n    <div>\n      <Button icon=\"hdd\" className=\"b-0\">\n        Archive Plan\n      </Button>\n    </div>\n  </Fragment>\n);\n\n/**\n * @class\n * @name PlansGridListItem\n * @description Plan card component\n * A card component renders in plan list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass PlansGridListItem extends Component {\n  state = { showPopover: false };\n\n  static propTypes = {\n    activityCount: PropTypes.number,\n    color: PropTypes.string,\n    description: PropTypes.string,\n    family: PropTypes.string,\n    id: PropTypes.string.isRequired,\n    incidentType: PropTypes.string.isRequired,\n    jurisdiction: PropTypes.string.isRequired,\n    level: PropTypes.string.isRequired,\n    match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n    nature: PropTypes.string,\n    onEditPlan: PropTypes.func.isRequired,\n    owner: PropTypes.string,\n    updatedAt: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    activityCount: 0,\n    color: '#0071fc',\n    nature: 'N/A',\n    family: 'N/A',\n    owner: 'N/A',\n    description: '',\n  };\n\n  /**\n   * @function\n   * @name handlePopoverVisibilityChange\n   * @description Handle popover visibility change\n   *\n   * @param {boolean} isVisible flag for showing popover component\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handlePopoverVisibilityChange = isVisible => {\n    this.setState({ showPopover: isVisible });\n  };\n\n  /**\n   * @function\n   * @name handleHidePopover\n   * @description Handle hide popover component\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleHidePopover = () => {\n    this.setState({ showPopover: false });\n  };\n\n  /**\n   * @function\n   * @name handleEditPlan\n   * @description Handle edit plan action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEditPlan = () => {\n    const { onEditPlan } = this.props;\n    onEditPlan();\n    this.handleHidePopover();\n  };\n\n  /**\n   * @function\n   * @name handleDisseminatePlan\n   * @description Handle disseminate plan action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDisseminatePlan = () => {\n    this.handleHidePopover();\n  };\n\n  /**\n   * @function\n   * @name handleActivatePlan\n   * @description Handle activate plan action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleActivatePlan = () => {\n    this.handleHidePopover();\n  };\n\n  render() {\n    const { showPopover } = this.state;\n\n    const {\n      id,\n      incidentType,\n      jurisdiction,\n      level,\n      description,\n      match,\n      nature,\n      family,\n      owner,\n      activityCount,\n      color,\n      updatedAt,\n    } = this.props;\n\n    return (\n      <Card\n        className=\"PlansGridListItem\"\n        style={{\n          borderLeft: `3px solid ${color}`,\n          padding: 0,\n        }}\n      >\n        <Link to={`${match.url}/${id}`} title={description}>\n          <Row justify=\"space-between\">\n            <Col span={21} xl={18} xxl={20}>\n              <h3 title={incidentType}>{incidentType}</h3>\n              <p\n                className=\"subtitle\"\n                style={{ fontSize: '11px', color: '#0092df' }}\n              >\n                {`${nature} > ${family}`}\n              </p>\n              <p className=\"subtitle\">{`Area: ${jurisdiction} (${level})`}</p>\n              <p className=\"subtitle\">{`Created by: ${owner}`}</p>\n            </Col>\n            <Col span={3} xl={6} xxl={4} className=\"activitiesBadge\">\n              <Badge\n                count={activityCount}\n                style={{\n                  backgroundColor: '#fff',\n                  color: '#999',\n                  boxShadow: '0 0 0 1px #d9d9d9 inset',\n                }}\n              />\n              <p className=\"activitiesBadgeTitle\">Activities</p>\n            </Col>\n          </Row>\n          <p className=\"subtitle\">\n            Last Review Date:{' '}\n            {new Intl.DateTimeFormat('en-GB').format(new Date(updatedAt))}\n          </p>\n        </Link>\n        <Popover\n          content={<PlanOptions onEditPlan={this.handleEditPlan} />}\n          trigger=\"hover\"\n          placement=\"bottomRight\"\n          visible={showPopover}\n          onVisibleChange={this.handlePopoverVisibilityChange}\n        >\n          <Button icon=\"ellipsis\" className=\"ActionButton\" />\n        </Popover>\n      </Card>\n    );\n  }\n}\n\nPlanOptions.propTypes = {\n  onEditPlan: PropTypes.func.isRequired,\n};\n\nexport default withRouter(PlansGridListItem);\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 5, header: 'Plan For', offset: 1 },\n  { span: 9, header: 'Plan By' },\n  { span: 4, header: 'Location' },\n];\n\nconst PlansListHeader = () => (\n  <Row className=\"PlanListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default PlansListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport './styles.css';\n\n/**\n * @class\n * @name PlansListItem\n * @description Single plan list item component. Render single plan details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass PlansListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    boundary: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    color: PropTypes.string,\n    incidentType: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n    match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n  };\n\n  static defaultProps = {\n    color: undefined,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle mouse enter list item event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description Handle mouse leave list item event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle toggle select checkbox for list item\n   *\n   * @param {Object} event Toggle checkbox event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  render() {\n    const {\n      boundary,\n      code,\n      color,\n      incidentType,\n      id,\n      owner,\n      onEdit,\n      onArchive,\n      match,\n    } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = color || randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>{code}</Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"PlansListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={5}>{incidentType}</Col>\n          <Col span={9}>{owner}</Col>\n          <Col span={4}>{boundary}</Col>\n          <Col span={5}>\n            {isHovered && (\n              <Fragment>\n                <Link to={`${match.url}/${id}`}>\n                  <Icon\n                    type=\"bars\"\n                    title=\"View Plan Activities\"\n                    className=\"actionIcon\"\n                  />\n                </Link>\n\n                <Icon\n                  type=\"sound\"\n                  title=\"Disseminate Plan\"\n                  className=\"actionIcon\"\n                />\n                <Icon\n                  type=\"poweroff\"\n                  title=\"Activate Plan\"\n                  className=\"actionIcon\"\n                />\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Plan\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Plan\"\n                  className=\"actionIcon\"\n                  onClick={onArchive}\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(PlansListItem);\n","import { deletePlan } from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport PlansActionBar from '../ActionBar';\nimport PlansGridListItem from '../GridListItem';\nimport PlansListHeader from '../ListHeader';\nimport PlansListItem from '../ListItem';\n\n/**\n * @class\n * @name PlansList\n * @description Render PlansList component which have actionBar, plans header and\n * plans list components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass PlansList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    plans: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onNotify: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedPlans: [],\n    isGridLayout: false,\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectPlan\n   * @description Handle select a single plan action\n   *\n   * @param {Object} plan plan object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectPlan = plan => {\n    const { selectedPlans } = this.state;\n    this.setState({ selectedPlans: concat([], selectedPlans, plan) });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle selected all plans actions\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {};\n\n  /**\n   * @function\n   * @name handleFilterByStatus\n   * @description Handle filter plans by status action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleFilterByStatus = () => {\n    // if (status === 'All') {\n    //   filterPlans({});\n    // } else if (status === 'Active') {\n    //   filterPlans({});\n    // } else if (status === 'Archived') {\n    //   filterPlans({});\n    // }\n  };\n\n  /**\n   * @function\n   * @name handleToggleLayout\n   * @description Function for switching layout between list and grid plan layout\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleLayout = () => {\n    this.setState(previousState => ({\n      isGridLayout: !previousState.isGridLayout,\n    }));\n  };\n\n  /**\n   * Handle deselect a single plan action\n   *\n   * @function\n   * @name handleOnDeselectPlan\n   *\n   * @param {Object} plan plan object\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectPlan = plan => {\n    const { selectedPlans } = this.state;\n    const selectedList = [...selectedPlans];\n\n    remove(\n      selectedList,\n      item => item._id === plan._id // eslint-disable-line\n    );\n\n    this.setState({ selectedPlans: selectedList });\n  };\n\n  render() {\n    const {\n      plans,\n      loading,\n      page,\n      total,\n      onEdit,\n      onFilter,\n      onNotify,\n    } = this.props;\n    const { selectedPlans, isGridLayout } = this.state;\n    const selectedPlansCount = this.state.selectedPlans.length;\n\n    return (\n      <Fragment>\n        {/*  action bar */}\n        <PlansActionBar\n          total={total}\n          page={page}\n          onFilter={onFilter}\n          onNotify={() => {\n            onNotify(selectedPlans);\n          }}\n          selectedItemCount={selectedPlansCount}\n          isGridLayout={isGridLayout}\n          onFilterByStatus={this.handleFilterByStatus}\n          onToggleLayout={this.handleToggleLayout}\n        />\n        {/* end action bar */}\n\n        {isGridLayout ? (\n          <List\n            grid={{ gutter: 10, xs: 1, sm: 2, md: 3, lg: 3, xl: 3, xxl: 4 }}\n            dataSource={plans}\n            loading={loading}\n            renderItem={plan => (\n              <List.Item>\n                <PlansGridListItem\n                  id={plan._id} // eslint-disable-line\n                  incidentType={plan.incidentType.name}\n                  jurisdiction={plan.boundary.name}\n                  level={plan.boundary.level}\n                  owner={plan.owner.name}\n                  description={plan.description}\n                  nature={plan.incidentType.nature}\n                  family={plan.incidentType.family}\n                  updatedAt={plan.updatedAt}\n                  color={plan.incidentType.color}\n                  activityCount={20}\n                  onEditPlan={() => {\n                    this.handleOpenPlanEditForm(plan);\n                  }}\n                />\n              </List.Item>\n            )}\n          />\n        ) : (\n          <Fragment>\n            {/* plan list header */}\n            <PlansListHeader />\n            {/* end plan list header */}\n\n            {/* plan list */}\n            <List\n              loading={loading}\n              dataSource={plans}\n              renderItem={plan => (\n                <PlansListItem\n                  id={plan._id} // eslint-disable-line\n                  key={plan._id} // eslint-disable-line\n                  code={plan.incidentType.code}\n                  color={plan.incidentType.color}\n                  incidentType={plan.incidentType.name}\n                  owner={plan.owner.name}\n                  boundary={plan.boundary.name}\n                  isSelected={\n                    // eslint-disable-next-line\n                    map(selectedPlans, item => item._id).includes(plan._id)\n                  }\n                  onSelectItem={() => {\n                    this.handleOnSelectPlan(plan);\n                  }}\n                  onDeselectItem={() => {\n                    this.handleOnDeselectPlan(plan);\n                  }}\n                  onEdit={() => onEdit(plan)}\n                  onArchive={() =>\n                    deletePlan(\n                      plan._id, // eslint-disable-line\n                      () => {\n                        notifySuccess('Plan was archived successfully');\n                      },\n                      () => {\n                        notifyError(\n                          'An Error occurred while archiving Plan please plan system administrator'\n                        );\n                      }\n                    )\n                  }\n                />\n              )}\n            />\n            {/* // end plans list */}\n          </Fragment>\n        )}\n      </Fragment>\n    );\n  }\n}\n\nexport default PlansList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Form, Input } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\n\n/* constants */\nconst { getPlans } = httpActions;\nconst { TextArea } = Input;\n\nclass NotificationForm extends Component {\n  static propTypes = {\n    selectedPlans: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        abbreviation: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n      })\n    ).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const notification = {\n          to: {\n            _id: {\n              $in: values.recipients,\n            },\n          },\n          subject: values.subject,\n          body: values.body,\n        };\n\n        console.log(notification);\n      }\n    });\n  };\n\n  render() {\n    const {\n      onCancel,\n      form: { getFieldDecorator },\n      selectedPlans,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* notification recipients */}\n        <Form.Item {...formItemLayout} label=\"Recipients\">\n          {getFieldDecorator('recipients', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide at least one recipient',\n              },\n            ],\n            initialValue: map(selectedPlans, plan => plan._id), // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Enter notification recipients\"\n              onSearch={getPlans}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              mode=\"multiple\"\n              initialValue={selectedPlans}\n            />\n          )}\n        </Form.Item>\n        {/* end notification recipients */}\n\n        {/* notification subject */}\n        <Form.Item {...formItemLayout} label=\"Subject\">\n          {getFieldDecorator('subject', {\n            rules: [{ required: true, message: 'Plan time is required' }],\n          })(<Input placeholder=\"Applicable for Email notification only\" />)}\n        </Form.Item>\n        {/* notification subject */}\n\n        {/* notification body */}\n        <Form.Item {...formItemLayout} label=\"Message\">\n          {getFieldDecorator('body', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide notification message',\n              },\n            ],\n          })(\n            <TextArea\n              autosize={{ minRows: 6, maxRows: 10 }}\n              placeholder=\"Write notification message here ...\"\n            />\n          )}\n        </Form.Item>\n        {/* end notification body */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Send\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(NotificationForm);\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { postPlan, putPlan } from '@codetanzania/emis-api-states';\nimport { Button, Form } from 'antd';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getFeatures, getIncidentTypes, getFocalPeople } = httpActions;\n\n/**\n * @class\n * @name PlanForm\n * @description Render Plan form for creating and updating plan plan details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass PlanForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    plan: PropTypes.shape({\n      name: PropTypes.string,\n      title: PropTypes.string,\n      abbreviation: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      plan,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedPlan = Object.assign({}, plan, values);\n          putPlan(\n            updatedPlan,\n            () => {\n              notifySuccess('Plan was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating plan, please try again!'\n              );\n            }\n          );\n        } else {\n          postPlan(\n            values,\n            () => {\n              notifySuccess('Plan was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving plan, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      plan,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* plan incident type */}\n        <Form.Item label=\"Incident Type\" {...formItemLayout}>\n          {getFieldDecorator('incidentType', {\n            rules: [\n              {\n                required: true,\n                message: 'Please Select Plan Incident Type',\n              },\n            ],\n            initialValue: isEditForm ? plan.incidentType._id : undefined, //eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Incident Type ...\"\n              onSearch={getIncidentTypes}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? plan.incidentType : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end plan incident type */}\n\n        {/* plan owner */}\n        <Form.Item label=\"Owner\" {...formItemLayout}>\n          {getFieldDecorator('owner', {\n            rules: [\n              {\n                required: true,\n                message: 'Please Select the Plan Owner',\n              },\n            ],\n            initialValue: isEditForm ? plan.owner._id : undefined, //eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Plan Owner ...\"\n              onSearch={getFocalPeople}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? plan.owner : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end plan owner */}\n\n        {/* plan boundary input */}\n        <Form.Item label=\"Plan Applicable Area\" {...formItemLayout}>\n          {getFieldDecorator('boundary', {\n            rules: [\n              {\n                required: true,\n                message: 'Please Select the Plan Applicable Area',\n              },\n            ],\n            initialValue: isEditForm ? plan.boundary._id : undefined, // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Plan Boundary ...\"\n              onSearch={getFeatures}\n              optionValue=\"_id\"\n              optionLabel={feature =>\n                `${feature.name} (${upperFirst(feature.type)})`\n              }\n              initialValue={isEditForm ? plan.boundary : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end plan boundary input */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(PlanForm);\n","import {\n  closePlanForm,\n  Connect,\n  getPlans,\n  openPlanForm,\n  searchPlans,\n  selectPlan,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport PlanFilters from './Filters';\nimport PlansList from './List';\nimport NotificationForm from './NotificationForm';\nimport PlanForm from './PlanForm';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name PlansList\n * @description Render plan list which have search box, actions and plan list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Plans extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedPlans: [],\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    plans: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    plan: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    plan: null,\n  };\n\n  componentDidMount() {\n    getPlans();\n  }\n\n  /**\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to false\n   * via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openPlanForm\n   * @description Open plan form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openPlanForm = () => {\n    openPlanForm();\n  };\n\n  /**\n   * @function\n   * @name openPlanForm\n   * @description close plan form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closePlanForm = () => {\n    closePlanForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchPlans\n   * @description Search Plans List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchPlans = event => {\n    searchPlans(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} plan plan object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = plan => {\n    selectPlan(plan);\n    this.setState({ isEditForm: true });\n    openPlanForm();\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify plans\n   *\n   * @param {Object[]} plans list of plans objects\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = plans => {\n    this.setState({\n      selectedPlans: plans,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify plans\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Reset isEditForm state to false after closing modal window\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const { plans, plan, loading, posting, page, showForm, total } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedPlans,\n    } = this.state;\n    return (\n      <div className=\"PlansList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for plans here ...\"\n              onChange={this.searchPlans}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* primary actions */}\n          <Col span={2} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Plan\"\n              onClick={this.openPlanForm}\n            >\n              New Plan\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list starts */}\n        <PlansList\n          total={total}\n          page={page}\n          plans={plans}\n          loading={loading}\n          onEdit={this.handleEdit}\n          onFilter={this.openFiltersModal}\n          onNotify={this.openNotificationForm}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Plans\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <PlanFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* Notification Modal modal */}\n        <Modal\n          title=\"Notify Plans\"\n          visible={showNotificationForm}\n          onCancel={this.closeNotificationForm}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n          width=\"40%\"\n        >\n          <NotificationForm\n            onCancel={this.closeNotificationForm}\n            selectedPlans={selectedPlans}\n          />\n        </Modal>\n        {/* end Notification modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Plan' : 'Add New Plan'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closePlanForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <PlanForm\n            posting={posting}\n            isEditForm={isEditForm}\n            plan={plan}\n            onCancel={this.closePlanForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Plans, {\n  plans: 'plans.list',\n  plan: 'plans.selected',\n  loading: 'plans.loading',\n  posting: 'plans.posting',\n  page: 'plans.page',\n  showForm: 'plans.showForm',\n  total: 'plans.total',\n});\n","import React from 'react';\nimport EmergencyPlansPlanner from '../components/Planner';\n\nconst EmergencyPlansPlannerLayout = () => <EmergencyPlansPlanner />;\n\nexport default EmergencyPlansPlannerLayout;\n","import {\n  clearProcedureFilters,\n  Connect,\n  filterProcedures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name ProceduresFilters\n * @description Filter modal component for filtering procedures\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ProceduresFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        phases: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    phases: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterProcedures(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearProcedureFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      phases,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {/* start procedure type filters */}\n        <Form.Item {...formItemLayout} label=\"By Procedure type\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end procedure type filters */}\n\n        {/* start emergency phase filters */}\n        <Form.Item {...formItemLayout} label=\"By Emergency Phases\">\n          {getFieldDecorator('phases', {\n            initialValue: filter ? filter.phases : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {phases.map(phase => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={phase}>\n                    <Checkbox value={phase}>{phase}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end emergency phase filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(ProceduresFilters), {\n  types: 'procedures.schema.properties.type.enum',\n  phases: 'procedures.schema.properties.phases.enum',\n  filter: 'procedures.filter',\n});\n","import {\n  paginateProcedures,\n  refreshProcedures,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Pagination, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name ProceduresActionBar\n * @description Render action bar for actions which are applicable to list content\n *\n * @param {Object} props props object\n * @param {number} props.page current page number\n * @param {number} props.total total number of procedures in the API\n * @param {Function} props.onNotify callback for notify action\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ProceduresActionBar = ({\n  page,\n  total,\n  selectedItemCount,\n  // onFilter,\n  onNotify,\n}) => (\n  <div className=\"ProceduresActionBar\">\n    <Row>\n      {/* bulk select action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }} className=\"checkbox\">\n        <Checkbox />\n      </Col>\n      {/* end bulk select action */}\n\n      {/* refresh procedures action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          shape=\"circle\"\n          icon=\"reload\"\n          title=\"Refresh procedures\"\n          onClick={() =>\n            refreshProcedures(\n              () => {\n                notifySuccess('Procedures refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing procedures, please procedure system administrator!'\n                );\n              }\n            )\n          }\n          className=\"actionButton\"\n          size=\"large\"\n        />\n      </Col>\n      {/* end refresh procedures action */}\n\n      {/* notify action */}\n      <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n        <Button\n          type=\"circle\"\n          icon=\"mail\"\n          title={`Send Notification to${\n            selectedItemCount > 0 ? ' selected' : ''\n          } procedures`}\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onNotify}\n        />\n      </Col>\n      {/* end notify action  */}\n\n      {/* export action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"cloud-download\"\n            title=\"Export selected procedures\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end export action */}\n\n      {/* bulk share action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"share-alt\"\n            title=\"Share selected procedures\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end bulk share action */}\n\n      {/* bulk archive action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {selectedItemCount > 0 && (\n          <Button\n            type=\"circle\"\n            icon=\"hdd\"\n            title=\"Archive selected procedures\"\n            className=\"actionButton\"\n            size=\"large\"\n          />\n        )}\n      </Col>\n      {/* end bulk archive action */}\n\n      {/* selected and procedures number summary */}\n      <Col span={6} xl={{ span: 4, offset: 9 }} xxl={{ span: 5, offset: 9 }}>\n        {selectedItemCount > 0 && (\n          <span\n            style={{ color: '#c5c5c5' }}\n          >{`${selectedItemCount} out of `}</span>\n        )}\n        <span style={{ color: '#c5c5c5' }}>{`${total} procedures`}</span>\n      </Col>\n      {/* end selected and procedures number summary */}\n\n      {/* filter action */}\n      <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n        {/* <Button\n          type=\"circle\"\n          icon=\"filter\"\n          title=\"Filter procedures\"\n          className=\"actionButton\"\n          size=\"large\"\n          onClick={onFilter}\n        /> */}\n      </Col>\n      {/* end filter action */}\n\n      {/* pagination */}\n      <Col span={1} xl={{ span: 4 }} xxl={{ span: 3 }}>\n        <Pagination\n          simple\n          defaultCurrent={page}\n          total={total}\n          onChange={nextPage => paginateProcedures(nextPage)}\n          className=\"pagination\"\n        />\n      </Col>\n      {/* end pagination */}\n    </Row>\n  </div>\n);\n\n/* props validation */\nProceduresActionBar.propTypes = {\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  selectedItemCount: PropTypes.number.isRequired,\n  // onFilter: PropTypes.func.isRequired,\n  onNotify: PropTypes.func.isRequired,\n};\n\nexport default ProceduresActionBar;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport './styles.css';\n\nconst headerLayout = [\n  { span: 6, header: 'Name', offset: 1 },\n  { span: 5, header: 'Activity' },\n  { span: 2, header: 'Incident Type' },\n  { span: 2, header: 'SOP Phase' },\n  { span: 5, header: 'SOP owner' },\n];\n\nconst ProceduresListHeader = () => (\n  <Row className=\"ProcedureListHeader\">\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\nexport default ProceduresListHeader;\n","import { Avatar, Checkbox, Col, Icon, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component, Fragment } from 'react';\nimport './styles.css';\n\n/**\n * @class\n * @name ProceduresListItem\n * @description Single procedure list item component. Render single procedure details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ProceduresListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    activity: PropTypes.string.isRequired,\n    code: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    incidentType: PropTypes.string.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    name: PropTypes.string.isRequired,\n    owner: PropTypes.string.isRequired,\n    phase: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on mouse enter list item event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description Handle on mouse leave list item event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle toggle select checkbox for a list item\n   *\n   * @param {Object} event Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  render() {\n    const {\n      code,\n      color,\n      name,\n      description,\n      activity,\n      incidentType,\n      owner,\n      phase,\n      onEdit,\n      onArchive,\n    } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = color || randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>{code}</Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"ProceduresListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={6} title={description}>\n            {name}\n          </Col>\n          <Col span={5}>{activity}</Col>\n          <Col span={2}>{incidentType}</Col>\n          <Col span={2}>{phase}</Col>\n          <Col span={5}>{owner}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <Fragment>\n                <Icon\n                  type=\"edit\"\n                  title=\"Update Procedure\"\n                  className=\"actionIcon\"\n                  onClick={onEdit}\n                />\n                <Icon\n                  type=\"share-alt\"\n                  title=\"Share Procedure\"\n                  className=\"actionIcon\"\n                />\n                <Icon\n                  type=\"database\"\n                  title=\"Archive Procedure\"\n                  className=\"actionIcon\"\n                  onClick={onArchive}\n                />\n              </Fragment>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ProceduresListItem;\n","import { deleteProcedure } from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport ProceduresActionBar from '../ActionBar';\nimport ProceduresListHeader from '../ListHeader';\nimport ProceduresListItem from '../ListItem';\n\n/**\n * @class\n * @name ProceduresList\n * @description Render ProceduresList component which have actionBar, procedures header and\n * procedures list components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ProceduresList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    procedures: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onNotify: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedProcedures: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectProcedure\n   * @description Handle select a single procedure action\n   *\n   * @param {Object} procedure procedure object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectProcedure = procedure => {\n    const { selectedProcedures } = this.state;\n    this.setState({\n      selectedProcedures: concat([], selectedProcedures, procedure),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle selected all procedures actions\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {};\n\n  /**\n   * @function\n   * @name handleFilterByStatus\n   * @description Handle filter procedures by status action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleFilterByStatus = () => {\n    // if (status === 'All') {\n    //   filterProcedures({});\n    // } else if (status === 'Active') {\n    //   filterProcedures({});\n    // } else if (status === 'Archived') {\n    //   filterProcedures({});\n    // }\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectProcedure\n   * @description Handle deselect a single procedure action\n   *\n   * @param {Object} procedure procedure object\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectProcedure = procedure => {\n    const { selectedProcedures } = this.state;\n    const selectedList = [...selectedProcedures];\n\n    remove(\n      selectedList,\n      item => item._id === procedure._id // eslint-disable-line\n    );\n\n    this.setState({ selectedProcedures: selectedList });\n  };\n\n  render() {\n    const {\n      procedures,\n      loading,\n      page,\n      total,\n      onEdit,\n      onFilter,\n      onNotify,\n    } = this.props;\n    const { selectedProcedures } = this.state;\n    const selectedProceduresCount = this.state.selectedProcedures.length;\n\n    return (\n      <Fragment>\n        {/* list action bar */}\n        <ProceduresActionBar\n          total={total}\n          page={page}\n          onFilter={onFilter}\n          onNotify={() => {\n            onNotify(selectedProcedures);\n          }}\n          selectedItemCount={selectedProceduresCount}\n          onFilterByStatus={this.handleFilterByStatus}\n        />\n        {/* end action bar */}\n\n        {/* procedure list header */}\n        <ProceduresListHeader />\n        {/* end procedure list header */}\n\n        {/* procedures list */}\n        <List\n          loading={loading}\n          dataSource={procedures}\n          renderItem={procedure => (\n            <ProceduresListItem\n              key={procedure._id} // eslint-disable-line\n              name={procedure.name}\n              code={procedure.incidentType.code}\n              color={procedure.incidentType.color}\n              phase={procedure.phase}\n              incidentType={procedure.incidentType.name}\n              activity={procedure.activity.name}\n              owner={procedure.plan.owner.name}\n              description={procedure.description}\n              isSelected={\n                // eslint-disable-next-line\n                map(selectedProcedures, item => item._id).includes(\n                  procedure._id // eslint-disable-line\n                )\n              }\n              onSelectItem={() => {\n                this.handleOnSelectProcedure(procedure); // eslint-disable-line\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectProcedure(procedure); // eslint-disable-line\n              }}\n              onEdit={() => onEdit(procedure)}\n              onArchive={() =>\n                deleteProcedure(\n                  procedure._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('Procedure was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      'An Error occurred while archiving Procedure please procedure system administrator'\n                    );\n                  }\n                )\n              }\n            />\n          )}\n        />\n        {/* end procedures list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default ProceduresList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Form, Input } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\n\n/* constants */\nconst { getProcedures } = httpActions;\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name NotificationForm\n * @description Notification form for procedures\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass NotificationForm extends Component {\n  static propTypes = {\n    selectedProcedures: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        abbreviation: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n      })\n    ).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle Notify action\n   *\n   * @param {Object} event OnSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const notification = {\n          to: {\n            _id: {\n              $in: values.recipients,\n            },\n          },\n          subject: values.subject,\n          body: values.body,\n        };\n\n        console.log(notification);\n      }\n    });\n  };\n\n  render() {\n    const {\n      onCancel,\n      form: { getFieldDecorator },\n      selectedProcedures,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* notification recipients */}\n        <Form.Item {...formItemLayout} label=\"Recipients\">\n          {getFieldDecorator('recipients', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide at least one recipient',\n              },\n            ],\n            initialValue: map(selectedProcedures, procedure => procedure._id), // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Enter notification recipients\"\n              onSearch={getProcedures}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              mode=\"multiple\"\n              initialValue={selectedProcedures}\n            />\n          )}\n        </Form.Item>\n        {/* end notification recipients */}\n\n        {/* notification subject */}\n        <Form.Item {...formItemLayout} label=\"Subject\">\n          {getFieldDecorator('subject', {\n            rules: [{ required: true, message: 'Procedure time is required' }],\n          })(<Input placeholder=\"Applicable for Email notification only\" />)}\n        </Form.Item>\n        {/* notification subject */}\n\n        {/* notification body */}\n        <Form.Item {...formItemLayout} label=\"Message\">\n          {getFieldDecorator('body', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide notification message',\n              },\n            ],\n          })(\n            <TextArea\n              autosize={{ minRows: 6, maxRows: 10 }}\n              placeholder=\"Write notification message here ...\"\n            />\n          )}\n        </Form.Item>\n        {/* end notification body */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Send\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(NotificationForm);\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { postProcedure, putProcedure } from '@codetanzania/emis-api-states';\nimport { Button, Form, Input } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst {\n  getActivities,\n  getItems,\n  getPlans,\n  getQuestionnaires,\n  getRoles,\n} = httpActions;\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name ProcedureForm\n * @description Render Procedure form for creating and updating procedure procedure details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ProcedureForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    procedure: PropTypes.shape({\n      name: PropTypes.string,\n      title: PropTypes.string,\n      abbreviation: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      procedure,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedProcedure = Object.assign({}, procedure, values);\n          putProcedure(\n            updatedProcedure,\n            () => {\n              notifySuccess('Procedure was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating procedure, please try again!'\n              );\n            }\n          );\n        } else {\n          postProcedure(\n            values,\n            () => {\n              notifySuccess('Procedure was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving procedure, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      procedure,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* procedure plan select input */}\n        <Form.Item label=\"Plan\" {...formItemLayout}>\n          {getFieldDecorator('plan', {\n            initialValue: isEditForm\n              ? procedure.plan._id // eslint-disable-line\n              : undefined,\n            rules: [{ required: true, message: 'Procedure Plan is Required' }],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Activity Plan ...\"\n              onSearch={getPlans}\n              optionLabel={plan =>\n                `${plan.incidentType.name} (${plan.owner.name})`\n              }\n              optionValue=\"_id\"\n              initialValue={isEditForm ? procedure.plan : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end procedure plan select input */}\n\n        {/* procedure activity select input */}\n        <Form.Item label=\"Activity\" {...formItemLayout}>\n          {getFieldDecorator('activity', {\n            initialValue: isEditForm\n              ? procedure.activity._id // eslint-disable-line\n              : undefined,\n            rules: [\n              { required: true, message: 'Procedure Activity is Required' },\n            ],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Activity Plan ...\"\n              onSearch={getActivities}\n              optionLabel={activity => `${activity.name}`}\n              optionValue=\"_id\"\n              initialValue={isEditForm ? procedure.activity : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end procedure activity select input */}\n\n        {/* procedure name */}\n        <Form.Item {...formItemLayout} label=\"SOP Name\">\n          {getFieldDecorator('name', {\n            rules: [{ required: true, message: 'Procedure name is Required' }],\n            initialValue: isEditForm ? procedure.name : undefined,\n          })(\n            <TextArea\n              autosize={{ minRows: 2, maxRows: 6 }}\n              placeholder=\"Enter Procedure Name\"\n            />\n          )}\n        </Form.Item>\n        {/* end procedure name */}\n\n        {/* procedure description */}\n        <Form.Item {...formItemLayout} label=\"SOP Description\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? procedure.description : undefined,\n          })(\n            <TextArea\n              autosize={{ minRows: 2, maxRows: 6 }}\n              placeholder=\"Enter Procedure Description\"\n            />\n          )}\n        </Form.Item>\n        {/* end procedure description */}\n\n        {/* responsible roles select input */}\n        <Form.Item label=\"Primary Responsible Role(s)\" {...formItemLayout}>\n          {getFieldDecorator('primary', {\n            rules: [\n              {\n                required: true,\n                message: 'Please Select Responsible Role(s)',\n              },\n            ],\n            initialValue: isEditForm\n              ? map(procedure.primary, role => role._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Role ...\"\n              mode=\"multiple\"\n              onSearch={getRoles}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? procedure.primary : []}\n            />\n          )}\n        </Form.Item>\n        {/* end responsible roles select input */}\n\n        {/* responsible roles select input */}\n        <Form.Item label=\"Supportive Role(s)\" {...formItemLayout}>\n          {getFieldDecorator('supportive', {\n            initialValue: isEditForm\n              ? map(procedure.supportive, role => role._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Role ...\"\n              mode=\"multiple\"\n              onSearch={getRoles}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? procedure.supportive : []}\n            />\n          )}\n        </Form.Item>\n        {/* end responsible roles select input */}\n\n        {/* resource select input */}\n        <Form.Item label=\"Resources Needed\" {...formItemLayout}>\n          {getFieldDecorator('resources', {\n            initialValue: isEditForm\n              ? map(procedure.resources, item => item._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Resource items ...\"\n              mode=\"multiple\"\n              onSearch={getItems}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? procedure.resources : []}\n            />\n          )}\n        </Form.Item>\n        {/* end resource select input */}\n\n        {/* Questionnaires select input */}\n        <Form.Item label=\"Assessment(s) to be performed\" {...formItemLayout}>\n          {getFieldDecorator('assessments', {\n            initialValue: isEditForm\n              ? map(procedure.assessments, item => item._id) // eslint-disable-line\n              : [],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Select Questionnaires ...\"\n              mode=\"multiple\"\n              onSearch={getQuestionnaires}\n              optionLabel=\"title\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? procedure.assessments : []}\n            />\n          )}\n        </Form.Item>\n        {/* end Questionnaires select input */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(ProcedureForm);\n","import {\n  closeProcedureForm,\n  Connect,\n  filterProcedures,\n  getProcedures,\n  openProcedureForm,\n  searchProcedures,\n  selectProcedure,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport ProcedureFilters from './Filters';\nimport ProceduresList from './List';\nimport NotificationForm from './NotificationForm';\nimport ProcedureForm from './ProcedureForm';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name ProceduresList\n * @description Render procedure list which have search box, actions and procedure list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Procedures extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedProcedures: [],\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    procedures: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    procedure: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n    match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n  };\n\n  static defaultProps = {\n    procedure: null,\n  };\n\n  componentDidMount() {\n    const { match } = this.props;\n\n    if (match.params.activityId) {\n      filterProcedures({ activity: match.params.activityId });\n    } else {\n      getProcedures();\n    }\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openProcedureForm\n   * @description Open procedure form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openProcedureForm = () => {\n    openProcedureForm();\n  };\n\n  /**\n   * @function\n   * @name openProcedureForm\n   * @description close procedure form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeProcedureForm = () => {\n    closeProcedureForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchProcedures\n   * @description Search Procedures List based on supplied filter word\n   *\n   * @param {Object} event  Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchProcedures = event => {\n    searchProcedures(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} procedure procedure object to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = procedure => {\n    selectProcedure(procedure);\n    this.setState({ isEditForm: true });\n    openProcedureForm();\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify procedures\n   *\n   * @param {Object[]} procedures procedure list\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = procedures => {\n    this.setState({\n      selectedProcedures: procedures,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify procedures\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Perform cleanups after closing procedure form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      procedures,\n      procedure,\n      loading,\n      posting,\n      page,\n      showForm,\n      total,\n    } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedProcedures,\n    } = this.state;\n    return (\n      <div className=\"ProceduresList\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for procedures here ...\"\n              onChange={this.searchProcedures}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* <Col span={3} offset={1}>\n            <Select\n              defaultValue=\"Active\"\n              style={{ width: 120 }}\n              size=\"large\"\n              type=\"primary\"\n            >\n              <Option value=\"All\">All</Option>\n              <Option value=\"Active\">Active</Option>\n              <Option value=\"Archived\">Archived</Option>\n            </Select>\n          </Col> */}\n\n          {/* primary actions */}\n          <Col span={2} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Procedure\"\n              onClick={this.openProcedureForm}\n            >\n              New Procedure\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list starts */}\n        <ProceduresList\n          total={total}\n          page={page}\n          procedures={procedures}\n          loading={loading}\n          onEdit={this.handleEdit}\n          onFilter={this.openFiltersModal}\n          onNotify={this.openNotificationForm}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Procedures\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <ProcedureFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* Notification Modal modal */}\n        <Modal\n          title=\"Notify Procedures\"\n          visible={showNotificationForm}\n          onCancel={this.closeNotificationForm}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n          width=\"40%\"\n        >\n          <NotificationForm\n            onCancel={this.closeNotificationForm}\n            selectedProcedures={selectedProcedures}\n          />\n        </Modal>\n        {/* end Notification modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Procedure' : 'Add New Procedure'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeProcedureForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <ProcedureForm\n            posting={posting}\n            isEditForm={isEditForm}\n            procedure={procedure}\n            onCancel={this.closeProcedureForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(withRouter(Procedures), {\n  procedures: 'procedures.list',\n  procedure: 'procedures.selected',\n  loading: 'procedures.loading',\n  posting: 'procedures.posting',\n  page: 'procedures.page',\n  showForm: 'procedures.showForm',\n  total: 'procedures.total',\n});\n","import React from 'react';\nimport Procedures from '../components/Procedures';\n\nconst EmergencyPlansProceduresLayout = () => <Procedures />;\n\nexport default EmergencyPlansProceduresLayout;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport adjustmentsIcon from '../assets/icons/resources/adjustment.svg';\nimport itemsIcon from '../assets/icons/resources/item.svg';\nimport itemCategoriesIcon from '../assets/icons/resources/itemcategory.svg';\nimport stockIcon from '../assets/icons/resources/stock.svg';\nimport utilizationIcon from '../assets/icons/resources/utilization-disabled.svg';\nimport warehousesIcon from '../assets/icons/resources/warehouse.svg';\nimport itemUnitsIcon from '../assets/icons/resources/itemunit.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Adjustments',\n    path: '/adjustments',\n    icon: adjustmentsIcon,\n    description: modules.resourcesAdjustments,\n  },\n  {\n    name: 'Items',\n    path: '/items',\n    icon: itemsIcon,\n    description: modules.resourcesItems,\n  },\n  {\n    name: 'Item Categories',\n    path: '/itemcategories',\n    icon: itemCategoriesIcon,\n    description: modules.resourcesItemCategories,\n  },\n  {\n    name: 'Stocks',\n    path: '/stocks',\n    icon: stockIcon,\n    description: modules.resourcesStocks,\n  },\n  {\n    name: 'Utilization/Consumptions',\n    path: '/utilization',\n    icon: utilizationIcon,\n    description: modules.resourcesConsumption,\n    disabled: true,\n  },\n  { name: 'Warehouses', path: '/warehouses', icon: warehousesIcon },\n  {\n    name: 'Item Unit Of Measure',\n    path: '/unitsofmeasure',\n    icon: itemUnitsIcon,\n  },\n];\n\n/**\n * @function\n * @name Resources\n * @description Resources component which allow navigation\n *  to resource sub modules\n *\n * @param {Object} props props object\n * @param {Object} props.match route params\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Resources = ({ match }) => (\n  <NavigationMenu routes={routes} match={match} />\n);\n\n/* props validation */\nResources.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default Resources;\n","import React from 'react';\nimport { Button, Row, Col, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport './styles.css';\n\n/* constants */\nconst { Search } = Input;\n\n/**\n * @function\n * @name Topbar\n * @description Topbar component which renders search input and primary actions\n *\n * @param {Object} props props object\n * @param {Function} props.onSearch on Search callback\n * @param {Object[]} props.actions list of primary actions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Topbar = ({ search, actions }) => (\n  <Row className=\"Topbar\">\n    {/* search box */}\n    <Col span={12}>\n      <Search {...search} allowClear />\n    </Col>\n    {/* end search box */}\n\n    {/* primary actions */}\n    <Col span={12}>\n      <Row type=\"flex\" justify=\"end\">\n        {actions.map(action => {\n          const { label, ...props } = action;\n\n          return (\n            <Col span={5} xl={7} xxl={5} key={label}>\n              <Button {...props} type=\"primary\">\n                {label}\n              </Button>\n            </Col>\n          );\n        })}\n      </Row>\n    </Col>\n    {/* end primary actions */}\n  </Row>\n);\n\n/* props validations */\nTopbar.propTypes = {\n  search: PropTypes.shape({\n    placeholder: PropTypes.string,\n    size: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    value: PropTypes.string,\n  }).isRequired,\n  actions: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string.isRequired,\n      title: PropTypes.string,\n      onClick: PropTypes.func,\n    })\n  ),\n};\n\nTopbar.defaultProps = {\n  actions: [],\n};\n\nexport default Topbar;\n","import { Avatar, Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport './styles.css';\n\n/**\n * @class\n * @name AdjustmentListItem\n * @description Single adjustment list item component.\n * Render single adjustment item details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdjustmentListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    itemName: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    warehouseName: PropTypes.string.isRequired,\n    quantity: PropTypes.string.isRequired,\n    cost: PropTypes.string.isRequired,\n    reason: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n    creationDate: PropTypes.string.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description show item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description hide item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle toggling list item checkbox\n   *\n   * @param {Object} event Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  render() {\n    const {\n      itemName,\n      type,\n      warehouseName,\n      quantity,\n      cost,\n      reason,\n      color,\n      creationDate,\n      isSelected,\n    } = this.props;\n    const { isHovered } = this.state;\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: color }}>\n          {itemName.toUpperCase().charAt(0)}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"AdjustmentListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent} </Col>\n          <Col span={4}>{itemName}</Col>\n          <Col span={3}>{type}</Col>\n          <Col span={2}>{quantity}</Col>\n          <Col span={3}>{cost}</Col>\n          <Col span={4}>{reason}</Col>\n          <Col span={3}>{warehouseName}</Col>\n          <Col span={4}>{moment(creationDate).format('DD-MM-YYYY HH:mm')}</Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AdjustmentListItem;\n","import { Col, Row, Checkbox } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\n/**\n * @function\n * @name ListHeader\n * @description List header component\n *\n * @param {Object} props props object\n * @param {Object[]} props.headerLayout list of header items configs\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ListHeader = ({\n  headerLayout,\n  onSelectAll,\n  onDeselectAll,\n  isBulkSelected,\n}) => (\n  <Row className=\"ListHeader\">\n    <Col xl={{ span: 1 }} xxl={{ span: 1 }}>\n      <Checkbox\n        className=\"checkbox\"\n        checked={isBulkSelected}\n        onChange={event => {\n          if (event.target.checked) {\n            onSelectAll();\n          } else {\n            onDeselectAll();\n          }\n        }}\n      />\n    </Col>\n\n    {headerLayout.map(item => (\n      <Col key={item.header} {...item}>\n        <h4 className=\"title\">{item.header}</h4>\n      </Col>\n    ))}\n  </Row>\n);\n\n/* props validation */\nListHeader.propTypes = {\n  headerLayout: PropTypes.arrayOf(\n    PropTypes.shape({\n      span: PropTypes.number.isRequired,\n      header: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onSelectAll: PropTypes.func.isRequired,\n  onDeselectAll: PropTypes.func.isRequired,\n  isBulkSelected: PropTypes.bool,\n};\n\nListHeader.defaultProps = {\n  isBulkSelected: false,\n};\n\nexport default ListHeader;\n","import { Button, Col, Pagination, Row } from 'antd';\nimport { pluralize, singularize } from 'inflection';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport './styles.css';\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @function\n * @name Toolbar\n * @description Render action bar for actions which are applicable to list content\n *\n * @param {Object} props props object\n * @param {string} props.itemName names for items/ modules used by toolbar\n * @param {number} props.page current page\n * @param {number} props.total total number of results from the API\n * @param {number} props.selectedItemsCount total Number of selected items\n * @param {Function} props.onNotify on notify action callback\n * @param {Function} props.onFilter on filter action callback\n * @param {Function} props.onShare on share action callback\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Toolbar = ({\n  itemName,\n  page,\n  total,\n  selectedItemsCount,\n  exportUrl,\n  onArchive,\n  onFilter,\n  onNotify,\n  onPaginate,\n  onRefresh,\n  onShare,\n}) => (\n  <div className=\"Toolbar\">\n    <Row>\n      {/* action bar */}\n      <Col span={12}>\n        <Row>\n          {/* refresh  action */}\n          {onRefresh && (\n            <Col span={2} xl={{ span: 2 }} xxl={{ span: 2 }}>\n              <Button\n                shape=\"circle\"\n                icon=\"reload\"\n                title=\"Refresh \"\n                className=\"actionButton\"\n                size=\"large\"\n                onClick={onRefresh}\n              />\n            </Col>\n          )}\n          {/* end refresh  action */}\n\n          {/* notify action */}\n          {onNotify && (\n            <Col span={2} xl={{ span: 2 }} xxl={{ span: 2 }}>\n              <Button\n                type=\"circle\"\n                icon=\"mail\"\n                title={`Send Notification to${\n                  selectedItemsCount > 0 ? 'selected' : ''\n                } `}\n                className=\"actionButton\"\n                size=\"large\"\n                onClick={onNotify}\n              />\n            </Col>\n          )}\n          {/* end notify action  */}\n\n          {/* export action */}\n          {exportUrl && (\n            <Col span={2} xl={{ span: 2 }} xxl={{ span: 2 }}>\n              <a href={exportUrl} download>\n                <Button\n                  type=\"circle\"\n                  icon=\"cloud-download\"\n                  title=\"Export selected \"\n                  className=\"actionButton\"\n                  size=\"large\"\n                />\n              </a>\n            </Col>\n          )}\n          {/* end export action */}\n\n          {/* bulk share action */}\n          {selectedItemsCount > 0 && onShare && (\n            <Col span={2} xl={{ span: 2 }} xxl={{ span: 2 }}>\n              <Button\n                type=\"circle\"\n                icon=\"share-alt\"\n                title=\"Share selected \"\n                className=\"actionButton\"\n                size=\"large\"\n                onClick={onShare}\n              />\n            </Col>\n          )}\n          {/* end bulk share action */}\n\n          {/* bulk archive action */}\n          {selectedItemsCount > 0 && onArchive && (\n            <Col span={1} xl={{ span: 1 }} xxl={{ span: 1 }}>\n              <Button\n                type=\"circle\"\n                icon=\"hdd\"\n                title=\"Archive selected \"\n                className=\"actionButton\"\n                size=\"large\"\n                onClick={onArchive}\n              />\n            </Col>\n          )}\n          {/* end bulk archive action */}\n        </Row>\n      </Col>\n      {/* end action bar */}\n\n      {/* filter bar */}\n      <Col span={12}>\n        <Row type=\"flex\" justify=\"end\">\n          {/* selected and  number summary */}\n          <Col span={13}>\n            {selectedItemsCount > 0 && (\n              <span\n                style={{ color: '#959595' }}\n              >{`selected ${selectedItemsCount} out of `}</span>\n            )}\n            <span\n              style={{ color: '#959595', fontSize: 15, fontWeight: 600 }}\n            >{`${total} ${\n              total > 1 ? pluralize(itemName) : singularize(itemName)\n            }`}</span>\n          </Col>\n          {/* end selected and  number summary */}\n\n          {/* filter action */}\n          {onFilter && (\n            <Col span={4} xl={{ span: 3 }} xxl={{ span: 2 }}>\n              <Button\n                type=\"circle\"\n                icon=\"filter\"\n                title=\"Filter\"\n                className=\"actionButton\"\n                size=\"large\"\n                onClick={onFilter}\n              />\n            </Col>\n          )}\n          {/* end filter action */}\n\n          {/* pagination */}\n          {onPaginate && total > 0 && (\n            <Col span={4} xl={{ span: 7 }} xxl={{ span: 5 }}>\n              <Pagination\n                simple\n                current={page}\n                defaultCurrent={page}\n                total={total}\n                className=\"pagination\"\n                onChange={onPaginate}\n              />\n            </Col>\n          )}\n          {/* end pagination */}\n        </Row>\n      </Col>\n      {/* end filter bar */}\n    </Row>\n  </div>\n);\n\n/* props validation */\nToolbar.propTypes = {\n  itemName: PropTypes.string.isRequired,\n  page: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  exportUrl: PropTypes.string,\n  selectedItemsCount: PropTypes.number.isRequired,\n  onArchive: PropTypes.func,\n  onFilter: PropTypes.func,\n  onNotify: PropTypes.func,\n  onPaginate: PropTypes.func.isRequired,\n  onRefresh: PropTypes.func.isRequired,\n  onShare: PropTypes.func,\n};\n\nToolbar.defaultProps = {\n  exportUrl: undefined,\n  onFilter: null,\n  onShare: null,\n  onNotify: null,\n  onArchive: null,\n};\n\nexport default Toolbar;\n","import {\n  refreshAdjustments,\n  paginateAdjustments,\n} from '@codetanzania/emis-api-states';\nimport { httpActions } from '@codetanzania/emis-api-client';\nimport { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, Component } from 'react';\nimport intersectionBy from 'lodash/intersectionBy';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport AdjustmentsListItem from '../ListItem';\nimport ListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst headerLayout = [\n  { span: 4, header: 'Item' },\n  { span: 3, header: 'Action' },\n  { span: 2, header: 'Quantity' },\n  { span: 3, header: 'Cost' },\n  { span: 4, header: 'Reason' },\n  { span: 3, header: 'Warehouse' },\n  { span: 4, header: 'Adjustment Date' },\n];\nconst { getAdjustmentsExportUrl } = httpActions;\n\n/**\n * @class\n * @name AdjustmentsList\n * @description Render adjustment list which have search box and actions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdjustmentsList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    adjustments: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string,\n        item: PropTypes.shape({\n          name: PropTypes.string,\n          color: PropTypes.color,\n        }),\n        type: PropTypes.string,\n        quantity: PropTypes.number,\n        cost: PropTypes.number,\n        reason: PropTypes.string,\n        store: PropTypes.shape({ name: PropTypes.string }),\n      })\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    onFilter: PropTypes.func.isRequired,\n  };\n\n  state = { selectedAdjustments: [], selectedPages: [] };\n\n  /**\n   * @function\n   * @name handleSelectAdjustment\n   * @description Handle select single adjustment checkbox\n   *\n   * @param {Object} adjustment selected adjustment object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAdjustment = adjustment => {\n    const { selectedAdjustments } = this.state;\n    this.setState({\n      selectedAdjustments: concat([], selectedAdjustments, adjustment),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all adjustment action in current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedAdjustments, selectedPages } = this.state;\n    const { adjustments, page } = this.props;\n    const selectedList = uniqBy(\n      [...selectedAdjustments, ...adjustments],\n      '_id'\n    );\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedAdjustments: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAdjustment\n   * @description Handle deselect a single adjustment checkbox\n   *\n   * @param {Object} adjustment adjustment objected to be removed from\n   * list of selected adjustments\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAdjustment = adjustment => {\n    const { selectedAdjustments } = this.state;\n    const selectedList = [...selectedAdjustments];\n\n    remove(selectedList, item => item._id === adjustment._id); // eslint-disable-line\n\n    this.setState({\n      selectedAdjustments: selectedList,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all adjustments in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { adjustments, page } = this.props;\n    const { selectedAdjustments, selectedPages } = this.state;\n    const selectedList = [...selectedAdjustments];\n    const pages = [...selectedPages];\n\n    remove(pages, item => item === page);\n\n    adjustments.forEach(adjustment => {\n      remove(selectedList, item => item._id === adjustment._id); // eslint-disable-line\n    });\n\n    this.setState({\n      selectedAdjustments: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  render() {\n    const { adjustments, loading, total, page, onFilter } = this.props;\n    const { selectedAdjustments, selectedPages } = this.state;\n    const selectedAdjustmentsCount = intersectionBy(\n      selectedAdjustments,\n      adjustments,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"adjustment\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedAdjustmentsCount}\n          exportUrl={getAdjustmentsExportUrl({\n            filter: { _id: map(selectedAdjustments, '_id') },\n          })}\n          onPaginate={nextPage => {\n            paginateAdjustments(nextPage);\n          }}\n          onFilter={onFilter}\n          onRefresh={() =>\n            refreshAdjustments(\n              () => {\n                notifySuccess('Stocks adjustments refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing stocks adjustments please contact system administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end toolbar */}\n        {/* list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* list header */}\n\n        {/* adjustments list */}\n        <List\n          loading={loading}\n          dataSource={adjustments}\n          renderItem={adjustment => (\n            <AdjustmentsListItem\n              key={adjustment.id}\n              itemName={adjustment.item.name}\n              warehouseName={adjustment.store.name}\n              type={adjustment.type}\n              quantity={adjustment.quantity}\n              cost={adjustment.cost}\n              reason={adjustment.reason}\n              color={adjustment.item.color}\n              creationDate={adjustment.updatedAt}\n              isSelected={\n                map(selectedAdjustments, '_id').includes(adjustment._id) //eslint-disable-line\n              }\n              onSelectItem={() => {\n                this.handleSelectAdjustment(adjustment);\n              }}\n              onDeselectItem={() => {\n                this.handleDeselectAdjustment(adjustment);\n              }}\n            />\n          )}\n        />\n        {/* end adjustments list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default AdjustmentsList;\n","import {\n  clearAdjustmentFilters,\n  Connect,\n  filterAdjustments,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, DatePicker, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name AdjustmentsFilters\n * @description Filter modal component for filtering adjustments\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdjustmentsFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        type: PropTypes.arrayOf(PropTypes.string),\n        reason: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    reasons: PropTypes.arrayOf(PropTypes.string).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterAdjustments(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearAdjustmentFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      filter,\n      reasons,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        <Row>\n          <Col span={12}>\n            {/* adjustment date range start date filter */}\n            <Form.Item label=\"Adjustments From\">\n              {getFieldDecorator('updatedAt.from', {\n                initialValue:\n                  filter && filter.updatedAt ? filter.updatedAt.from : null,\n                rules: [\n                  {\n                    type: 'object',\n                  },\n                ],\n              })(\n                <DatePicker\n                  format=\"DD-MM-YYYY\"\n                  placeholder=\"Select Start Date\"\n                  style={{ width: '80%' }}\n                />\n              )}\n            </Form.Item>\n            {/* end adjustment date range start date filter */}\n          </Col>\n          <Col span={12}>\n            {/* adjustment date range end date filter */}\n            <Form.Item label=\"Adjustments To\">\n              {getFieldDecorator('updatedAt.to', {\n                initialValue:\n                  filter && filter.updatedAt ? filter.updatedAt.to : null,\n                rules: [\n                  {\n                    type: 'object',\n                  },\n                ],\n              })(\n                <DatePicker\n                  format=\"DD-MM-YYYY\"\n                  placeholder=\"Select End Date\"\n                  style={{ width: '80%' }}\n                />\n              )}\n            </Form.Item>\n            {/* end adjustment date range end date filter */}\n          </Col>\n        </Row>\n\n        {/* start adjustment reasons filters */}\n        <Form.Item {...formItemLayout} label=\"By  Reasons\">\n          {getFieldDecorator('reason', {\n            initialValue: filter ? filter.reason : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {reasons.map(reason => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={reason}>\n                    <Checkbox value={reason}>{reason}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end adjustment reason filters */}\n\n        {/* start adjustment type filters */}\n        <Form.Item {...formItemLayout} label=\"By Types\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end adjustment type filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(AdjustmentsFilters, {\n    types: 'adjustments.schema.properties.type.enum',\n    reasons: 'adjustments.schema.properties.reason.enum',\n    filter: 'adjustments.filter',\n  })\n);\n","import {\n  Connect,\n  getAdjustments,\n  searchAdjustments,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport Topbar from '../../../components/Topbar';\nimport AdjustmentList from './List';\nimport AdjustmentFilters from './Filters';\nimport './styles.css';\n\n/**\n * @class\n * @name Adjustments\n * @description Render adjustments module which has search box,\n *  actions and list of adjustments\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Adjustments extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    adjustments: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string,\n        item: PropTypes.shape({\n          name: PropTypes.string,\n          color: PropTypes.color,\n        }),\n        type: PropTypes.string,\n        quantity: PropTypes.number,\n        cost: PropTypes.number,\n        reason: PropTypes.string,\n        store: PropTypes.shape({ name: PropTypes.string }),\n      })\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    searchQuery: PropTypes.string,\n  };\n\n  static defaultProps = {\n    searchQuery: undefined,\n  };\n\n  state = {\n    showFilters: false,\n  };\n\n  componentDidMount() {\n    getAdjustments();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible\n   *  property to false via state\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible\n   *  property to false via state\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name searchRoles\n   * @description Search Roles List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchAdjustments = event => {\n    searchAdjustments(event.target.value);\n  };\n\n  render() {\n    const { adjustments, loading, total, page, searchQuery } = this.props;\n    const { showFilters } = this.state;\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for adjustments here ...',\n            onChange: this.searchAdjustments,\n            value: searchQuery,\n          }}\n        />\n        {/* end Topbar */}\n        <div className=\"AdjustmentList\">\n          {/* list starts */}\n          <AdjustmentList\n            adjustments={adjustments}\n            loading={loading}\n            total={total}\n            page={page}\n            onFilter={this.openFiltersModal}\n          />\n          {/* end list */}\n\n          {/* adjustments filters */}\n          <Modal\n            title=\"Filter Adjustments\"\n            visible={showFilters}\n            width={650}\n            maskClosable={false}\n            destroyOnClose\n            onCancel={this.closeFiltersModal}\n            footer={null}\n          >\n            <AdjustmentFilters onCancel={this.closeFiltersModal} />\n          </Modal>\n          {/* end adjustments filters */}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(Adjustments, {\n  adjustments: 'adjustments.list',\n  loading: 'adjustments.loading',\n  page: 'adjustments.page',\n  showForm: 'adjustments.showForm',\n  total: 'adjustments.total',\n  searchQuery: 'adjustments.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Adjustments from '../components/Adjustments';\n\n/**\n * @function\n * @name ResourcesAdjustmentsLayout\n * @description Render resources adjustments layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourcesAdjustmentsLayout = () => <Adjustments />;\n\nexport default ResourcesAdjustmentsLayout;\n","import { Button, Form, Input, Icon, Tooltip } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../SearchableSelectInput';\n\n/* constants */\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name NotificationForm\n * @description Render notification form component\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass NotificationForm extends Component {\n  static propTypes = {\n    recipients: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        abbreviation: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n      })\n    ).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    body: PropTypes.string,\n    onCancel: PropTypes.func.isRequired,\n    onNotify: PropTypes.func.isRequired,\n    onSearchRecipients: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    body: undefined,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Callback to handle form on submit event\n   *\n   * @param {Object} event onSubmit event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const notification = {\n          to: {\n            _id: {\n              $in: values.recipients,\n            },\n          },\n          subject: values.subject,\n          body: values.body,\n        };\n\n        console.log(notification);\n      }\n    });\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      recipients,\n      body,\n      onCancel,\n      onSearchRecipients,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* notification recipients */}\n        <Form.Item {...formItemLayout} label=\"Recipients\">\n          {getFieldDecorator('recipients', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide at least one recipient',\n              },\n            ],\n            initialValue: map(recipients, contact => contact._id), // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              onSearch={onSearchRecipients}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              mode=\"multiple\"\n              initialValue={recipients}\n            />\n          )}\n        </Form.Item>\n        {/* end notification recipients */}\n\n        {/* notification subject */}\n        <Form.Item\n          {...formItemLayout}\n          label={\n            <span>\n              Subject&nbsp;\n              <Tooltip title=\"Applicable for Email notification only\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('subject', {})(<Input />)}\n        </Form.Item>\n        {/* notification subject */}\n\n        {/* notification body */}\n        <Form.Item {...formItemLayout} label=\"Message\">\n          {getFieldDecorator('body', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide notification message',\n              },\n            ],\n            initialValue: body,\n          })(<TextArea autosize={{ minRows: 6, maxRows: 10 }} />)}\n        </Form.Item>\n        {/* end notification body */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Send\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(NotificationForm);\n","import {\n  postItemCategory,\n  putItemCategory,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Col, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport randomColor from 'randomcolor';\nimport ColorPicker from 'rc-color-picker';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport 'rc-color-picker/assets/index.css';\nimport './styles.css';\n\n/* constants */\nconst { TextArea } = Input;\n\n/**\n * @class\n * @value ItemCategoryForm\n * @description Render Item Category form for creating/editing Item Categories\n *\n * @version 0.1.0\n * @since 0.1.0\n */\n\nclass ItemCategoryForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    itemCategory: PropTypes.shape({\n      _id: PropTypes.string,\n      value: PropTypes.string,\n      color: PropTypes.string,\n      abbreviation: PropTypes.string,\n      description: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    posting: PropTypes.bool.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    itemCategory: null,\n  };\n\n  /**\n   * @function\n   * @name onChangeColor\n   * @description Handle changing of color\n   *\n   * @param {string} color event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  onChangeColor = color => {\n    const {\n      form: { setFieldsValue },\n    } = this.props;\n    setFieldsValue({ color });\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle create/edit action\n   *\n   * @param {Object} e event object\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      itemCategory,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, data) => {\n      const color = data.color ? data.color.color : null; // color comes as object we need to get color string\n      const values = { ...data, color };\n      if (!error) {\n        if (isEditForm) {\n          const updateItemCategory = Object.assign({}, itemCategory, values);\n          putItemCategory(\n            updateItemCategory,\n            () => {\n              notifySuccess('Item category was updated successfully');\n            },\n            () => {\n              notifyError(\n                `Something occurred while updating Item Category,\n                 please try again!`\n              );\n            }\n          );\n        } else {\n          postItemCategory(\n            values,\n            () => {\n              notifySuccess('Item category was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving Item category, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      onCancel,\n      itemCategory,\n      posting,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const defaultColor = itemCategory ? itemCategory.color : randomColor();\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* Item Categories value */}\n        <Form.Item {...formItemLayout} label=\"Name \">\n          {getFieldDecorator('value', {\n            initialValue: isEditForm ? itemCategory.value : undefined,\n            rules: [{ required: true, message: 'name is required' }],\n          })(<Input />)}\n        </Form.Item>\n        {/* end Item Categories value */}\n\n        <Row>\n          {/* Item Categories abbreviation */}\n          <Col span={19}>\n            <Form.Item {...formItemLayout} label=\"Code\">\n              {getFieldDecorator('abbreviation', {\n                initialValue: isEditForm\n                  ? itemCategory.abbreviation\n                  : undefined,\n                rules: [{ required: true, message: 'Code is required' }],\n              })(<Input />)}\n            </Form.Item>\n          </Col>\n          {/* end Item Categories abbreviation */}\n\n          {/* Item Categories color */}\n          <Col span={4} offset={1}>\n            <Form.Item {...formItemLayout} label=\"Color\">\n              {getFieldDecorator('color')(\n                <ColorPicker\n                  animation=\"slide-up\"\n                  defaultColor={defaultColor}\n                  onChange={this.onChangeColor}\n                />\n              )}\n            </Form.Item>\n          </Col>\n          {/* end Item Categories color */}\n        </Row>\n\n        {/* Item Categories value */}\n        <Form.Item {...formItemLayout} label=\"Description \">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? itemCategory.description : undefined,\n          })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n        </Form.Item>\n        {/* end Item Categories value */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(ItemCategoryForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Dropdown, Button, Icon, Menu } from 'antd';\nimport './styles.css';\n\n/**\n * @function\n * @name ListItemActions\n * @description Render Dropdown component with has actions for list items\n *\n * @param {Object} props props object\n * @param {Function} props.onEdit on edit action callback\n * @param {Function} props.onShare on share action callback\n * @param {Function} props.onArchive on archive action callback\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ListItemActions = ({ edit, share, archive, transfer, adjust }) => (\n  <Dropdown\n    overlay={\n      <Menu>\n        {edit && (\n          <Menu.Item key=\"edit\" onClick={edit.onClick} title={edit.title}>\n            <Icon type=\"edit\" /> {edit.name}\n          </Menu.Item>\n        )}\n\n        {share && (\n          <Menu.Item key=\"share\" onClick={share.onClick} title={share.title}>\n            <Icon type=\"share-alt\" /> {share.name}\n          </Menu.Item>\n        )}\n\n        {archive && (\n          <Menu.Item\n            key=\"archive\"\n            onClick={archive.onClick}\n            title={archive.title}\n          >\n            <Icon type=\"delete\" /> {archive.name}\n          </Menu.Item>\n        )}\n\n        {transfer && (\n          <Menu.Item\n            key=\"transfer\"\n            onClick={transfer.onClick}\n            title={transfer.title}\n          >\n            <Icon type=\"swap\" /> {transfer.name}\n          </Menu.Item>\n        )}\n\n        {adjust && (\n          <Menu.Item\n            key=\"transfer\"\n            onClick={adjust.onClick}\n            title={adjust.title}\n          >\n            <Icon type=\"diff\" /> {adjust.name}\n          </Menu.Item>\n        )}\n      </Menu>\n    }\n    trigger={['click']}\n  >\n    <Button\n      shape=\"circle\"\n      size=\"large\"\n      icon=\"more\"\n      className=\"ListItemActionsButton\"\n      title=\"More actions\"\n    />\n  </Dropdown>\n);\n\n/* props validation */\nListItemActions.propTypes = {\n  edit: PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n  share: PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n  archive: PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n  transfer: PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n  adjust: PropTypes.shape({\n    name: PropTypes.string,\n    title: PropTypes.string,\n    onClick: PropTypes.func,\n  }),\n};\n\nListItemActions.defaultProps = {\n  edit: null,\n  share: null,\n  archive: null,\n  transfer: null,\n  adjust: null,\n};\n\nexport default ListItemActions;\n","import { Avatar, Checkbox, Col, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport truncate from 'lodash/truncate';\nimport React, { Component } from 'react';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\n/* constants */\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name ListItem\n * @description Single list item component.\n * Render single item details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    abbreviation: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseEnter ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseLeave ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List ItemCategory checkbox\n   *\n   * @param {Object} event - Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a item\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const { abbreviation, description, name, onEdit, color } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = color || randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>\n          {abbreviation}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"ListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={6}>{name}</Col>\n          <Col span={14} title={description}>\n            {truncate(description, { length: 160 })}\n          </Col>\n          <Col span={1}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Item category',\n                  title: 'Update Item category Details',\n                  onClick: onEdit,\n                }}\n                archive={{\n                  name: 'Archive Item category',\n                  title: 'Remove Item category from list of active items',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  deleteItemCategory,\n  paginateItemCategories,\n  refreshItemCategories,\n} from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport intersectionBy from 'lodash/intersectionBy';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport ListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport ListItem from '../ListItem';\n\n/* constants */\nconst headerLayout = [\n  { span: 6, header: 'Name' },\n  { span: 14, header: 'Description' },\n];\nconst { getItemCategoriesExportUrl } = httpActions;\n\n/**\n * @class\n * @name ItemCategoriesList\n * @description Render ItemCategoriesList component which have actionBar, ItemCategories\n * header and ItemCategories list components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemCategoriesList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    itemCategories: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        value: PropTypes.string.isRequired,\n        abbreviation: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onShare: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedItemCategories: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectItem\n   * @description Handle select a single itemCategory action\n   *\n   * @param {Object} itemCategory selected itemCategory object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectItem = itemCategory => {\n    const { selectedItemCategories } = this.state;\n    this.setState({\n      selectedItemCategories: concat([], selectedItemCategories, itemCategory),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all itemCategories actions from current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedItemCategories, selectedPages } = this.state;\n    const { itemCategories, page } = this.props;\n    const selectedList = uniqBy(\n      [...selectedItemCategories, ...itemCategories],\n      '_id'\n    );\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedItemCategories: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all itemCategories in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { itemCategories, page } = this.props;\n    const { selectedItemCategories, selectedPages } = this.state;\n    const selectedList = uniqBy([...selectedItemCategories], '_id');\n    const pages = uniq([...selectedPages]);\n\n    remove(pages, itemCategory => itemCategory === page);\n\n    itemCategories.forEach(itemCategory => {\n      remove(\n        selectedList,\n        item => item._id === itemCategory._id // eslint-disable-line\n      );\n    });\n\n    this.setState({\n      selectedItemCategories: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectItem\n   * @description Handle deselect a single itemCategory action\n   *\n   * @param {Object} itemCategory itemCategory to be removed from selected itemCategories\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectItem = itemCategory => {\n    const { selectedItemCategories } = this.state;\n    const selectedList = [...selectedItemCategories];\n\n    remove(\n      selectedList,\n      item => item._id === itemCategory._id // eslint-disable-line\n    );\n\n    this.setState({ selectedItemCategories: selectedList });\n  };\n\n  render() {\n    const {\n      itemCategories,\n      loading,\n      page,\n      total,\n      onEdit,\n      onShare,\n    } = this.props;\n    const { selectedItemCategories, selectedPages } = this.state;\n    const selectedItemsCount = intersectionBy(\n      this.state.selectedItemCategories,\n      itemCategories,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"item category\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedItemsCount}\n          exportUrl={getItemCategoriesExportUrl({\n            filter: { _id: map(selectedItemCategories, '_id') },\n          })}\n          onPaginate={nextPage => {\n            paginateItemCategories(nextPage);\n          }}\n          onRefresh={() =>\n            refreshItemCategories(\n              () => {\n                notifySuccess('Item categories refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing Item categories please contact system administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end toolbar */}\n\n        {/* itemCategory list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* end itemCategory list header */}\n\n        {/* itemCategories list */}\n        <List\n          loading={loading}\n          dataSource={itemCategories}\n          renderItem={itemCategory => (\n            <ListItem\n              key={itemCategory._id} // eslint-disable-line\n              abbreviation={itemCategory.abbreviation}\n              name={itemCategory.value}\n              color={itemCategory.color}\n              description={\n                itemCategory.description ? itemCategory.description : 'N/A'\n              }\n              isSelected={\n                // eslint-disable-next-line\n                map(\n                  selectedItemCategories,\n                  item => item._id // eslint-disable-line\n                ).includes(\n                  itemCategory._id // eslint-disable-line\n                )\n              }\n              onSelectItem={() => {\n                this.handleOnSelectItem(itemCategory);\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectItem(itemCategory);\n              }}\n              onEdit={() => onEdit(itemCategory)}\n              onArchive={() =>\n                deleteItemCategory(\n                  itemCategory._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('item category was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      'An Error occurred while archiving item category please contact system administrator'\n                    );\n                  }\n                )\n              }\n              onShare={() => {\n                onShare(itemCategory);\n              }}\n            />\n          )}\n        />\n        {/* end itemCategories list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default ItemCategoriesList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  closeItemCategoryForm,\n  Connect,\n  getItemCategories,\n  openItemCategoryForm,\n  searchItemCategories,\n  selectItemCategory,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport NotificationForm from '../../../components/NotificationForm';\nimport Topbar from '../../../components/Topbar';\nimport ItemForm from './Form';\nimport ItemCategoriesList from './List';\nimport './styles.css';\n\n/* constants */\nconst { getItemCategories: getItemCategoriesFromAPI } = httpActions;\n\n/**\n * @class\n * @name ItemCategories\n * @description Render itemCategory list which have search box, actions and a list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemCategories extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedItemCategories: [],\n    notificationBody: undefined,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    itemCategories: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        color: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    itemCategory: PropTypes.shape({\n      _id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      color: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    searchQuery: PropTypes.string,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    itemCategory: null,\n    searchQuery: undefined,\n  };\n\n  componentDidMount() {\n    getItemCategories();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openItemCategoryForm\n   * @description Open itemCategory form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openItemCategoryForm = () => {\n    openItemCategoryForm();\n  };\n\n  /**\n   * @function\n   * @name openItemCategoryForm\n   * @description close itemCategory form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeItemCategoryForm = () => {\n    closeItemCategoryForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchItemCategories\n   * @description Search ItemCategories List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchItemCategories = event => {\n    searchItemCategories(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for itemCategory list\n   *\n   * @param {Object} itemCategory itemCategory to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = itemCategory => {\n    selectItemCategory(itemCategory);\n    this.setState({ isEditForm: true });\n    openItemCategoryForm();\n  };\n\n  /**\n   * @function\n   * @name handleShare\n   * @description Handle share single itemCategory action\n   *\n   * @param {Object} itemCategory itemCategory to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleShare = itemCategory => {\n    const message = `${itemCategory.name}\\nMobile: ${\n      itemCategory.mobile\n    }\\nEmail: ${itemCategory.email}`;\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name handleBulkShare\n   * @description Handle share multiple itemCategories\n   *\n   * @param {Object[]} itemCategories itemCategories list to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleBulkShare = itemCategories => {\n    const itemList = itemCategories.map(\n      itemCategory =>\n        `${itemCategory.name}\\nMobile: ${itemCategory.mobile}\\nEmail: ${\n          itemCategory.email\n        }`\n    );\n\n    const message = itemList.join('\\n\\n\\n');\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify itemCategories\n   *\n   * @param {Object[]} itemCategories List of itemCategories selected to be notified\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = itemCategories => {\n    this.setState({\n      selectedItemCategories: itemCategories,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify itemCategories\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Perform post close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseNotificationForm\n   * @description Perform post close notification form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseNotificationForm = () => {\n    this.setState({ notificationBody: undefined });\n  };\n\n  render() {\n    const {\n      itemCategories,\n      itemCategory,\n      loading,\n      posting,\n      page,\n      showForm,\n      searchQuery,\n      total,\n    } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedItemCategories,\n      notificationBody,\n    } = this.state;\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for Item Categories here ...',\n            onChange: this.searchItemCategories,\n            value: searchQuery,\n          }}\n          actions={[\n            {\n              label: 'New Item Category',\n              icon: 'plus',\n              size: 'large',\n              title: 'Add New Item Category',\n              onClick: this.openItemCategoryForm,\n            },\n          ]}\n        />\n        {/* end Topbar */}\n\n        <div className=\"ItemCategories\">\n          {/* list starts */}\n          <ItemCategoriesList\n            total={total}\n            page={page}\n            itemCategories={itemCategories}\n            loading={loading}\n            onEdit={this.handleEdit}\n            onNotify={this.openNotificationForm}\n            onShare={this.handleShare}\n            onBulkShare={this.handleBulkShare}\n          />\n          {/* end list */}\n\n          {/* filter modal */}\n          <Modal\n            title=\"Filter Item Categories\"\n            visible={showFilters}\n            onCancel={this.closeFiltersModal}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            width=\"50%\"\n          />\n          {/* end filter modal */}\n\n          {/* Notification Modal modal */}\n          <Modal\n            title=\"Notify Item Categories\"\n            visible={showNotificationForm}\n            onCancel={this.closeNotificationForm}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            width=\"40%\"\n            afterClose={this.handleAfterCloseNotificationForm}\n          >\n            <NotificationForm\n              recipients={selectedItemCategories}\n              onSearchRecipients={getItemCategoriesFromAPI}\n              body={notificationBody}\n              onCancel={this.closeNotificationForm}\n              onNotify={() => {}}\n            />\n          </Modal>\n          {/* end Notification modal */}\n\n          {/* create/edit form modal */}\n          <Modal\n            title={isEditForm ? 'Edit Item Category' : 'Add New Item Category'}\n            visible={showForm}\n            footer={null}\n            onCancel={this.closeItemCategoryForm}\n            destroyOnClose\n            maskClosable={false}\n            afterClose={this.handleAfterCloseForm}\n          >\n            <ItemForm\n              posting={posting}\n              isEditForm={isEditForm}\n              itemCategory={itemCategory}\n              onCancel={this.closeItemCategoryForm}\n            />\n          </Modal>\n          {/* end create/edit form modal */}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(ItemCategories, {\n  itemCategories: 'itemCategories.list',\n  itemCategory: 'itemCategories.selected',\n  loading: 'itemCategories.loading',\n  posting: 'itemCategories.posting',\n  page: 'itemCategories.page',\n  showForm: 'itemCategories.showForm',\n  total: 'itemCategories.total',\n  searchQuery: 'itemCategories.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport ItemCategories from '../components/ItemCategories';\n\n/**\n * @function\n * @name ResourceItemCategoriesLayout\n * @description Render resources Item Categories layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourceItemCategoriesLayout = () => <ItemCategories />;\n\nexport default ResourceItemCategoriesLayout;\n","import {\n  clearItemFilters,\n  Connect,\n  filterItems,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name ItemsFilters\n * @description Filter modal component for filtering items\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemsFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        uoms: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    uoms: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterItems(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearItemFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      types,\n      uoms,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start type filters */}\n        <Form.Item {...formItemLayout} label=\"By Types\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end type filters */}\n\n        {/* start unit of measure filters */}\n        <Form.Item {...formItemLayout} label=\"By Unit of Measurement\">\n          {getFieldDecorator('uom', {\n            initialValue: filter ? filter.uom : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {uoms.map(uom => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={uom}>\n                    <Checkbox value={uom}>{uom}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end uom filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button type=\"primary\" htmlType=\"submit\" style={{ marginLeft: 8 }}>\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(ItemsFilters), {\n  types: 'items.schema.properties.type.enum',\n  uoms: 'items.schema.properties.uom.enum',\n  filter: 'items.filter',\n});\n","import { Connect, postItem, putItem } from '@codetanzania/emis-api-states';\nimport { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { TextArea } = Input;\nconst { getItemCategories, getItemUnits } = httpActions;\n\n/**\n * @class\n * @name ItemForm\n * @description Render Item form for creating and updating\n * item details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    item: PropTypes.shape({\n      _id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      maxStockAllowed: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      minStockAllowed: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    uoms: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      item,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedItem = Object.assign({}, item, values);\n          putItem(\n            updatedItem,\n            () => {\n              notifySuccess('Item was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating item, please try again!'\n              );\n            }\n          );\n        } else {\n          postItem(\n            values,\n            () => {\n              notifySuccess('Item was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving item, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      item,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        <Row>\n          <Col span={11}>\n            {/* name */}\n            <Form.Item {...formItemLayout} label=\"Name\">\n              {getFieldDecorator('name', {\n                initialValue: isEditForm ? item.name : undefined,\n                rules: [{ required: true, message: 'Item name is required' }],\n              })(<Input />)}\n            </Form.Item>\n            {/* end name */}\n          </Col>\n          <Col span={11} offset={2}>\n            {/* code */}\n            <Form.Item {...formItemLayout} label=\"Code\">\n              {getFieldDecorator('code', {\n                initialValue: isEditForm ? item.code : undefined,\n                rules: [{ required: true, message: 'code is required' }],\n              })(<Input />)}\n            </Form.Item>\n            {/* end code */}\n          </Col>\n        </Row>\n\n        <Row>\n          <Col span={11}>\n            {/* Type */}\n            <Form.Item {...formItemLayout} label=\"Category\">\n              {getFieldDecorator('type', {\n                initialValue: isEditForm ? item.type : undefined,\n                rules: [{ required: true, message: 'Category is required' }],\n              })(\n                <SearchableSelectInput\n                  onSearch={getItemCategories}\n                  optionLabel=\"value\"\n                  optionValue=\"value\"\n                  initialValue={isEditForm ? item.type : undefined}\n                />\n              )}\n            </Form.Item>\n            {/* end type */}\n          </Col>\n          <Col span={11} offset={2}>\n            {/* unit of measure */}\n            <Form.Item {...formItemLayout} label=\"Unit\">\n              {getFieldDecorator('uom', {\n                initialValue: isEditForm ? item.uom : undefined,\n                rules: [{ required: true, message: 'Unit is required' }],\n              })(\n                <SearchableSelectInput\n                  onSearch={getItemUnits}\n                  optionLabel=\"value\"\n                  optionValue=\"value\"\n                  initialValue={isEditForm ? item.uom : undefined}\n                />\n              )}\n            </Form.Item>\n            {/* end unit of measure */}\n          </Col>\n        </Row>\n\n        {/* description */}\n        <Form.Item {...formItemLayout} label=\"Description\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? item.description : undefined,\n          })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n        </Form.Item>\n        {/* end description */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(ItemForm), {\n  types: 'items.schema.properties.type.enum',\n  uoms: 'items.schema.properties.uom.enum',\n});\n","import { Avatar, Checkbox, Col, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport truncate from 'lodash/truncate';\nimport React, { Component } from 'react';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\n/* constants */\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name ListItem\n * @description Single list item component.\n * Render single item details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    abbreviation: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseEnter ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseLeave ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List Item checkbox\n   *\n   * @param {Object} event - Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a item\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const { abbreviation, type, name, description, onEdit } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>\n          {abbreviation}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"ListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={6}>{name}</Col>\n          <Col span={4}>{type}</Col>\n          <Col span={10} title={description}>\n            {truncate(description, { length: 140 })}\n          </Col>\n          <Col span={1}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Item',\n                  title: 'Update Item Details',\n                  onClick: onEdit,\n                }}\n                archive={{\n                  name: 'Archive Item',\n                  title: 'Remove Item from list of active items',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  deleteItem,\n  paginateItems,\n  refreshItems,\n} from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport intersectionBy from 'lodash/intersectionBy';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport ListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport ListItem from '../ListItem';\n\n/* constants */\nconst headerLayout = [\n  { span: 6, header: 'Name' },\n  { span: 4, header: 'Type' },\n  { span: 10, header: 'Description' },\n];\nconst { getItemsExportUrl } = httpActions;\n\n/**\n * @class\n * @name ItemsList\n * @description Render ItemsList component which have actionBar, Items\n * header and Items list components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemsList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onShare: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedItems: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectItem\n   * @description Handle select a single item action\n   *\n   * @param {Object} item selected item object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectItem = item => {\n    const { selectedItems } = this.state;\n    this.setState({\n      selectedItems: concat([], selectedItems, item),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all items actions from current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedItems, selectedPages } = this.state;\n    const { items, page } = this.props;\n    const selectedList = uniqBy([...selectedItems, ...items], '_id');\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedItems: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all items in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { items, page } = this.props;\n    const { selectedItems, selectedPages } = this.state;\n    const selectedList = uniqBy([...selectedItems], '_id');\n    const pages = uniq([...selectedPages]);\n\n    remove(pages, item => item === page);\n\n    items.forEach(resourceItem => {\n      remove(\n        selectedList,\n        item => item._id === resourceItem._id // eslint-disable-line\n      );\n    });\n\n    this.setState({\n      selectedItems: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleFilterByStatus\n   * @description Handle filter items by status action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleFilterByStatus = () => {\n    // if (status === 'All') {\n    //   filter({});\n    // } else if (status === 'Active') {\n    //   filter({});\n    // } else if (status === 'Archived') {\n    //   filter({});\n    // }\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectItem\n   * @description Handle deselect a single item action\n   *\n   * @param {Object} resourceItem item to be removed from selected items\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectItem = resourceItem => {\n    const { selectedItems } = this.state;\n    const selectedList = [...selectedItems];\n\n    remove(\n      selectedList,\n      item => item._id === resourceItem._id // eslint-disable-line\n    );\n\n    this.setState({ selectedItems: selectedList });\n  };\n\n  render() {\n    const {\n      items,\n      loading,\n      page,\n      total,\n      onEdit,\n      onFilter,\n      onShare,\n    } = this.props;\n    const { selectedItems, selectedPages } = this.state;\n    const selectedItemsCount = intersectionBy(\n      this.state.selectedItems,\n      items,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"item\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedItemsCount}\n          exportUrl={getItemsExportUrl({\n            filter: { _id: map(selectedItems, '_id') },\n          })}\n          onFilter={onFilter}\n          onPaginate={nextPage => {\n            paginateItems(nextPage);\n          }}\n          onRefresh={() =>\n            refreshItems(\n              () => {\n                notifySuccess('Items refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing Items please contact system administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end toolbar */}\n\n        {/* item list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* end item list header */}\n\n        {/* items list */}\n        <List\n          loading={loading}\n          dataSource={items}\n          renderItem={item => (\n            <ListItem\n              key={item._id} // eslint-disable-line\n              abbreviation={item.name.charAt(0).toUpperCase()}\n              name={item.name}\n              type={item.type ? item.type : 'N/A'}\n              description={item.description ? item.description : 'N/A'}\n              isSelected={\n                // eslint-disable-next-line\n                map(selectedItems, item => item._id).includes(\n                  item._id // eslint-disable-line\n                )\n              }\n              onSelectItem={() => {\n                this.handleOnSelectItem(item);\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectItem(item);\n              }}\n              onEdit={() => onEdit(item)}\n              onArchive={() =>\n                deleteItem(\n                  item._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('Item was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      'An Error occurred while archiving Item please contact system administrator'\n                    );\n                  }\n                )\n              }\n              onShare={() => {\n                onShare(item);\n              }}\n            />\n          )}\n        />\n        {/* end items list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default ItemsList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  closeItemForm,\n  Connect,\n  getItems,\n  openItemForm,\n  searchItems,\n  selectItem,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport NotificationForm from '../../../components/NotificationForm';\nimport Topbar from '../../../components/Topbar';\nimport ItemFilters from './Filters';\nimport ItemForm from './Form';\nimport ItemsList from './List';\nimport './styles.css';\n\n/* constants */\nconst { getItems: getItemsFromAPI } = httpActions;\n\n/**\n * @class\n * @name Items\n * @description Render item list which have search box, actions and a list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Items extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedItems: [],\n    notificationBody: undefined,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        maxStockAllowed: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        minStockAllowed: PropTypes.string.isRequired,\n        description: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n    item: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    searchQuery: PropTypes.string,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    item: null,\n    searchQuery: undefined,\n  };\n\n  componentDidMount() {\n    getItems();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openItemForm\n   * @description Open item form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openItemForm = () => {\n    openItemForm();\n  };\n\n  /**\n   * @function\n   * @name openItemForm\n   * @description close item form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeItemForm = () => {\n    closeItemForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchItems\n   * @description Search Items List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchItems = event => {\n    searchItems(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} item item to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = item => {\n    selectItem(item);\n    this.setState({ isEditForm: true });\n    openItemForm();\n  };\n\n  /**\n   * @function\n   * @name handleShare\n   * @description Handle share single item action\n   *\n   * @param {Object} item item to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleShare = item => {\n    const message = `${item.name}\\nMobile: ${item.mobile}\\nEmail: ${\n      item.email\n    }`;\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name handleBulkShare\n   * @description Handle share multiple focal People\n   *\n   * @param {Object[]} items focal People list to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleBulkShare = items => {\n    const itemList = items.map(\n      item => `${item.name}\\nMobile: ${item.mobile}\\nEmail: ${item.email}`\n    );\n\n    const message = itemList.join('\\n\\n\\n');\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify items\n   *\n   * @param {Object[]} items List of items selected to be notified\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = items => {\n    this.setState({\n      selectedItems: items,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify items\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Perform post close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseNotificationForm\n   * @description Perform post close notification form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseNotificationForm = () => {\n    this.setState({ notificationBody: undefined });\n  };\n\n  render() {\n    const {\n      items,\n      item,\n      loading,\n      posting,\n      page,\n      showForm,\n      searchQuery,\n      total,\n    } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedItems,\n      notificationBody,\n    } = this.state;\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for items here ...',\n            onChange: this.searchItems,\n            value: searchQuery,\n          }}\n          actions={[\n            {\n              label: 'New Item',\n              icon: 'plus',\n              size: 'large',\n              title: 'Add New Item',\n              onClick: this.openItemForm,\n            },\n          ]}\n        />\n        {/* end Topbar */}\n\n        <div className=\"ItemsList\">\n          {/* list starts */}\n          <ItemsList\n            total={total}\n            page={page}\n            items={items}\n            loading={loading}\n            onEdit={this.handleEdit}\n            onFilter={this.openFiltersModal}\n            onNotify={this.openNotificationForm}\n            onShare={this.handleShare}\n            onBulkShare={this.handleBulkShare}\n          />\n          {/* end list */}\n\n          {/* filter modal */}\n          <Modal\n            title=\"Filter Items\"\n            visible={showFilters}\n            onCancel={this.closeFiltersModal}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            width=\"50%\"\n          >\n            <ItemFilters onCancel={this.closeFiltersModal} />\n          </Modal>\n          {/* end filter modal */}\n\n          {/* Notification Modal modal */}\n          <Modal\n            title=\"Notify Items\"\n            visible={showNotificationForm}\n            onCancel={this.closeNotificationForm}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            width=\"40%\"\n            afterClose={this.handleAfterCloseNotificationForm}\n          >\n            <NotificationForm\n              recipients={selectedItems}\n              onSearchRecipients={getItemsFromAPI}\n              body={notificationBody}\n              onCancel={this.closeNotificationForm}\n              onNotify={() => {}}\n            />\n          </Modal>\n          {/* end Notification modal */}\n\n          {/* create/edit form modal */}\n          <Modal\n            title={isEditForm ? 'Edit Item' : 'Add New Item'}\n            visible={showForm}\n            footer={null}\n            onCancel={this.closeItemForm}\n            destroyOnClose\n            maskClosable={false}\n            afterClose={this.handleAfterCloseForm}\n          >\n            <ItemForm\n              posting={posting}\n              isEditForm={isEditForm}\n              item={item}\n              onCancel={this.closeItemForm}\n            />\n          </Modal>\n          {/* end create/edit form modal */}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(Items, {\n  items: 'items.list',\n  item: 'items.selected',\n  loading: 'items.loading',\n  posting: 'items.posting',\n  page: 'items.page',\n  showForm: 'items.showForm',\n  total: 'items.total',\n  searchQuery: 'items.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport ItemList from '../components/Items';\n\n/**\n * @function\n * @name ResourceItemsLayout\n * @description Render resources items layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourceItemsLayout = () => <ItemList />;\n\nexport default ResourceItemsLayout;\n","import { Avatar, Col, Row, Checkbox, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport truncate from 'lodash/truncate';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name ItemUnitListItem\n * @description Single item unit of measure list item component.\n * Render single item unit of measure list item details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemUnitListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    abbreviation: PropTypes.number.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onArchive: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description show item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description hide item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle toggling list item checkbox\n   *\n   * @param {Object} event Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a item unit of measure\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const {\n      name,\n      description,\n      color,\n      abbreviation,\n      isSelected,\n      onEdit,\n    } = this.props;\n    const { isHovered } = this.state;\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: color }}>\n          {name.charAt(0).toUpperCase()}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"ItemUnitListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent} </Col>\n          <Col span={6}>{name}</Col>\n          <Col span={6}>{abbreviation}</Col>\n          <Col span={6} title={description}>\n            {description\n              ? truncate(description, {\n                  length: 60,\n                })\n              : 'N/A'}\n          </Col>\n          <Col span={4}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit unit of measure',\n                  title: 'Update unit of measure Details',\n                  onClick: onEdit,\n                }}\n                archive={{\n                  name: 'Archive unit of measure',\n                  title:\n                    'Remove unit of measure from the list of active item unit of measure',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default ItemUnitListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  refreshItemUnits,\n  paginateItemUnits,\n  deleteItemUnit,\n} from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport intersectionBy from 'lodash/intersectionBy';\nimport PropTypes from 'prop-types';\nimport React, { Fragment, Component } from 'react';\nimport ItemUnitListItem from '../ListItem';\nimport ListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst headerLayout = [\n  { span: 6, header: 'Name' },\n  { span: 6, header: 'Abbreviation' },\n  { span: 6, header: 'Description' },\n];\n\nconst { getItemUnitsExportUrl } = httpActions;\n\n/**\n * @class\n * @name ItemUnitList\n * @description Render item unit of measure list which have search box and actions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemUnitList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    itemUnits: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n      })\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedItemUnit: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleSelectItemUnit\n   * @description Handle select single  item unit of measure checkbox\n   *\n   * @param {Object} itemUnit selected  item unit of measure object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectItemUnit = itemUnit => {\n    const { selectedItemUnit } = this.state;\n    this.setState({\n      selectedItemUnit: concat([], selectedItemUnit, itemUnit),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all  item unit of measure action in current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedItemUnit, selectedPages } = this.state;\n    const { itemUnits, page } = this.props;\n    const selectedList = uniqBy([...selectedItemUnit, ...itemUnits], '_id');\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedItemUnit: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectItemUnit\n   * @description Handle deselect a single  item unit of measure checkbox\n   *\n   * @param {Object} itemUnit  item unit of measure objected to be removed from\n   * list of selected adjustments\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectItemUnit = itemUnit => {\n    const { selectedItemUnit } = this.state;\n    const selectedList = [...selectedItemUnit];\n\n    remove(selectedList, item => item._id === itemUnit._id); // eslint-disable-line\n\n    this.setState({\n      selectedItemUnit: selectedList,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all item unit of measure in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { itemUnits, page } = this.props;\n    const { selectedItemUnit, selectedPages } = this.state;\n    const selectedList = [...selectedItemUnit];\n    const pages = [...selectedPages];\n\n    remove(pages, item => item === page);\n\n    itemUnits.forEach(itemUnit => {\n      remove(selectedList, item => item._id === itemUnit._id); // eslint-disable-line\n    });\n\n    this.setState({\n      selectedItemUnit: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  render() {\n    const { itemUnits, loading, total, page, onEdit } = this.props;\n    const { selectedItemUnit, selectedPages } = this.state;\n    const selectedItemUnitsCount = intersectionBy(\n      this.state.selectedItemUnit,\n      itemUnits,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"unit of measure\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedItemUnitsCount}\n          onPaginate={nextPage => {\n            paginateItemUnits(nextPage);\n          }}\n          exportUrl={getItemUnitsExportUrl({\n            filter: { _id: map(selectedItemUnit, '_id') },\n          })}\n          onRefresh={() =>\n            refreshItemUnits(\n              () => {\n                notifySuccess('Unit of measure refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing unit of measure please contact system administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end toolbar */}\n\n        {/* list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* list header */}\n\n        {/* Item Unit Of Measure list */}\n        <List\n          loading={loading}\n          dataSource={itemUnits}\n          renderItem={itemUnit => (\n            <ItemUnitListItem\n              key={itemUnit.id}\n              name={itemUnit.value}\n              abbreviation={itemUnit.abbreviation}\n              description={itemUnit.description}\n              color={itemUnit.color}\n              isSelected={\n                map(selectedItemUnit, '_id').includes(itemUnit._id) //eslint-disable-line\n              }\n              onSelectItem={() => {\n                this.handleSelectItemUnit(itemUnit);\n              }}\n              onDeselectItem={() => {\n                this.handleDeselectItemUnit(itemUnit);\n              }}\n              onEdit={() => onEdit(itemUnit)}\n              onArchive={() =>\n                deleteItemUnit(\n                  itemUnit._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('Unit of measure was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      `An error occurred while archiving unit of measure please contact\n                   system administrator`\n                    );\n                  }\n                )\n              }\n            />\n          )}\n        />\n        {/* end Item Unit Of Measure list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default ItemUnitList;\n","import { putItemUnit, postItemUnit } from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Col, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport './styles.css';\n\nconst { TextArea } = Input;\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @class\n * @name ItemUnitForm\n * @description  Render form for creating a new Item Unit Of Measure\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemUnitForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    itemUnit: PropTypes.shape({\n      name: PropTypes.string,\n      type: PropTypes.string,\n      maxStockAllowed: PropTypes.string,\n      minStockAllowed: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    itemUnit: null,\n  };\n\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * @function\n   * @name onChangeColor\n   * @description  call back function to handle color change\n   *\n   * @param {Object} colors colors object\n   * @param {Object} colors.color current color\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  onChangeColor = ({ color }) => {\n    const {\n      form: { setFieldsValue },\n    } = this.props;\n    setFieldsValue({ color });\n  };\n\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * @function\n   * @name handleSubmit\n   * @description  call back function to handle submit action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      itemUnit,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedItem = Object.assign({}, itemUnit, values);\n          putItemUnit(\n            updatedItem,\n            () => {\n              notifySuccess('Unit of measure was updated successfully');\n            },\n            () => {\n              notifyError(\n                'An error occurred while updating unit of measure, please try again!'\n              );\n            }\n          );\n        } else {\n          postItemUnit(\n            values,\n            () => {\n              notifySuccess('Unit of measure was created successfully');\n            },\n            () => {\n              notifyError(\n                'An error occurred while saving unit of measure, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      itemUnit,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={16}>\n            {/* name */}\n            <Form.Item {...formItemLayout} label=\"Name\">\n              {getFieldDecorator('value', {\n                initialValue: isEditForm ? itemUnit.value : undefined,\n                rules: [\n                  {\n                    required: true,\n                    message: 'Unit of measure name is required',\n                  },\n                ],\n              })(<Input />)}\n            </Form.Item>\n            {/* end name */}\n          </Col>\n          <Col span={7}>\n            {/* abbreviation */}\n            <Form.Item {...formItemLayout} label=\"Abbreviation\">\n              {getFieldDecorator('abbreviation', {\n                initialValue: isEditForm ? itemUnit.abbreviation : undefined,\n                rules: [\n                  { required: true, message: 'Abbreviation is required' },\n                ],\n              })(<Input />)}\n            </Form.Item>\n            {/* end abbreviation */}\n          </Col>\n        </Row>\n\n        {/* description */}\n        <Form.Item {...formItemLayout} label=\"Description\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? itemUnit.description : undefined,\n            rules: [{ message: 'Add summaries' }],\n          })(<TextArea />)}\n        </Form.Item>\n        {/* end description */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(ItemUnitForm);\n","import {\n  Connect,\n  openItemUnitForm,\n  closeItemUnitForm,\n  selectItemUnit,\n  getItemUnits,\n  searchItemUnits,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport Topbar from '../../../components/Topbar';\nimport ItemUnitList from './List';\nimport ItemUnitForm from './Form';\nimport './styles.css';\n\n/**\n * @class\n * @name ItemUnit\n * @description Render Item unit of measure module which has search box,\n *  actions and list of Item unit of measures\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass ItemUnit extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    itemUnits: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    itemUnit: PropTypes.shape({ name: PropTypes.string }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    searchQuery: PropTypes.string,\n    showForm: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    searchQuery: undefined,\n    itemUnit: null,\n  };\n\n  state = {\n    isEditForm: false,\n  };\n\n  componentDidMount() {\n    getItemUnits();\n  }\n\n  /**\n   * @function\n   * @name openForm\n   * @description Open role form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openItemUnitForm();\n  };\n\n  /**\n   * @function\n   * @name openForm\n   * @description close role form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeItemUnitForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} value - item to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = value => {\n    selectItemUnit(value);\n    this.setState({ isEditForm: true });\n    openItemUnitForm();\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Performs after close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchRoles\n   * @description Search item unit of measure List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchItemUnit = event => {\n    searchItemUnits(event.target.value);\n  };\n\n  render() {\n    const {\n      itemUnits,\n      loading,\n      showForm,\n      posting,\n      page,\n      total,\n      itemUnit,\n      searchQuery,\n    } = this.props;\n    const { isEditForm } = this.state;\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for unit of measure here ...',\n            onChange: this.searchItemUnit,\n            value: searchQuery,\n          }}\n          actions={[\n            {\n              label: 'New Unit Of Measure',\n              icon: 'plus',\n              size: 'large',\n              title: 'Add new unit of measure',\n              onClick: this.openForm,\n            },\n          ]}\n        />\n        {/* end Topbar */}\n\n        <div className=\"ItemUnitList\">\n          {/* list starts */}\n          <ItemUnitList\n            itemUnits={itemUnits}\n            loading={loading}\n            total={total}\n            page={page}\n            onEdit={this.handleEdit}\n          />\n          {/* end list */}\n\n          {/* create/edit form modal */}\n          <Modal\n            title={\n              isEditForm ? 'Edit unit of measure' : 'Add new unit of measure'\n            }\n            visible={showForm}\n            footer={null}\n            onCancel={this.closeForm}\n            destroyOnClose\n            maskClosable={false}\n            afterClose={this.handleAfterCloseForm}\n          >\n            <ItemUnitForm\n              posting={posting}\n              isEditForm={isEditForm}\n              itemUnit={itemUnit}\n              onCancel={this.closeForm}\n            />\n          </Modal>\n          {/* end create/edit form modal */}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(ItemUnit, {\n  itemUnits: 'itemUnits.list',\n  itemUnit: 'itemUnits.selected',\n  loading: 'itemUnits.loading',\n  page: 'itemUnits.page',\n  showForm: 'itemUnits.showForm',\n  total: 'itemUnits.total',\n  searchQuery: 'itemUnits.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport ItemUnit from '../components/ItemUnits';\n\n/**\n * @function\n * @name ResourcesItemUnitLayout\n * @description Render resources Item unit of measure layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourcesItemUnitLayout = () => <ItemUnit />;\n\nexport default ResourcesItemUnitLayout;\n","import { postStock, putStock } from '@codetanzania/emis-api-states';\nimport { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Form, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getAgencies, getWarehouses, getItems } = httpActions;\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @class\n * @name StockForm\n * @description  Render form for creating a new stock\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass StockForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    stock: PropTypes.shape({\n      stock: PropTypes.object,\n      item: PropTypes.object,\n      quantity: PropTypes.number,\n      _id: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description  call back function to handle submit action\n   *\n   * @param {Object} e event object\n   *\n   * @returns {undefined} does not return anything\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      stock,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedStock = Object.assign({}, stock, values);\n          putStock(\n            updatedStock,\n            () => {\n              notifySuccess('Stock was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating stock, please try again!'\n              );\n            }\n          );\n        } else {\n          postStock(\n            values,\n            () => {\n              notifySuccess('Stock was created successfully');\n            },\n            () => {\n              notifyError(\n                'An Error occured while saving stock, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      stock,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* stock stakeholder */}\n        <Form.Item {...formItemLayout} label=\"Agency\">\n          {getFieldDecorator('owner', {\n            initialValue:\n              isEditForm && stock.owner ? stock.owner._id : undefined, // eslint-disable-line\n            rules: [{ required: true, message: 'Stock Owner is required' }],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Please select stakeholder\"\n              onSearch={getAgencies}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm && stock.owner ? stock.owner : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end stock stakeholder */}\n\n        {/* stock Item */}\n        <Form.Item {...formItemLayout} label=\"Item\">\n          {getFieldDecorator('item', {\n            initialValue: isEditForm ? stock.item._id : undefined, // eslint-disable-line\n            rules: [{ required: true, message: 'Stock item is required' }],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Please select item\"\n              onSearch={getItems}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? stock.item : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end stock Item */}\n\n        {/* stock Warehouse */}\n        <Form.Item {...formItemLayout} label=\"Warehouse\">\n          {getFieldDecorator('store', {\n            initialValue: isEditForm ? stock.store._id : undefined, // eslint-disable-line\n            rules: [{ required: true, message: 'warehouse is required' }],\n          })(\n            <SearchableSelectInput\n              placeholder=\"Please select warehouse\"\n              onSearch={getWarehouses}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              initialValue={isEditForm ? stock.store : undefined}\n            />\n          )}\n        </Form.Item>\n        {/* end stock number */}\n\n        {/* stock quantity */}\n        <Form.Item {...formItemLayout} label=\"Quantity\">\n          {getFieldDecorator('quantity', {\n            initialValue: isEditForm ? stock.quantity : undefined,\n          })(<Input />)}\n        </Form.Item>\n        {/* end stock quantity */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(StockForm);\n","import { Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nconst { Option } = Select;\n\n/**\n *\n * @function\n * @name SelectInput\n * @description Render Select input wrapper on top of antd select input\n *\n * @param {Object} props props object\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst SelectInput = ({ options, ...props }) => (\n  <Select {...props}>\n    {options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ))}\n  </Select>\n);\n\n/* props validation */\nSelectInput.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default SelectInput;\n","import { Connect, postAdjustment } from '@codetanzania/emis-api-states';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Radio, Input, InputNumber } from 'antd';\nimport SelectInput from '../../../../components/SelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name AdjustmentForm\n * @description Form which will be used to adjust stock values\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AdjustmentForm extends Component {\n  static propTypes = {\n    reasons: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n    stock: PropTypes.shape({\n      stock: PropTypes.object,\n      item: PropTypes.object,\n      quantity: PropTypes.number,\n      _id: PropTypes.string,\n    }).isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle on submit action for adjustment form\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      stock,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      /* eslint-disable */\n      const adjustment = {\n        ...values,\n        item: stock.item._id,\n        party: stock.owner._id,\n        store: stock.store._id,\n        stock: stock._id,\n      };\n      /* eslint-enable */\n\n      if (!error) {\n        postAdjustment(\n          adjustment,\n          () => {\n            notifySuccess('Adjustment was affected successfully');\n          },\n          () => {\n            notifyError(\n              'An error occurred while adjusting stock quantity, please contact your system administrator'\n            );\n          }\n        );\n      }\n    });\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      posting,\n      reasons,\n      types,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* adjustment type */}\n        <Form.Item {...formItemLayout} label=\"Adjustment Action\">\n          {getFieldDecorator('type', {\n            rules: [\n              { required: true, message: 'Adjustment actions is required' },\n            ],\n          })(\n            <Radio.Group>\n              {types.map(type => (\n                <Radio value={type} key={type}>\n                  {type}\n                </Radio>\n              ))}\n            </Radio.Group>\n          )}\n        </Form.Item>\n        {/* end adjustment type */}\n\n        {/* adjustment reason */}\n        <Form.Item {...formItemLayout} label=\"Adjustment Reason\">\n          {getFieldDecorator('reason', {\n            rules: [\n              {\n                required: true,\n                message: 'Reason for adjustment is required',\n              },\n            ],\n          })(<SelectInput options={reasons} />)}\n        </Form.Item>\n        {/* end adjustment reason */}\n\n        {/* adjustment quantity */}\n        <Form.Item {...formItemLayout} label=\"Quantity\">\n          {getFieldDecorator('quantity', { initialValue: 0 })(\n            <InputNumber min={0} style={{ width: '100%' }} />\n          )}\n        </Form.Item>\n        {/* end adjustment quantity */}\n\n        {/* adjustment cost */}\n        <Form.Item {...formItemLayout} label=\"Cost\">\n          {getFieldDecorator('cost', {\n            initialValue: 0,\n            rules: [\n              {\n                required: true,\n                message: 'Cost related to adjustment is required',\n              },\n            ],\n          })(<InputNumber min={0} style={{ width: '100%' }} />)}\n        </Form.Item>\n        {/* end adjustment cost */}\n\n        {/* adjustment remarks */}\n        <Form.Item {...formItemLayout} label=\"Adjustment Remarks\">\n          {getFieldDecorator('remarks', {\n            rules: [\n              {\n                required: true,\n                message: 'Adjustments remarks/comments are required',\n              },\n            ],\n          })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n        </Form.Item>\n        {/* end adjustment remarks */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(AdjustmentForm), {\n  reasons: 'adjustments.schema.properties.reason.enum',\n  types: 'adjustments.schema.properties.type.enum',\n  stock: 'stocks.selected',\n});\n","import { Avatar, Checkbox, Col, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\n/**\n * @class\n * @name StockListItem\n * @description Single stock list item component. Render single stock details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass StockListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    itemName: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onAdjust: PropTypes.func.isRequired,\n    warehouseName: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n    quantity: PropTypes.number.isRequired,\n    uom: PropTypes.string.isRequired,\n    owner: PropTypes.shape({ name: PropTypes.string }).isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description show item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description hide item actions on hover\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List Item checkbox\n   *\n   * @param {Object} event Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  render() {\n    const {\n      itemName,\n      warehouseName,\n      color,\n      quantity,\n      owner,\n      uom,\n      isSelected,\n      onEdit,\n      onAdjust,\n    } = this.props;\n    const { isHovered } = this.state;\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: color }}>\n          {itemName.toUpperCase().charAt(0)}\n        </Avatar>\n      );\n    }\n    return (\n      <div\n        className=\"StockListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent} </Col>\n          <Col span={5}>{owner}</Col>\n          <Col span={5}>{itemName}</Col>\n          <Col span={5}>{`${quantity} ${uom}`}</Col>\n          <Col span={5}>{warehouseName}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Stock',\n                  title: 'Update stock details',\n                  onClick: onEdit,\n                }}\n                transfer={{\n                  name: 'Transfer Stock',\n                  title: 'Move stock to another warehouse',\n                }}\n                adjust={{\n                  name: 'Adjust Stock',\n                  title: 'Adjust stock quantity',\n                  onClick: onAdjust,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default StockListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { paginateStocks, refreshStocks } from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport concat from 'lodash/concat';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport remove from 'lodash/remove';\nimport map from 'lodash/map';\nimport intersectionBy from 'lodash/intersectionBy';\nimport React, { Fragment, Component } from 'react';\nimport StockListItem from '../ListItem';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport ListHeader from '../../../../components/ListHeader';\n\n/* constants */\nconst headerLayout = [\n  { span: 5, header: 'Owner' },\n  { span: 5, header: 'Item' },\n  { span: 5, header: 'Quantity (Unit)' },\n  { span: 5, header: 'Warehouse' },\n];\nconst { getStocksExportUrl } = httpActions;\n\n/**\n * @class\n * @name StockList\n * @description Render stock list which has search box and actions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass StockList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    stocks: PropTypes.arrayOf(\n      PropTypes.shape({\n        stock: PropTypes.object,\n        item: PropTypes.object,\n        quantity: PropTypes.number,\n        _id: PropTypes.string,\n      })\n    ).isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onAdjust: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedStocks: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleSelectStock\n   * @description Handle selection of a single stock checkbox\n   *\n   * @param {Object} stock selected stock object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectStock = stock => {\n    const { selectedStocks } = this.state;\n    this.setState({\n      selectedStocks: concat([], selectedStocks, stock),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all stocks action for current displayed page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedStocks, selectedPages } = this.state;\n    const { stocks, page } = this.props;\n    const selectedList = uniqBy([...selectedStocks, ...stocks], '_id');\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedStocks: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectStock\n   * @description Handle deselect as single stock checkbox action\n   *\n   * @param {Object} stock deselected stock object\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectStock = stock => {\n    const { selectedStocks } = this.state;\n    const selectedList = [...selectedStocks];\n    remove(selectedList, item => item._id === stock._id); // eslint-disable-line\n\n    this.setState({ selectedStocks: selectedList });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselected bulk action for stocks displayed in a list\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { stocks, page } = this.props;\n    const { selectedStocks, selectedPages } = this.state;\n    const selectedList = [...selectedStocks];\n    const pages = [...selectedPages];\n\n    remove(pages, item => item === page);\n\n    stocks.forEach(stock => {\n      remove(selectedList, item => item._id === stock._id); // eslint-disable-line\n    });\n\n    this.setState({\n      selectedStocks: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  render() {\n    const { stocks, loading, page, total, onEdit, onAdjust } = this.props;\n    const { selectedStocks, selectedPages } = this.state;\n    const selectedStocksCount = intersectionBy(selectedStocks, stocks, '_id')\n      .length;\n\n    return (\n      <Fragment>\n        {/* Toolbar */}\n        <Toolbar\n          itemName=\"stock\"\n          selectedItemsCount={selectedStocksCount}\n          exportUrl={getStocksExportUrl({\n            filter: { _id: map(selectedStocks, '_id') },\n          })}\n          page={page}\n          total={total}\n          onPaginate={nextPage => paginateStocks(nextPage)}\n          onRefresh={() =>\n            refreshStocks(\n              () => {\n                notifySuccess('Stocks refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing Stocks, please contact System administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end Toolbar */}\n\n        {/* stocks list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* end stocks list header */}\n\n        {/* stock list */}\n        <List\n          loading={loading}\n          dataSource={stocks}\n          renderItem={stock => {\n            const { item, store } = stock;\n            const { owner } = stock.owner ? stock : { owner: { name: 'N/A' } };\n            return (\n              <StockListItem\n                key={stock.name}\n                itemName={item.name}\n                warehouseName={store.name}\n                owner={owner.name}\n                color={item.color}\n                uom={item.uom}\n                quantity={stock.quantity}\n                isSelected={map(selectedStocks, '_id').includes(stock._id)} // eslint-disable-line\n                onSelectItem={() => {\n                  this.handleSelectStock(stock);\n                }}\n                onDeselectItem={() => {\n                  this.handleDeselectStock(stock);\n                }}\n                onEdit={() => onEdit(stock)}\n                onAdjust={() => onAdjust(stock)}\n              />\n            );\n          }}\n        />\n        {/* end stock list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default StockList;\n","import {\n  closeStockForm,\n  Connect,\n  getStocks,\n  openStockForm,\n  openAdjustmentForm,\n  closeAdjustmentForm,\n  searchStocks,\n  selectStock,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport Topbar from '../../../components/Topbar';\nimport StockForm from './Form';\nimport AdjustmentForm from './AdjustmentForm';\nimport StockList from './List';\nimport './styles.css';\n\n/**\n * @class\n * @name Stocks\n * @description Render stock module which have search box,\n * actions and stock list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Stocks extends Component {\n  state = {\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    postingAdjustment: PropTypes.bool.isRequired,\n    stocks: PropTypes.arrayOf(\n      PropTypes.shape({\n        stock: PropTypes.object,\n        item: PropTypes.object,\n        quantity: PropTypes.number,\n        _id: PropTypes.string,\n      })\n    ).isRequired,\n    stock: PropTypes.shape({\n      stock: PropTypes.object,\n      item: PropTypes.object,\n      quantity: PropTypes.number,\n      _id: PropTypes.string,\n    }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    showAdjustmentForm: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    stock: null,\n  };\n\n  componentDidMount() {\n    getStocks();\n  }\n\n  /**\n   * @function\n   * @name openStockForm\n   * @description  Open Stock form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openStockForm = () => {\n    openStockForm();\n  };\n\n  /**\n   * @function\n   * @name openStockForm\n   * @description close Stock form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeStockForm = () => {\n    closeStockForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name openAdjustmentForm\n   * @description Open adjustment form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   *\n   */\n  openAdjustmentForm = () => {\n    openAdjustmentForm();\n  };\n\n  /**\n   * @function\n   * @name closeAdjustmentForm\n   * @description close adjustment form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeAdjustmentForm = () => {\n    closeAdjustmentForm();\n  };\n\n  /**\n   * @function\n   * @name searchStocks\n   * @description Search Stocks List based on supplied filter word\n   *\n   * @param {Object} event Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchStocks = event => {\n    searchStocks(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} stock stock to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = stock => {\n    selectStock(stock);\n    this.setState({ isEditForm: true });\n    openStockForm();\n  };\n\n  /**\n   * @function\n   * @name handleAdjustment\n   * @description Handle on adjustment action for list item\n   *\n   * @param {Object} stock stock to be adjusted\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAdjustment = stock => {\n    selectStock(stock);\n    openAdjustmentForm();\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Perform post close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      stocks,\n      stock,\n      loading,\n      posting,\n      postingAdjustment,\n      page,\n      showForm,\n      showAdjustmentForm,\n      total,\n    } = this.props;\n    const { isEditForm } = this.state;\n\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for stocks here...',\n            onChange: this.searchStocks,\n          }}\n          actions={[\n            {\n              label: 'Add New Stock',\n              icon: 'plus',\n              size: 'large',\n              title: 'Add New Stock',\n              onClick: this.openStockForm,\n            },\n          ]}\n        />\n        {/* Topbar */}\n\n        <div className=\"Stocks\">\n          {/* list starts */}\n          <StockList\n            stocks={stocks}\n            loading={loading}\n            total={total}\n            page={page}\n            onEdit={this.handleEdit}\n            onAdjust={this.handleAdjustment}\n          />\n          {/* end list */}\n\n          {/* create/edit form modal */}\n          <Modal\n            title={isEditForm ? 'Edit Stock' : 'Add New Stock'}\n            visible={showForm}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            onCancel={this.closeStockForm}\n            afterClose={this.handleAfterCloseForm}\n          >\n            <StockForm\n              posting={posting}\n              isEditForm={isEditForm}\n              stock={stock}\n              onCancel={this.closeStockForm}\n            />\n          </Modal>\n          {/* end create/edit form modal */}\n\n          <Modal\n            title={`Adjust ${stock ? stock.item.name : 'Stock'}`}\n            visible={showAdjustmentForm}\n            footer={null}\n            maskClosable={false}\n            onCancel={this.closeAdjustmentForm}\n          >\n            <AdjustmentForm\n              posting={postingAdjustment}\n              onCancel={this.closeAdjustmentForm}\n            />\n          </Modal>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(Stocks, {\n  stocks: 'stocks.list',\n  stock: 'stocks.selected',\n  loading: 'stocks.loading',\n  posting: 'stocks.posting',\n  page: 'stocks.page',\n  showForm: 'stocks.showForm',\n  total: 'stocks.total',\n  showAdjustmentForm: 'adjustments.showForm',\n  postingAdjustment: 'adjustments.posting',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Stocks from '../components/Stock';\n\n/**\n * @function\n * @name ResourcesStockLayout\n * @description Render resources stock layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourcesStockLayout = () => <Stocks />;\n\nexport default ResourcesStockLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\n/**\n * @function\n * @name ResourcesUtilizationLayout\n * @description Render resources utilizations layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourcesUtilizationLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Resources Utilization yet,but when they are available will appear here\"\n      buttonLabel=\"New Resource\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default ResourcesUtilizationLayout;\n","import { Avatar, Col, Row, Checkbox, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport randomColor from 'randomcolor';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name WarehouseListItem\n * @description Single warehouse list item component.\n * Render single warehouse details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WarehouseListItem extends Component {\n  /* props validation */\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    family: PropTypes.string.isRequired,\n    nature: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n    onArchive: PropTypes.func.isRequired,\n  };\n\n  state = {\n    isHovered: false,\n  };\n\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List Item checkbox\n   *\n   * @param {Object} event - Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a warehouse\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const { name, family, nature, type, onEdit } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    let sideComponent = null;\n    const avatarBackground = randomColor();\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>\n          {name.charAt(0).toUpperCase()}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"WarehouseListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={5}>{name}</Col>\n          <Col span={6}>{nature}</Col>\n          <Col span={4}>{family}</Col>\n          <Col span={4}>{type}</Col>\n          <Col span={3}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Warehouse',\n                  title: 'Update Warehouse Details',\n                  onClick: onEdit,\n                }}\n                archive={{\n                  name: 'Archive Warehouse',\n                  title: 'Remove warehouse from the list of active Warehouses',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default WarehouseListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  refreshWarehouses,\n  paginateWarehouses,\n  deleteWarehouse,\n} from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport PropTypes from 'prop-types';\nimport concat from 'lodash/concat';\nimport intersectionBy from 'lodash/intersectionBy';\nimport map from 'lodash/map';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport remove from 'lodash/remove';\nimport React, { Fragment } from 'react';\nimport ListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport WarehouseListItem from '../ListItem';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { getWarehousesExportUrl } = httpActions;\n\nconst headerLayout = [\n  { span: 5, header: 'Name' },\n  { span: 6, header: 'Nature' },\n  { span: 4, header: 'Family' },\n  { span: 4, header: 'Type' },\n];\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @class\n * @name WarehouseList\n * @description Render warehouse list which have search box and actions\n *\n * @param {Object} props props object\n * @param {Array} props.warehouses array of warehouses\n * @param {boolean} props.loading represents loading status\n * @param {Function} props.onEdit call back function called\n * during editing a stock\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WarehouseList extends React.Component {\n  static propTypes = {\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    warehouses: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        level: PropTypes.string,\n      })\n    ).isRequired,\n  };\n\n  state = {\n    selectedWarehouse: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectWarehouse\n   * @description Handle select a single warehouse action\n   *\n   * @param {Object} warehouse selected warehouse object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectWarehouse = warehouse => {\n    const { selectedWarehouse } = this.state;\n    this.setState({\n      selectedWarehouse: concat([], selectedWarehouse, warehouse),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectWarehouse\n   * @description Handle deselect a single focalPerson action\n   *\n   * @param {Object} warehouse focalPerson to be removed from selected focalPeople\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectWarehouse = warehouse => {\n    const { selectedWarehouse } = this.state;\n    const selectedList = [...selectedWarehouse];\n\n    remove(\n      selectedList,\n      item => item._id === warehouse._id // eslint-disable-line\n    );\n\n    this.setState({ selectedWarehouse: selectedList });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all warehouses actions from current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedWarehouse, selectedPages } = this.state;\n    const { warehouses, page } = this.props;\n    const selectedList = uniqBy([...selectedWarehouse, ...warehouses], '_id');\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedWarehouse: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all warehouses in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { warehouses, page } = this.props;\n    const { selectedWarehouse, selectedPages } = this.state;\n    const selectedList = uniqBy([...selectedWarehouse], '_id');\n    const pages = uniq([...selectedPages]);\n\n    remove(pages, item => item === page);\n\n    warehouses.forEach(warehouse => {\n      remove(\n        selectedList,\n        item => item._id === warehouse._id // eslint-disable-line\n      );\n    });\n\n    this.setState({\n      selectedWarehouse: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  render() {\n    const { warehouses, loading, onEdit, total, page, onFilter } = this.props;\n    const { selectedWarehouse, selectedPages } = this.state;\n    const selectedWarehouseCount = intersectionBy(\n      this.state.selectedWarehouse,\n      warehouses,\n      '_id'\n    ).length;\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"Warehouse\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedWarehouseCount}\n          exportUrl={getWarehousesExportUrl({\n            filter: { _id: map(selectedWarehouse, '_id') },\n          })}\n          onFilter={onFilter}\n          onPaginate={nextPage => {\n            paginateWarehouses(nextPage);\n          }}\n          onRefresh={() =>\n            refreshWarehouses(\n              () => {\n                notifySuccess('Warehouse refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing Warehouses please contact system administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end toolbar */}\n        {/* Warehouse list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* end Warehouse list header */}{' '}\n        <List\n          loading={loading}\n          dataSource={warehouses}\n          renderItem={warehouse => (\n            <WarehouseListItem\n              key={warehouse.name}\n              name={warehouse.name}\n              nature={warehouse.nature}\n              family={warehouse.family}\n              type={warehouse.type}\n              onEdit={() => onEdit(warehouse)}\n              isSelected={\n                // eslint-disable-next-line\n                map(selectedWarehouse, item => item._id).includes(warehouse._id)\n              }\n              onSelectItem={() => {\n                this.handleOnSelectWarehouse(warehouse);\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectWarehouse(warehouse);\n              }}\n              onArchive={() =>\n                deleteWarehouse(\n                  warehouse._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('Warehouse was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      `An Error occurred while archiving Warehouse please contact\n                   system administrator`\n                    );\n                  }\n                )\n              }\n            />\n          )}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default WarehouseList;\n","import {\n  postWarehouse,\n  putWarehouse,\n  Connect,\n} from '@codetanzania/emis-api-states';\nimport { Button, Form, Input, Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\nconst { Option } = Select;\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @class\n * @name WarehouseForm\n * @description  Render form for creating a new warehouse\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WarehouseForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n    warehouse: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description  call back function to handle submit action\n   *\n   * @param {Object} e event object\n   *\n   * @returns {undefined} does not return anything\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      warehouse,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedWarehouse = Object.assign({}, warehouse, values);\n          putWarehouse(\n            updatedWarehouse,\n            () => {\n              notifySuccess('Warehouse was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating warehouse, please try again!'\n              );\n            }\n          );\n        } else {\n          postWarehouse(\n            values,\n            () => {\n              notifySuccess('Warehouse was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving warehouse, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  // eslint-disable-next-line jsdoc/require-returns\n  /**\n   * @function\n   * @name renderSelectOptions\n   * @description  renders select options\n   *\n   * @param {Array} options array of select options\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  renderSelectOptions = options =>\n    options.map(option => (\n      <Option key={option} value={option}>\n        {option}\n      </Option>\n    ));\n\n  render() {\n    const {\n      isEditForm,\n      warehouse,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n      natures,\n      families,\n      types,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* warehouse name */}\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('name', {\n            initialValue: isEditForm ? warehouse.name : undefined,\n            rules: [{ required: true, message: 'Warehouse name is required' }],\n          })(<Input placeholder=\"e.g Lindi\" />)}\n        </Form.Item>\n        {/* end warehouse name */}\n\n        {/* warehouse nature */}\n        <Form.Item {...formItemLayout} label=\"Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: isEditForm ? warehouse.nature : undefined,\n            rules: [\n              { required: true, message: 'Warehouse nature is required' },\n            ],\n          })(<Select showSearch>{this.renderSelectOptions(natures)}</Select>)}\n        </Form.Item>\n        {/* end warehouse nature */}\n\n        {/* warehouse family */}\n        <Form.Item {...formItemLayout} label=\"Family\">\n          {getFieldDecorator('family', {\n            initialValue: isEditForm ? warehouse.family : undefined,\n            rules: [\n              { required: true, message: 'Warehouse family is required' },\n            ],\n          })(<Select showSearch>{this.renderSelectOptions(families)}</Select>)}\n        </Form.Item>\n        {/* end warehouse family */}\n\n        {/* warehouse type */}\n        <Form.Item {...formItemLayout} label=\"Type\">\n          {getFieldDecorator('type', {\n            initialValue: isEditForm ? warehouse.type : undefined,\n            rules: [{ required: true, message: 'Warehouse Type is required' }],\n          })(<Select showSearch>{this.renderSelectOptions(types)}</Select>)}\n        </Form.Item>\n        {/* end warehouse type */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(\n  Connect(WarehouseForm, {\n    natures: 'warehouses.schema.properties.nature.enum',\n    families: 'warehouses.schema.properties.family.enum',\n    types: 'warehouses.schema.properties.type.enum',\n  })\n);\n","import {\n  clearWarehouseFilters,\n  Connect,\n  filterWarehouses,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name WarehousesFilters\n * @description Filter modal component for filtering warehouses\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass WarehousesFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n        phases: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    natures: PropTypes.arrayOf(PropTypes.string).isRequired,\n    families: PropTypes.arrayOf(PropTypes.string).isRequired,\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} e event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterWarehouses(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearWarehouseFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      filter,\n      families,\n      types,\n      natures,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start warehouses nature filters */}\n        <Form.Item {...formItemLayout} label=\"By Nature\">\n          {getFieldDecorator('nature', {\n            initialValue: filter ? filter.nature : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {natures.map(nature => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={nature}>\n                    <Checkbox value={nature}>{nature}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end warehouse nature filters */}\n\n        {/* start warehouses family filters */}\n        <Form.Item {...formItemLayout} label=\"By Family\">\n          {getFieldDecorator('family', {\n            initialValue: filter ? filter.family : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {families.map(family => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={family}>\n                    <Checkbox value={family}>{family}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end warehouse family filters */}\n\n        {/* start warehouses type filters */}\n        <Form.Item {...formItemLayout} label=\"By Types\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {types.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end warehouse type filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(WarehousesFilters, {\n    filter: 'warehouses.filter',\n    natures: 'warehouses.schema.properties.nature.enum',\n    families: 'warehouses.schema.properties.family.enum',\n    types: 'warehouses.schema.properties.type.enum',\n  })\n);\n","import {\n  Connect,\n  getWarehouses,\n  openWarehouseForm,\n  selectWarehouse,\n  closeWarehouseForm,\n  searchWarehouses,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport Topbar from '../../../components/Topbar';\nimport WarehouseList from './List';\nimport WarehouseForm from './Form';\nimport WarehouseFilters from './Filters';\nimport './styles.css';\n\n/**\n * @class\n * @name Warehouses\n * @description Render warehouses module which has search box,\n *  actions and list of warehouses\n *\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Warehouses extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    warehouses: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        level: PropTypes.string,\n      })\n    ).isRequired,\n    warehouse: PropTypes.shape({\n      name: PropTypes.string,\n      level: PropTypes.string,\n    }),\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    searchQuery: PropTypes.string,\n  };\n\n  static defaultProps = {\n    warehouse: null,\n    searchQuery: undefined,\n  };\n\n  componentWillMount() {\n    getWarehouses();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible\n   * property to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible\n   * property to false via state\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openForm\n   * @description Open warehouse form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openWarehouseForm();\n  };\n\n  /**\n   * @function\n   * @name closeForm\n   * @description close warehouse form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeWarehouseForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchWarehouses\n   * @description Search Warehouses List based on supplied filter word\n   *\n   * @param {Object} event  Event instance\n   * @returns {undefined}  Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchWarehouse = event => {\n    searchWarehouses(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} warehouse warehouse to be deleted\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = warehouse => {\n    selectWarehouse(warehouse);\n    this.setState({ isEditForm: true });\n    openWarehouseForm();\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Handle on actions after closing form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      warehouses,\n      loading,\n      total,\n      page,\n      posting,\n      showForm,\n      warehouse,\n      searchQuery,\n    } = this.props;\n    const { showFilters, isEditForm } = this.state;\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for warehouses here ...',\n            onChange: this.searchWarehouse,\n            value: searchQuery,\n          }}\n          actions={[\n            {\n              label: 'New Warehouse',\n              icon: 'plus',\n              size: 'large',\n              title: 'Add New Warehouse',\n              onClick: this.openForm,\n            },\n          ]}\n        />\n        {/* end Topbar */}\n\n        <div className=\"WarehouseList\">\n          {/* list starts */}\n          <WarehouseList\n            warehouses={warehouses}\n            loading={loading}\n            onEdit={this.handleEdit}\n            onFilter={this.openFiltersModal}\n            total={total}\n            page={page}\n          />\n          {/* end list */}\n\n          {/* filter modal */}\n          <Modal\n            title=\"Filter Warehouses\"\n            visible={showFilters}\n            onCancel={this.closeFiltersModal}\n            width=\"50%\"\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n          >\n            <WarehouseFilters onCancel={this.closeFiltersModal} />\n          </Modal>\n          {/* end filter modal */}\n\n          {/* create/edit form modal */}\n          <Modal\n            title={isEditForm ? 'Edit Warehouse' : 'Add New Warehouse'}\n            visible={showForm}\n            footer={null}\n            onCancel={this.closeForm}\n            destroyOnClose\n            maskClosable={false}\n            afterClose={this.handleAfterCloseForm}\n          >\n            <WarehouseForm\n              posting={posting}\n              isEditForm={isEditForm}\n              warehouse={warehouse}\n              onCancel={this.closeForm}\n            />\n          </Modal>\n          {/* end create/edit form modal */}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(Warehouses, {\n  warehouses: 'warehouses.list',\n  warehouse: 'warehouses.selected',\n  posting: 'warehouses.posting',\n  showForm: 'warehouses.showForm',\n  loading: 'warehouses.loading',\n  page: 'warehouses.page',\n  total: 'warehouses.total',\n  searchQuery: 'warehouses.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Warehouses from '../components/Warehouses';\n\n/**\n * @function\n * @name ResourcesWarehousesLayout\n * @description Render resources warehouses layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ResourcesWarehousesLayout = () => <Warehouses />;\n\nexport default ResourcesWarehousesLayout;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport agenciesIcon from '../assets/icons/stakeholders/agency.svg';\nimport contactsIcon from '../assets/icons/stakeholders/contacts.svg';\nimport notificationsIcon from '../assets/icons/stakeholders/notifications-disabled.svg';\nimport rolesIcon from '../assets/icons/stakeholders/roles.svg';\nimport NavigationMenu from '../components/NavigationMenu';\nimport modules from '../modules.json';\n\nconst routes = [\n  {\n    name: 'Focal People',\n    path: '/focalpeople',\n    icon: contactsIcon,\n    description: modules.stakeholdersFocalPeople,\n  },\n  {\n    name: 'Agencies',\n    path: '/agencies',\n    icon: agenciesIcon,\n    description: modules.stakeholdersAgencies,\n  },\n  {\n    name: 'Roles',\n    path: '/roles',\n    icon: rolesIcon,\n    description: modules.stakeholdersRoles,\n  },\n  {\n    name: 'Notifications',\n    path: '/notifications',\n    icon: notificationsIcon,\n    description: modules.stakeholdersNotifications,\n    disabled: true,\n  },\n];\n\n/**\n * @function\n * @name Stakeholders\n * @description Stakeholders component which shows to navigation Nav\n *\n * @param {Object} props props object\n * @param {Object} props.match match router object\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst Stakeholders = ({ match }) => (\n  <NavigationMenu routes={routes} match={match} />\n);\n\n/* props validation */\nStakeholders.propTypes = {\n  match: PropTypes.shape({ url: PropTypes.string }).isRequired,\n};\n\nexport default Stakeholders;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Connect, postAgency, putAgency } from '@codetanzania/emis-api-states';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport SelectInput from '../../../../components/SelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getFeatures } = httpActions;\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name AgencyForm\n * @description Render Agency form for creating and updating stakeholder\n * agency details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AgencyForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    agency: PropTypes.shape({\n      name: PropTypes.string,\n      title: PropTypes.string,\n      abbreviation: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      agency,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedAgency = Object.assign({}, agency, values);\n          putAgency(\n            updatedAgency,\n            () => {\n              notifySuccess('Agency was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating agency, please try again!'\n              );\n            }\n          );\n        } else {\n          postAgency(\n            values,\n            () => {\n              notifySuccess('Agency was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving agency, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      agency,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n      groups,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* agency name, phone number and email section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* agency name */}\n            <Form.Item {...formItemLayout} label=\"Name\">\n              {getFieldDecorator('name', {\n                initialValue: isEditForm ? agency.name : undefined,\n                rules: [\n                  { required: true, message: 'Agency full name is required' },\n                ],\n              })(<Input />)}\n            </Form.Item>\n            {/* end agency name */}\n          </Col>\n          <Col span={13}>\n            <Row type=\"flex\" justify=\"space-between\">\n              <Col span={11}>\n                {/* agency mobile number */}\n                <Form.Item {...formItemLayout} label=\"Phone Number\">\n                  {getFieldDecorator('mobile', {\n                    initialValue: isEditForm ? agency.mobile : undefined,\n                    rules: [\n                      { required: true, message: 'Phone number is required' },\n                    ],\n                  })(<Input />)}\n                </Form.Item>\n                {/* end agency mobile number */}\n              </Col>\n              <Col span={12}>\n                {/* agency email */}\n                <Form.Item {...formItemLayout} label=\"Email\">\n                  {getFieldDecorator('email', {\n                    initialValue: isEditForm ? agency.email : undefined,\n                    rules: [\n                      {\n                        type: 'email',\n                        message: 'The input is not valid E-mail!',\n                      },\n                      {\n                        required: true,\n                        message: 'E-mail address is required',\n                      },\n                    ],\n                  })(<Input />)}\n                </Form.Item>\n                {/* end agency email */}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {/* end agency name, phone number and email section */}\n\n        {/* agency abbreviation, group and area section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* agency organization */}\n            <Form.Item {...formItemLayout} label=\"Abbreviation\">\n              {getFieldDecorator('abbreviation', {\n                rules: [{ required: true }],\n                initialValue: isEditForm ? agency.abbreviation : undefined,\n              })(<Input />)}\n            </Form.Item>\n            {/* end agency abbreviation */}\n          </Col>\n          <Col span={13}>\n            <Row type=\"flex\" justify=\"space-between\">\n              <Col span={11}>\n                {/* agency group */}\n                <Form.Item {...formItemLayout} label=\"Group\">\n                  {getFieldDecorator('group', {\n                    initialValue: isEditForm ? agency.group : undefined,\n                    rules: [\n                      { required: true, message: 'Agency group is required' },\n                    ],\n                  })(<SelectInput options={groups} />)}\n                </Form.Item>\n                {/* end agency group */}\n              </Col>\n              <Col span={12}>\n                {/* agency location */}\n                <Form.Item {...formItemLayout} label=\"Area\">\n                  {getFieldDecorator('location', {\n                    initialValue:\n                      isEditForm && agency.location\n                        ? agency.location._id // eslint-disable-line\n                        : undefined,\n                    rules: [\n                      { required: true, message: 'Agency area is required' },\n                    ],\n                  })(\n                    <SearchableSelectInput\n                      onSearch={getFeatures}\n                      optionLabel={feature =>\n                        `${feature.name} (${upperFirst(feature.type)})`\n                      }\n                      optionValue=\"_id\"\n                      initialValue={\n                        isEditForm && agency.location\n                          ? agency.location\n                          : undefined\n                      }\n                    />\n                  )}\n                </Form.Item>\n                {/* end agency location */}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {/* end agency organization, group and area section */}\n\n        {/* agency role, landline and fax section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* agency role */}\n            <Form.Item {...formItemLayout} label=\"Website\">\n              {getFieldDecorator('website', {\n                initialValue:\n                  isEditForm && agency.website ? agency.website : undefined, // eslint-disable-line\n                rules: [\n                  { required: true, message: 'Agency website is required' },\n                ],\n              })(<Input />)}\n            </Form.Item>\n            {/* end agency role */}\n          </Col>\n          <Col span={13}>\n            <Row type=\"flex\" justify=\"space-between\">\n              <Col span={11}>\n                {/* agency landline number */}\n                <Form.Item {...formItemLayout} label=\"Landline/Other Number\">\n                  {getFieldDecorator('landline', {\n                    initialValue: isEditForm ? agency.landline : undefined,\n                  })(<Input />)}\n                </Form.Item>\n                {/* end agency landline number */}\n              </Col>\n              <Col span={12}>\n                {/* agency fax */}\n                <Form.Item {...formItemLayout} label=\"Fax\">\n                  {getFieldDecorator('fax', {\n                    initialValue: isEditForm ? agency.fax : undefined,\n                  })(<Input />)}\n                </Form.Item>\n                {/* end agency fax */}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {/* end agency role, landline and fax section */}\n\n        {/* agency Physical Address, Postal Address section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* agency physical Address */}\n            <Form.Item {...formItemLayout} label=\"Physical Address\">\n              {getFieldDecorator('physicalAddress', {\n                initialValue: isEditForm ? agency.physicalAddress : undefined,\n              })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n            </Form.Item>\n            {/* end agency physical Address */}\n          </Col>\n          <Col span={13}>\n            {/* agency postal address */}\n            <Form.Item {...formItemLayout} label=\"Postal Address\">\n              {getFieldDecorator('postalAddress', {\n                rules: [{ required: true }],\n                initialValue: isEditForm ? agency.postalAddress : undefined,\n              })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n            </Form.Item>\n            {/* end agency postal address */}\n          </Col>\n        </Row>\n        {/* end agency physical Address, Postal Address section */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(AgencyForm), {\n  groups: 'agencies.schema.properties.group.enum',\n});\n","import {\n  clearAgencyFilters,\n  Connect,\n  filterAgencies,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name AgenciesFilters\n * @description Filter modal component for filtering agencies\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AgenciesFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        groups: PropTypes.arrayOf(PropTypes.string),\n        phases: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterAgencies(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearAgencyFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      groups,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start agency group filters */}\n        <Form.Item {...formItemLayout} label=\"By Agency Group\">\n          {getFieldDecorator('group', {\n            initialValue: filter ? filter.group : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {groups.map(group => (\n                  <Col span={8} style={{ margin: '10px 0' }} key={group}>\n                    <Checkbox value={group}>{group}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end agency group filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(AgenciesFilters), {\n  groups: 'agencies.schema.properties.group.enum',\n  filter: 'agencies.filter',\n});\n","import { Avatar, Checkbox, Col, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component } from 'react';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\n/* constants */\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name AgencyListItem\n * @description Single agency list item component. Render single agency details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AgencyListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    abbreviation: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    area: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    mobile: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n    onShare: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseEnter ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseLeave ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List Item checkbox\n   *\n   * @param {Object} event - Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a agency\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const {\n      abbreviation,\n      name,\n      email,\n      mobile,\n      area,\n      onEdit,\n      onShare,\n    } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>\n          {name.toUpperCase().charAt(0)}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"AgencyListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={5}>{name}</Col>\n          <Col span={3}>{abbreviation}</Col>\n          <Col span={3}>{area}</Col>\n          <Col span={4}>{mobile}</Col>\n          <Col span={5}>{email}</Col>\n          <Col span={2}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Agency',\n                  title: 'Update Agency details',\n                  onClick: onEdit,\n                }}\n                share={{\n                  name: 'Share Agency',\n                  title: 'Share Agency',\n                  onClick: onShare,\n                }}\n                archive={{\n                  name: 'Archive Agency',\n                  title: 'Remove Agency from the list of Active Agencies',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default AgencyListItem;\n","import {\n  deleteAgency,\n  paginateAgencies,\n  refreshAgencies,\n} from '@codetanzania/emis-api-states';\nimport { httpActions } from '@codetanzania/emis-api-client';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport remove from 'lodash/remove';\nimport intersectionBy from 'lodash/intersectionBy';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport ListHeader from '../../../../components/ListHeader';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport Toolbar from '../../../../components/Toolbar';\nimport AgencyListItem from '../ListItem';\n\n/* constants */\nconst headerLayout = [\n  { span: 5, header: 'Name' },\n  { span: 3, header: 'Abbreviation' },\n  { span: 3, header: 'Area' },\n  { span: 4, header: 'Mobile Number' },\n  { span: 4, header: 'Email Address' },\n];\n\nconst { getAgenciesExportUrl } = httpActions;\n\n/**\n * @class\n * @name AgencyList\n * @description Render AgencyList component which have actionBar, agencies header and\n * agency list item components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass AgencyList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    agencies: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onNotify: PropTypes.func.isRequired,\n    onBulkShare: PropTypes.func.isRequired,\n    onShare: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedAgencies: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectAgency\n   * @description Handle select a single agency action\n   *\n   * @param {Object} agency selected agency object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectAgency = agency => {\n    const { selectedAgencies } = this.state;\n    this.setState({ selectedAgencies: concat([], selectedAgencies, agency) });\n  };\n\n  /**\n   * @function\n   * @name handleFilterByStatus\n   * @description Handle filter agencies by status action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleFilterByStatus = () => {\n    // if (status === 'All') {\n    //   filterStakeholders({});\n    // } else if (status === 'Active') {\n    //   filterStakeholders({});\n    // } else if (status === 'Archived') {\n    //   filterStakeholders({});\n    // }\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all agencies actions from current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedAgencies, selectedPages } = this.state;\n    const { agencies, page } = this.props;\n    const selectedList = uniqBy([...selectedAgencies, ...agencies], '_id');\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedAgencies: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all agencies in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { agencies, page } = this.props;\n    const { selectedAgencies, selectedPages } = this.state;\n    const selectedList = uniqBy([...selectedAgencies], '_id');\n    const pages = uniq([...selectedPages]);\n\n    remove(pages, item => item === page);\n\n    agencies.forEach(agency => {\n      remove(\n        selectedList,\n        item => item._id === agency._id // eslint-disable-line\n      );\n    });\n\n    this.setState({\n      selectedAgencies: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectAgency\n   * @description Handle deselect a single agency action\n   *\n   * @param {Object} agency agency to be removed from selected agencies\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectAgency = agency => {\n    const { selectedAgencies } = this.state;\n    const selectedList = [...selectedAgencies];\n\n    remove(\n      selectedList,\n      item => item._id === agency._id // eslint-disable-line\n    );\n\n    this.setState({ selectedAgencies: selectedList });\n  };\n\n  render() {\n    const {\n      agencies,\n      loading,\n      page,\n      total,\n      onEdit,\n      onNotify,\n      onFilter,\n      onShare,\n      onBulkShare,\n    } = this.props;\n    const { selectedAgencies, selectedPages } = this.state;\n    const selectedAgenciesCount = intersectionBy(\n      this.state.selectedAgencies,\n      agencies,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"Agency\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedAgenciesCount}\n          exportUrl={getAgenciesExportUrl({\n            filter: { _id: map(selectedAgencies, '_id') },\n          })}\n          onNotify={() => onNotify(selectedAgencies)}\n          onFilter={onFilter}\n          onPaginate={nextPage => {\n            paginateAgencies(nextPage);\n          }}\n          onRefresh={refreshAgencies}\n          onShare={() => onBulkShare(selectedAgencies)}\n        />\n        {/* end toolbar */}\n\n        {/* agency list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* end agency list header */}\n\n        {/* agencies list */}\n        <List\n          loading={loading}\n          dataSource={agencies}\n          renderItem={agency => {\n            const {\n              location: { name: area },\n            } = agency;\n            return (\n              <AgencyListItem\n                key={agency._id} // eslint-disable-line\n                abbreviation={agency.abbreviation}\n                name={agency.name}\n                title={agency.role ? agency.role.name : 'N/A'}\n                email={agency.email}\n                area={area}\n                mobile={agency.mobile}\n                onShare={() => {\n                  onShare(agency);\n                }}\n                isSelected={\n                  // eslint-disable-next-line\n                  map(selectedAgencies, item => item._id).includes(agency._id)\n                }\n                onSelectItem={() => {\n                  this.handleOnSelectAgency(agency);\n                }}\n                onDeselectItem={() => {\n                  this.handleOnDeselectAgency(agency);\n                }}\n                onEdit={() => onEdit(agency)}\n                onArchive={() =>\n                  deleteAgency(\n                    agency._id, // eslint-disable-line\n                    () => {\n                      notifySuccess('Agency was archived successfully');\n                    },\n                    () => {\n                      notifyError(\n                        'An Error occurred while archiving Agency please agency system administrator'\n                      );\n                    }\n                  )\n                }\n              />\n            );\n          }}\n        />\n        {/* end agencies list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default AgencyList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Form, Input } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\n\n/* constants */\nconst { TextArea } = Input;\nconst { getFocalPeople } = httpActions;\n\n/**\n * @class\n * @name NotificationForm\n * @description Render Agencies notification form component\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass NotificationForm extends Component {\n  static propTypes = {\n    selectedAgencies: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        abbreviation: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n      })\n    ).isRequired,\n    body: PropTypes.string,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    body: undefined,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Callback to handle form on submit event\n   *\n   * @param {Object} event onSubmit event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const notification = {\n          to: {\n            _id: {\n              $in: values.recipients,\n            },\n          },\n          subject: values.subject,\n          body: values.body,\n        };\n\n        console.log(notification);\n      }\n    });\n  };\n\n  render() {\n    const {\n      onCancel,\n      form: { getFieldDecorator },\n      selectedAgencies,\n      body,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* notification recipients */}\n        <Form.Item {...formItemLayout} label=\"Recipients\">\n          {getFieldDecorator('recipients', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide at least one recipient',\n              },\n            ],\n            initialValue: map(selectedAgencies, contact => contact._id), // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Enter notification recipients\"\n              onSearch={getFocalPeople}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              mode=\"multiple\"\n              initialValue={selectedAgencies}\n            />\n          )}\n        </Form.Item>\n        {/* end notification recipients */}\n\n        {/* notification subject */}\n        <Form.Item {...formItemLayout} label=\"Subject\">\n          {getFieldDecorator('subject', {\n            rules: [{ required: true, message: 'Agency subject is required' }],\n          })(<Input placeholder=\"Applicable for Email notification only\" />)}\n        </Form.Item>\n        {/* notification subject */}\n\n        {/* notification body */}\n        <Form.Item {...formItemLayout} label=\"Message\">\n          {getFieldDecorator('body', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide notification message',\n              },\n            ],\n            initialValue: body,\n          })(\n            <TextArea\n              autosize={{ minRows: 6, maxRows: 10 }}\n              placeholder=\"Write notification message here ...\"\n            />\n          )}\n        </Form.Item>\n        {/* end notification body */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Send\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(NotificationForm);\n","import {\n  closeAgencyForm,\n  Connect,\n  getAgencies,\n  openAgencyForm,\n  searchAgencies,\n  selectAgency,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Input, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport AgencyForm from './AgencyForm';\nimport AgencyFilters from './Filters';\nimport AgencyList from './List';\nimport NotificationForm from './NotificationForm';\nimport './styles.css';\n\n/* constants */\nconst { Search } = Input;\n\n/**\n * @function\n * @name generateShareAgencyContent\n * @description generate agency content to share from agency object\n *\n * @param {Object} agency  agency to be converted to string content\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst generateShareAgencyContent = agency =>\n  `${agency.name}\\nMobile: ${agency.mobile}\\nEmail: ${agency.email}\\nWebsite: ${\n    agency.website\n  }\\nPhysical Address: ${agency.physicalAddress}\\nPostal Address: ${\n    agency.postalAddress\n  }`;\n\n/**\n * @class\n * @name Agencies\n * @description Render agency list which have search box, actions and agency list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Agencies extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedAgencies: [],\n    notificationBody: undefined,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    agencies: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    agency: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    searchQuery: PropTypes.string,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    agency: null,\n    searchQuery: undefined,\n  };\n\n  componentDidMount() {\n    getAgencies();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openAgencyForm\n   * @description Open agency form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openAgencyForm = () => {\n    openAgencyForm();\n  };\n\n  /**\n   * @function\n   * @name openAgencyForm\n   * @description close agency form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeAgencyForm = () => {\n    closeAgencyForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchAgencies\n   * @description Search Agencies List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchAgencies = event => {\n    searchAgencies(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} agency agency to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = agency => {\n    selectAgency(agency);\n    this.setState({ isEditForm: true });\n    openAgencyForm();\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify agencies\n   *\n   * @param {Object[]} agencies List of agencies selected to be notified\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = agencies => {\n    this.setState({\n      selectedAgencies: agencies,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleShare\n   * @description Handle share single agency action\n   *\n   * @param {Object} agency  to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleShare = agency => {\n    const message = generateShareAgencyContent(agency);\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name handleBulkShare\n   * @description Handle share multiple agencies\n   *\n   * @param {Object[]} agencies agencies list to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleBulkShare = agencies => {\n    const agencyList = agencies.map(generateShareAgencyContent);\n\n    const message = agencyList.join('\\n\\n\\n');\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify agencies\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Perform post close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const {\n      agencies,\n      agency,\n      loading,\n      posting,\n      page,\n      showForm,\n      searchQuery,\n      total,\n    } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedAgencies,\n      notificationBody,\n    } = this.state;\n    return (\n      <div className=\"Agencies\">\n        <Row>\n          <Col span={12}>\n            {/* search input component */}\n            <Search\n              size=\"large\"\n              placeholder=\"Search for agencies here ...\"\n              onChange={this.searchAgencies}\n              allowClear\n              value={searchQuery}\n            />\n            {/* end search input component */}\n          </Col>\n\n          {/* <Col span={3} offset={1}>\n            <Select\n              defaultValue=\"Active\"\n              style={{ width: 120 }}\n              size=\"large\"\n              type=\"primary\"\n            >\n              <Option value=\"All\">All</Option>\n              <Option value=\"Active\">Active</Option>\n              <Option value=\"Archived\">Archived</Option>\n            </Select>\n          </Col> */}\n\n          {/* primary actions */}\n          <Col span={2} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add New Agency\"\n              onClick={this.openAgencyForm}\n            >\n              New Agency\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list starts */}\n        <AgencyList\n          total={total}\n          page={page}\n          agencies={agencies}\n          loading={loading}\n          onEdit={this.handleEdit}\n          onFilter={this.openFiltersModal}\n          onNotify={this.openNotificationForm}\n          onShare={this.handleShare}\n          onBulkShare={this.handleBulkShare}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Agencies\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          width=\"50%\"\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n        >\n          <AgencyFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* Notification Modal modal */}\n        <Modal\n          title=\"Share Agencies\"\n          visible={showNotificationForm}\n          onCancel={this.closeNotificationForm}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n          width=\"40%\"\n        >\n          <NotificationForm\n            onCancel={this.closeNotificationForm}\n            selectedAgencies={selectedAgencies}\n            body={notificationBody}\n          />\n        </Modal>\n        {/* end Notification modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Agency' : 'Add New Agency'}\n          visible={showForm}\n          width=\"50%\"\n          footer={null}\n          onCancel={this.closeAgencyForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <AgencyForm\n            posting={posting}\n            isEditForm={isEditForm}\n            agency={agency}\n            onCancel={this.closeAgencyForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Agencies, {\n  agencies: 'agencies.list',\n  agency: 'agencies.selected',\n  loading: 'agencies.loading',\n  posting: 'agencies.posting',\n  page: 'agencies.page',\n  showForm: 'agencies.showForm',\n  total: 'agencies.total',\n  searchQuery: 'agencies.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Agencies from '../components/Agencies';\n\n/**\n * @function\n * @name StakeholdersAgenciesLayout\n * @description Renders Stakeholders Agencies Layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst StakeholdersAgenciesLayout = () => <Agencies />;\n\nexport default StakeholdersAgenciesLayout;\n","import {\n  clearFocalPersonFilters,\n  Connect,\n  filterFocalPeople,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name FocalPeopleFilters\n * @description Filter modal component for filtering contacts\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FocalPeopleFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        groups: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterFocalPeople(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearFocalPersonFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      onCancel,\n      groups,\n      filter,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start contact group filters */}\n        <Form.Item {...formItemLayout} label=\"By Person Group\">\n          {getFieldDecorator('group', {\n            initialValue: filter ? filter.group : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {groups.map(group => (\n                  <Col span={8} style={{ margin: '10px 0' }} key={group}>\n                    <Checkbox value={group}>{group}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end contact group filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(FocalPeopleFilters), {\n  groups: 'focalPeople.schema.properties.group.enum',\n  filter: 'focalPeople.filter',\n});\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  Connect,\n  postFocalPerson,\n  putFocalPerson,\n} from '@codetanzania/emis-api-states';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport upperFirst from 'lodash/upperFirst';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\nimport SelectInput from '../../../../components/SelectInput';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { getAgencies, getFeatures, getRoles } = httpActions;\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name FocalPersonForm\n * @description Render Focal Person form for creating and updating stakeholder\n * focalPerson details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FocalPersonForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    focalPerson: PropTypes.shape({\n      name: PropTypes.string,\n      title: PropTypes.string,\n      abbreviation: PropTypes.string,\n      mobile: PropTypes.string,\n      email: PropTypes.string,\n    }).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    groups: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle submit form action\n   *\n   * @param {Object} event onSubmit event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      focalPerson,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedFocalPerson = Object.assign({}, focalPerson, values);\n          putFocalPerson(\n            updatedFocalPerson,\n            () => {\n              notifySuccess('Focal Person was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating focal Person, please try again!'\n              );\n            }\n          );\n        } else {\n          postFocalPerson(\n            values,\n            () => {\n              notifySuccess('Focal Person was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving focal Person, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      focalPerson,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n      groups,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* focalPerson name, phone number and email section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* focalPerson name */}\n            <Form.Item {...formItemLayout} label=\"Full Name\">\n              {getFieldDecorator('name', {\n                initialValue: isEditForm ? focalPerson.name : undefined,\n                rules: [\n                  {\n                    required: true,\n                    message: 'Focal Person full name is required',\n                  },\n                ],\n              })(<Input />)}\n            </Form.Item>\n            {/* end focalPerson name */}\n          </Col>\n          <Col span={13}>\n            <Row type=\"flex\" justify=\"space-between\">\n              <Col span={11}>\n                {/* focalPerson mobile number */}\n                <Form.Item {...formItemLayout} label=\"Phone Number\">\n                  {getFieldDecorator('mobile', {\n                    initialValue: isEditForm ? focalPerson.mobile : undefined,\n                    rules: [\n                      { required: true, message: 'Phone number is required' },\n                    ],\n                  })(<Input />)}\n                </Form.Item>\n                {/* end focalPerson mobile number */}\n              </Col>\n              <Col span={12}>\n                {/* focalPerson email */}\n                <Form.Item {...formItemLayout} label=\"Email\">\n                  {getFieldDecorator('email', {\n                    initialValue: isEditForm ? focalPerson.email : undefined,\n                    rules: [\n                      {\n                        type: 'email',\n                        message: 'The input is not valid E-mail!',\n                      },\n                      {\n                        required: true,\n                        message: 'E-mail address is required',\n                      },\n                    ],\n                  })(<Input />)}\n                </Form.Item>\n                {/* end focalPerson email */}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {/* end focalPerson name, phone number and email section */}\n\n        {/* focalPerson organization, group and area section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* focalPerson organization */}\n            <Form.Item {...formItemLayout} label=\"Organization/Agency\">\n              {getFieldDecorator('party', {\n                initialValue:\n                  isEditForm && focalPerson.party\n                    ? focalPerson.party._id // eslint-disable-line\n                    : undefined,\n              })(\n                <SearchableSelectInput\n                  onSearch={getAgencies}\n                  optionLabel=\"name\"\n                  optionValue=\"_id\"\n                  initialValue={\n                    isEditForm && focalPerson.party\n                      ? focalPerson.party\n                      : undefined\n                  }\n                />\n              )}\n            </Form.Item>\n            {/* end focalPerson organization */}\n          </Col>\n\n          <Col span={13}>\n            <Row type=\"flex\" justify=\"space-between\">\n              <Col span={11}>\n                {/* focalPerson group */}\n                <Form.Item {...formItemLayout} label=\"Group\">\n                  {getFieldDecorator('group', {\n                    initialValue: isEditForm ? focalPerson.group : undefined,\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Focal Person group is required',\n                      },\n                    ],\n                  })(<SelectInput options={groups} />)}\n                </Form.Item>\n                {/* end focalPerson group */}\n              </Col>\n              <Col span={12}>\n                {/* focalPerson location */}\n                <Form.Item {...formItemLayout} label=\"Area\">\n                  {getFieldDecorator('location', {\n                    initialValue:\n                      isEditForm && focalPerson.location\n                        ? focalPerson.location._id // eslint-disable-line\n                        : undefined,\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Focal Person area is required',\n                      },\n                    ],\n                  })(\n                    <SearchableSelectInput\n                      onSearch={getFeatures}\n                      optionLabel={feature =>\n                        `${feature.name} (${upperFirst(feature.type)})`\n                      }\n                      optionValue=\"_id\"\n                      initialValue={\n                        isEditForm && focalPerson.location\n                          ? focalPerson.location\n                          : undefined\n                      }\n                    />\n                  )}\n                </Form.Item>\n                {/* end focalPerson location */}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {/* end focalPerson organization, group and area section */}\n\n        {/* focalPerson role, landline and fax section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* focalPerson role */}\n            <Form.Item {...formItemLayout} label=\"Role\">\n              {getFieldDecorator('role', {\n                initialValue:\n                  isEditForm && focalPerson.role\n                    ? focalPerson.role._id // eslint-disable-line\n                    : undefined,\n                rules: [\n                  { required: true, message: 'Focal Person time is required' },\n                ],\n              })(\n                <SearchableSelectInput\n                  onSearch={getRoles}\n                  optionLabel=\"name\"\n                  optionValue=\"_id\"\n                  initialValue={\n                    isEditForm && focalPerson.role\n                      ? focalPerson.role\n                      : undefined\n                  }\n                />\n              )}\n            </Form.Item>\n            {/* end focalPerson role */}\n          </Col>\n          <Col span={13}>\n            <Row type=\"flex\" justify=\"space-between\">\n              <Col span={11}>\n                {/* focalPerson landline number */}\n                <Form.Item {...formItemLayout} label=\"Landline/Other Number\">\n                  {getFieldDecorator('landline', {\n                    initialValue: isEditForm ? focalPerson.landline : undefined,\n                  })(<Input />)}\n                </Form.Item>\n                {/* end focalPerson landline number */}\n              </Col>\n              <Col span={12}>\n                {/* focalPerson fax */}\n                <Form.Item {...formItemLayout} label=\"Fax\">\n                  {getFieldDecorator('fax', {\n                    initialValue: isEditForm ? focalPerson.fax : undefined,\n                  })(<Input />)}\n                </Form.Item>\n                {/* end focalPerson fax */}\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n        {/* end focalPerson role, landline and fax section */}\n\n        {/* focalPerson Physical Address, Postal Address section */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={10}>\n            {/* focalPerson physical Address */}\n            <Form.Item {...formItemLayout} label=\"Physical Address\">\n              {getFieldDecorator('physicalAddress', {\n                initialValue: isEditForm\n                  ? focalPerson.physicalAddress\n                  : undefined,\n              })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n            </Form.Item>\n            {/* end focalPerson physical Address */}\n          </Col>\n          <Col span={13}>\n            {/* focalPerson postal address */}\n            <Form.Item {...formItemLayout} label=\"Postal Address\">\n              {getFieldDecorator('postalAddress', {\n                initialValue: isEditForm\n                  ? focalPerson.postalAddress\n                  : undefined,\n              })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n            </Form.Item>\n            {/* end focalPerson postal address */}\n          </Col>\n        </Row>\n        {/* end focalPerson physical Address, Postal Address section */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Connect(Form.create()(FocalPersonForm), {\n  groups: 'focalPeople.schema.properties.group.enum',\n});\n","import { Avatar, Checkbox, Col, Modal, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport randomColor from 'randomcolor';\nimport React, { Component } from 'react';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\n/* constants */\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name FocalPeopleListItem\n * @description Single focal person list item component.\n * Render single focal person details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FocalPeopleListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  static propTypes = {\n    abbreviation: PropTypes.string.isRequired,\n    agency: PropTypes.string.isRequired,\n    agencyAbbreviation: PropTypes.string.isRequired,\n    location: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    role: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    mobile: PropTypes.string.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n    onShare: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseEnter ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on MouseLeave ListItem event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List Item checkbox\n   *\n   * @param {Object} event - Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a focal person\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const {\n      abbreviation,\n      agency,\n      agencyAbbreviation,\n      name,\n      role,\n      location,\n      email,\n      mobile,\n      onEdit,\n      onShare,\n    } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    const avatarBackground = randomColor();\n    let sideComponent = null;\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>\n          {abbreviation}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"FocalPeopleListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={3}>{name}</Col>\n          <Col span={2} title={agency}>\n            {agencyAbbreviation}\n          </Col>\n          <Col span={5}>{role}</Col>\n          <Col span={5}>{location}</Col>\n          <Col span={2}>{mobile}</Col>\n          <Col span={4}>{email}</Col>\n          <Col span={1}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Focal Person',\n                  title: 'Update Focal Person Details',\n                  onClick: onEdit,\n                }}\n                share={{\n                  name: 'Share Focal Person',\n                  title: 'Share Focal Person details with others',\n                  onClick: onShare,\n                }}\n                archive={{\n                  name: 'Archive Focal Person',\n                  title: 'Remove Focal Person from list of active focal People',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default FocalPeopleListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  deleteFocalPerson,\n  paginateFocalPeople,\n  refreshFocalPeople,\n} from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport compact from 'lodash/compact';\nimport concat from 'lodash/concat';\nimport intersectionBy from 'lodash/intersectionBy';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport uniq from 'lodash/uniq';\nimport uniqBy from 'lodash/uniqBy';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport ListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport FocalPersonsListItem from '../ListItem';\n\n/* constants */\nconst headerLayout = [\n  { span: 3, header: 'Name' },\n  { span: 2, header: 'Agency' },\n  { span: 5, header: 'Role' },\n  { span: 5, header: 'Area' },\n  { span: 2, header: 'Mobile Number' },\n  { span: 4, header: 'Email Address' },\n];\nconst { getFocalPeopleExportUrl } = httpActions;\n\n/**\n * @class\n * @name FocalPersonsList\n * @description Render FocalPersonsList component which have actionBar, focal People\n * header and focal People list components\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FocalPersonsList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    focalPeople: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    page: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onFilter: PropTypes.func.isRequired,\n    onNotify: PropTypes.func.isRequired,\n    onShare: PropTypes.func.isRequired,\n    onBulkShare: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedFocalPeople: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectFocalPerson\n   * @description Handle select a single focalPerson action\n   *\n   * @param {Object} focalPerson selected focalPerson object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectFocalPerson = focalPerson => {\n    const { selectedFocalPeople } = this.state;\n    this.setState({\n      selectedFocalPeople: concat([], selectedFocalPeople, focalPerson),\n    });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all focalPeople actions from current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedFocalPeople, selectedPages } = this.state;\n    const { focalPeople, page } = this.props;\n    const selectedList = uniqBy(\n      [...selectedFocalPeople, ...focalPeople],\n      '_id'\n    );\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedFocalPeople: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all focalPeople in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { focalPeople, page } = this.props;\n    const { selectedFocalPeople, selectedPages } = this.state;\n    const selectedList = uniqBy([...selectedFocalPeople], '_id');\n    const pages = uniq([...selectedPages]);\n\n    remove(pages, item => item === page);\n\n    focalPeople.forEach(focalPerson => {\n      remove(\n        selectedList,\n        item => item._id === focalPerson._id // eslint-disable-line\n      );\n    });\n\n    this.setState({\n      selectedFocalPeople: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleFilterByStatus\n   * @description Handle filter focalPeople by status action\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleFilterByStatus = () => {\n    // if (status === 'All') {\n    //   filter({});\n    // } else if (status === 'Active') {\n    //   filter({});\n    // } else if (status === 'Archived') {\n    //   filter({});\n    // }\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectFocalPerson\n   * @description Handle deselect a single focalPerson action\n   *\n   * @param {Object} focalPerson focalPerson to be removed from selected focalPeople\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectFocalPerson = focalPerson => {\n    const { selectedFocalPeople } = this.state;\n    const selectedList = [...selectedFocalPeople];\n\n    remove(\n      selectedList,\n      item => item._id === focalPerson._id // eslint-disable-line\n    );\n\n    this.setState({ selectedFocalPeople: selectedList });\n  };\n\n  render() {\n    const {\n      focalPeople,\n      loading,\n      page,\n      total,\n      onEdit,\n      onFilter,\n      onNotify,\n      onShare,\n      onBulkShare,\n    } = this.props;\n    const { selectedFocalPeople, selectedPages } = this.state;\n    const selectedFocalPeopleCount = intersectionBy(\n      this.state.selectedFocalPeople,\n      focalPeople,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"focal person\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedFocalPeopleCount}\n          exportUrl={getFocalPeopleExportUrl({\n            filter: { _id: map(selectedFocalPeople, '_id') },\n          })}\n          onFilter={onFilter}\n          onNotify={() => onNotify(selectedFocalPeople)}\n          onPaginate={nextPage => {\n            paginateFocalPeople(nextPage);\n          }}\n          onRefresh={() =>\n            refreshFocalPeople(\n              () => {\n                notifySuccess('Focal People refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing Focal People please contact system administrator'\n                );\n              }\n            )\n          }\n          onShare={() => onBulkShare(selectedFocalPeople)}\n        />\n        {/* end toolbar */}\n\n        {/* focalPerson list header */}\n        <ListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        {/* end focalPerson list header */}\n\n        {/* focalPeople list */}\n        <List\n          loading={loading}\n          dataSource={focalPeople}\n          renderItem={focalPerson => (\n            <FocalPersonsListItem\n              key={focalPerson._id} // eslint-disable-line\n              abbreviation={focalPerson.abbreviation}\n              location={compact([\n                focalPerson.location.name,\n                focalPerson.location.place.district,\n                focalPerson.location.place.region,\n                focalPerson.location.place.country,\n              ]).join(', ')}\n              name={focalPerson.name}\n              agency={focalPerson.party ? focalPerson.party.name : 'N/A'}\n              agencyAbbreviation={\n                focalPerson.party ? focalPerson.party.abbreviation : 'N/A'\n              }\n              role={focalPerson.role ? focalPerson.role.name : 'N/A'}\n              email={focalPerson.email}\n              mobile={focalPerson.mobile}\n              isSelected={\n                // eslint-disable-next-line\n                map(selectedFocalPeople, item => item._id).includes(\n                  focalPerson._id // eslint-disable-line\n                )\n              }\n              onSelectItem={() => {\n                this.handleOnSelectFocalPerson(focalPerson);\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectFocalPerson(focalPerson);\n              }}\n              onEdit={() => onEdit(focalPerson)}\n              onArchive={() =>\n                deleteFocalPerson(\n                  focalPerson._id, // eslint-disable-line\n                  () => {\n                    notifySuccess('Focal Person was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      'An Error occurred while archiving Focal Person please contact system administrator'\n                    );\n                  }\n                )\n              }\n              onShare={() => {\n                onShare(focalPerson);\n              }}\n            />\n          )}\n        />\n        {/* end focalPeople list */}\n      </Fragment>\n    );\n  }\n}\n\nexport default FocalPersonsList;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  closeFocalPersonForm,\n  Connect,\n  getFocalPeople,\n  openFocalPersonForm,\n  searchFocalPeople,\n  selectFocalPerson,\n} from '@codetanzania/emis-api-states';\nimport { Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport NotificationForm from '../../../components/NotificationForm';\nimport Topbar from '../../../components/Topbar';\nimport FocalPersonFilters from './Filters';\nimport FocalPersonForm from './Form';\nimport FocalPeopleList from './List';\nimport './styles.css';\n\n/* constants */\nconst { getFocalPeople: getFocalPeopleFromAPI } = httpActions;\n\n/**\n * @class\n * @name FocalPeople\n * @description Render focalPerson list which have search box, actions and focalPerson list\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass FocalPeople extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedFocalPeople: [],\n    notificationBody: undefined,\n  };\n\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    focalPeople: PropTypes.arrayOf(PropTypes.shape({ name: PropTypes.string }))\n      .isRequired,\n    focalPerson: PropTypes.shape({ name: PropTypes.string }),\n    page: PropTypes.number.isRequired,\n    showForm: PropTypes.bool.isRequired,\n    searchQuery: PropTypes.string,\n    total: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    focalPerson: null,\n    searchQuery: undefined,\n  };\n\n  componentDidMount() {\n    getFocalPeople();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property\n   * to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openFocalPersonForm\n   * @description Open focalPerson form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFocalPersonForm = () => {\n    openFocalPersonForm();\n  };\n\n  /**\n   * @function\n   * @name openFocalPersonForm\n   * @description close focalPerson form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFocalPersonForm = () => {\n    closeFocalPersonForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchFocalPeople\n   * @description Search FocalPeople List based on supplied filter word\n   *\n   * @param {Object} event - Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchFocalPeople = event => {\n    searchFocalPeople(event.target.value);\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} focalPerson focalPerson to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = focalPerson => {\n    selectFocalPerson(focalPerson);\n    this.setState({ isEditForm: true });\n    openFocalPersonForm();\n  };\n\n  /**\n   * @function\n   * @name handleShare\n   * @description Handle share single focalPerson action\n   *\n   * @param {Object} focalPerson focalPerson to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleShare = focalPerson => {\n    const message = `${focalPerson.name}\\nMobile: ${\n      focalPerson.mobile\n    }\\nEmail: ${focalPerson.email}`;\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name handleBulkShare\n   * @description Handle share multiple focal People\n   *\n   * @param {Object[]} focalPeople focal People list to be shared\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleBulkShare = focalPeople => {\n    const focalPersonList = focalPeople.map(\n      focalPerson =>\n        `${focalPerson.name}\\nMobile: ${focalPerson.mobile}\\nEmail: ${\n          focalPerson.email\n        }`\n    );\n\n    const message = focalPersonList.join('\\n\\n\\n');\n\n    this.setState({ notificationBody: message, showNotificationForm: true });\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify focalPeople\n   *\n   * @param {Object[]} focalPeople List of focalPeople selected to be notified\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = focalPeople => {\n    this.setState({\n      selectedFocalPeople: focalPeople,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify focalPeople\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Perform post close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseNotificationForm\n   * @description Perform post close notification form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseNotificationForm = () => {\n    this.setState({ notificationBody: undefined });\n  };\n\n  render() {\n    const {\n      focalPeople,\n      focalPerson,\n      loading,\n      posting,\n      page,\n      showForm,\n      searchQuery,\n      total,\n    } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedFocalPeople,\n      notificationBody,\n    } = this.state;\n    return (\n      <Fragment>\n        {/* Topbar */}\n        <Topbar\n          search={{\n            size: 'large',\n            placeholder: 'Search for focal persons here ...',\n            onChange: this.searchFocalPeople,\n            value: searchQuery,\n          }}\n          actions={[\n            {\n              label: 'New Focal Person',\n              icon: 'plus',\n              size: 'large',\n              title: 'Add New Focal Person',\n              onClick: this.openFocalPersonForm,\n            },\n          ]}\n        />\n        {/* end Topbar */}\n\n        <div className=\"FocalPeopleList\">\n          {/* list starts */}\n          <FocalPeopleList\n            total={total}\n            page={page}\n            focalPeople={focalPeople}\n            loading={loading}\n            onEdit={this.handleEdit}\n            onFilter={this.openFiltersModal}\n            onNotify={this.openNotificationForm}\n            onShare={this.handleShare}\n            onBulkShare={this.handleBulkShare}\n          />\n          {/* end list */}\n\n          {/* filter modal */}\n          <Modal\n            title=\"Filter Focal Persons\"\n            visible={showFilters}\n            onCancel={this.closeFiltersModal}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            width=\"50%\"\n          >\n            <FocalPersonFilters onCancel={this.closeFiltersModal} />\n          </Modal>\n          {/* end filter modal */}\n\n          {/* Notification Modal modal */}\n          <Modal\n            title=\"Notify Focal Persons\"\n            visible={showNotificationForm}\n            onCancel={this.closeNotificationForm}\n            footer={null}\n            destroyOnClose\n            maskClosable={false}\n            width=\"40%\"\n            afterClose={this.handleAfterCloseNotificationForm}\n          >\n            <NotificationForm\n              recipients={selectedFocalPeople}\n              onSearchRecipients={getFocalPeopleFromAPI}\n              body={notificationBody}\n              onCancel={this.closeNotificationForm}\n              onNotify={() => {}}\n            />\n          </Modal>\n          {/* end Notification modal */}\n\n          {/* create/edit form modal */}\n          <Modal\n            title={isEditForm ? 'Edit Focal Person' : 'Add New Focal Person'}\n            visible={showForm}\n            width=\"50%\"\n            footer={null}\n            onCancel={this.closeFocalPersonForm}\n            destroyOnClose\n            maskClosable={false}\n            afterClose={this.handleAfterCloseForm}\n          >\n            <FocalPersonForm\n              posting={posting}\n              isEditForm={isEditForm}\n              focalPerson={focalPerson}\n              onCancel={this.closeFocalPersonForm}\n            />\n          </Modal>\n          {/* end create/edit form modal */}\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Connect(FocalPeople, {\n  focalPeople: 'focalPeople.list',\n  focalPerson: 'focalPeople.selected',\n  loading: 'focalPeople.loading',\n  posting: 'focalPeople.posting',\n  page: 'focalPeople.page',\n  showForm: 'focalPeople.showForm',\n  total: 'focalPeople.total',\n  searchQuery: 'focalPeople.q',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport FocalPeople from '../components/FocalPeople';\n\n/**\n * @function\n * @name StakeholdersFocalPeopleLayout\n * @description Renders Stakeholders FocalPeople Layout\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst StakeholdersFocalPeopleLayout = () => <FocalPeople />;\n\nexport default StakeholdersFocalPeopleLayout;\n","import React from 'react';\nimport EmptyState from '../../components/EmptyState';\n\nconst StakeholdersNotificationsLayout = () => (\n  <div style={{ marginTop: '20%' }}>\n    <EmptyState\n      icon=\"exclamation-circle\"\n      description=\"No Alerts Actions yet,but when they are available will appear here\"\n      buttonLabel=\"New Alert\"\n      onClick={() => {}}\n    />\n  </div>\n);\n\nexport default StakeholdersNotificationsLayout;\n","import {\n  clearRoleFilters,\n  Connect,\n  filterRoles,\n} from '@codetanzania/emis-api-states';\nimport { Button, Checkbox, Col, Form, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\n/**\n * @class\n * @name RolesFilters\n * @description Filter modal component for filtering roles\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RolesFilters extends Component {\n  static propTypes = {\n    filter: PropTypes.objectOf(\n      PropTypes.shape({\n        types: PropTypes.arrayOf(PropTypes.string),\n      })\n    ),\n    properties: PropTypes.arrayOf(PropTypes.string).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    filter: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle filter action\n   *\n   * @param {Object} event onSubmit event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n    const {\n      form: { validateFields },\n      onCancel,\n    } = this.props;\n\n    validateFields((error, values) => {\n      if (!error) {\n        filterRoles(values);\n        onCancel();\n      }\n    });\n  };\n\n  /**\n   * @function\n   * @name handleClearFilter\n   * @description Action handle when clear\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleClearFilter = () => {\n    const { onCancel } = this.props;\n    clearRoleFilters();\n    onCancel();\n  };\n\n  render() {\n    const {\n      properties,\n      filter,\n      form: { getFieldDecorator },\n      onCancel,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* start role properties filters */}\n        <Form.Item {...formItemLayout} label=\"By Types\">\n          {getFieldDecorator('type', {\n            initialValue: filter ? filter.type : [],\n          })(\n            <Checkbox.Group style={{ width: '100%' }}>\n              <Row>\n                {properties.map(type => (\n                  <Col span={6} style={{ margin: '10px 0' }} key={type}>\n                    <Checkbox value={type}>{type}</Checkbox>\n                  </Col>\n                ))}\n              </Row>\n            </Checkbox.Group>\n          )}\n        </Form.Item>\n        {/* end role properties filters */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} onClick={this.handleClearFilter}>\n            Clear\n          </Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Filter\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\nexport default Form.create()(\n  Connect(RolesFilters, {\n    properties: 'roles.schema.properties.type.enum',\n    filter: 'roles.filter',\n  })\n);\n","import { Avatar, Checkbox, Col, Row, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport randomColor from 'randomcolor';\nimport ListItemActions from '../../../../components/ListItemActions';\nimport './styles.css';\n\nconst { confirm } = Modal;\n\n/**\n * @class\n * @name RoleListItem\n * @description Single role list item component. Render single role details\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RoleListItem extends Component {\n  state = {\n    isHovered: false,\n  };\n\n  /* props validation */\n  static propTypes = {\n    abbreviation: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    onArchive: PropTypes.func.isRequired,\n    isSelected: PropTypes.bool.isRequired,\n    onSelectItem: PropTypes.func.isRequired,\n    onDeselectItem: PropTypes.func.isRequired,\n  };\n\n  /**\n   * @function\n   * @name handleMouseEnter\n   * @description Handle on mouse enter role list item\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseEnter = () => {\n    this.setState({ isHovered: true });\n  };\n\n  /**\n   * @function\n   * @name handleMouseLeave\n   * @description Handle on mouse leave role list item\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleMouseLeave = () => {\n    this.setState({ isHovered: false });\n  };\n\n  /**\n   * @function\n   * @name handleToggleSelect\n   * @description Handle Toggling List Item checkbox\n   *\n   * @param {Object} event - Event object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleToggleSelect = event => {\n    const { isSelected } = this.state;\n    const { onSelectItem, onDeselectItem } = this.props;\n\n    this.setState({ isSelected: !isSelected });\n    if (event.target.checked) {\n      onSelectItem();\n    } else {\n      onDeselectItem();\n    }\n  };\n\n  /**\n   * @function\n   * @name showArchiveConfirm\n   * @description show confirm modal before archiving a role\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  showArchiveConfirm = () => {\n    const { name, onArchive } = this.props;\n    confirm({\n      title: `Are you sure you want to archive ${name} ?`,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk() {\n        onArchive();\n      },\n    });\n  };\n\n  render() {\n    const { abbreviation, name, description, onEdit } = this.props;\n    const { isHovered } = this.state;\n    const { isSelected } = this.props;\n    let sideComponent = null;\n    const avatarBackground = randomColor();\n\n    if (isSelected) {\n      sideComponent = (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      );\n    } else {\n      sideComponent = isHovered ? (\n        <Checkbox\n          className=\"Checkbox\"\n          onChange={this.handleToggleSelect}\n          checked={isSelected}\n        />\n      ) : (\n        <Avatar style={{ backgroundColor: avatarBackground }}>\n          {name.charAt(0).toUpperCase()}\n        </Avatar>\n      );\n    }\n\n    return (\n      <div\n        className=\"RoleListItem\"\n        onMouseEnter={this.handleMouseEnter}\n        onMouseLeave={this.handleMouseLeave}\n      >\n        <Row>\n          <Col span={1}>{sideComponent}</Col>\n          <Col span={7} title=\"Role name\">\n            {name}\n          </Col>\n          <Col span={3} title=\"role abbreviation \">\n            {abbreviation}\n          </Col>\n          <Col span={11} title=\"Role summary\">\n            {description}\n          </Col>\n          <Col span={2}>\n            {isHovered && (\n              <ListItemActions\n                edit={{\n                  name: 'Edit Role',\n                  title: 'Update Role Details',\n                  onClick: onEdit,\n                }}\n                archive={{\n                  name: 'Archive Role',\n                  title: 'Remove Role from the list of active Roles',\n                  onClick: this.showArchiveConfirm,\n                }}\n              />\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default RoleListItem;\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport {\n  deleteRole,\n  paginateRoles,\n  refreshRoles,\n} from '@codetanzania/emis-api-states';\nimport { List } from 'antd';\nimport concat from 'lodash/concat';\nimport map from 'lodash/map';\nimport remove from 'lodash/remove';\nimport uniq from 'lodash/uniq';\nimport intersectionBy from 'lodash/intersectionBy';\nimport PropTypes from 'prop-types';\nimport React, { Component, Fragment } from 'react';\nimport RoleListHeader from '../../../../components/ListHeader';\nimport Toolbar from '../../../../components/Toolbar';\nimport { notifyError, notifySuccess } from '../../../../util';\nimport RoleListItem from '../ListItem';\n\n/* constants */\nconst headerLayout = [\n  {\n    span: 7,\n    header: 'Name',\n    title: 'Roles name associated with focal people',\n  },\n  { span: 3, header: 'Abbreviation', title: 'A shortened form of roles' },\n  {\n    span: 10,\n    header: 'Description',\n    title: 'Explanation of roles',\n  },\n];\n\nconst { getRolesExportUrl } = httpActions;\n\n// eslint-disable-next-line jsdoc/require-returns\n/**\n * @class\n * @name RoleList\n * @description Render role list which have search box and actions\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RoleList extends Component {\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        abbreviation: PropTypes.string,\n        description: PropTypes.string,\n      })\n    ).isRequired,\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    onNotify: PropTypes.func.isRequired,\n  };\n\n  state = {\n    selectedRoles: [],\n    selectedPages: [],\n  };\n\n  /**\n   * @function\n   * @name handleOnSelectRole\n   * @description Handle select a single role action\n   *\n   * @param {Object} role selected role object\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnSelectRole = role => {\n    const { selectedRoles } = this.state;\n    this.setState({ selectedRoles: concat([], selectedRoles, role) });\n  };\n\n  /**\n   * @function\n   * @name handleOnDeselectRole\n   * @description Handle deselect a single role action\n   *\n   * @param {Object} role roles to be removed from selected roles\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleOnDeselectRole = role => {\n    const { selectedRoles } = this.state;\n    const selectedList = [...selectedRoles];\n\n    remove(\n      selectedList,\n      item => item._id === role._id // eslint-disable-line\n    );\n\n    this.setState({ selectedRoles: selectedList });\n  };\n\n  /**\n   * @function\n   * @name handleSelectAll\n   * @description Handle select all contacts actions from current page\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSelectAll = () => {\n    const { selectedRoles, selectedPages } = this.state;\n    const { roles, page } = this.props;\n    const selectedList = [...selectedRoles, ...roles];\n    const pages = uniq([...selectedPages, page]);\n    this.setState({\n      selectedRoles: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  /**\n   * @function\n   * @name handleDeselectAll\n   * @description Handle deselect all contacts in a current page\n   *\n   * @returns {undefined} undefined\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleDeselectAll = () => {\n    const { roles, page } = this.props;\n    const { selectedRoles, selectedPages } = this.state;\n    const selectedList = [...selectedRoles];\n    const pages = uniq([...selectedPages]);\n\n    remove(pages, item => item === page);\n\n    roles.forEach(contact => {\n      remove(\n        selectedList,\n        item => item._id === contact._id // eslint-disable-line\n      );\n    });\n\n    this.setState({\n      selectedRoles: selectedList,\n      selectedPages: pages,\n    });\n  };\n\n  render() {\n    const { roles, loading, page, total, onEdit, onNotify } = this.props;\n    const { selectedRoles, selectedPages } = this.state;\n    const selectedRolesCount = intersectionBy(\n      this.state.selectedRoles,\n      roles,\n      '_id'\n    ).length;\n\n    return (\n      <Fragment>\n        {/* toolbar */}\n        <Toolbar\n          itemName=\"Role\"\n          page={page}\n          total={total}\n          selectedItemsCount={selectedRolesCount}\n          exportUrl={getRolesExportUrl({\n            filter: { _id: map(selectedRoles, '_id') },\n          })}\n          onNotify={() => onNotify(selectedRoles)}\n          onPaginate={nextPage => {\n            paginateRoles(nextPage);\n          }}\n          onRefresh={() =>\n            refreshRoles(\n              () => {\n                notifySuccess('Roles refreshed successfully');\n              },\n              () => {\n                notifyError(\n                  'An Error occurred while refreshing roles please contact system administrator'\n                );\n              }\n            )\n          }\n        />\n        {/* end toolbar */}\n\n        <RoleListHeader\n          headerLayout={headerLayout}\n          onSelectAll={this.handleSelectAll}\n          onDeselectAll={this.handleDeselectAll}\n          isBulkSelected={selectedPages.includes(page)}\n        />\n        <List\n          loading={loading}\n          dataSource={roles}\n          renderItem={role => (\n            <RoleListItem\n              key={role.name}\n              abbreviation={role.abbreviation}\n              name={role.name}\n              description={role.description}\n              isSelected={\n                // eslint-disable-next-line\n                map(selectedRoles, item => item._id).includes(role._id)\n              }\n              onSelectItem={() => {\n                this.handleOnSelectRole(role);\n              }}\n              onDeselectItem={() => {\n                this.handleOnDeselectRole(role);\n              }}\n              onEdit={() => onEdit(role)}\n              onArchive={() =>\n                deleteRole(\n                  role._id, // eslint-disable-line\n                  () => {\n                    console.log(role._id); // eslint-disable-line\n                    notifySuccess('Role was archived successfully');\n                  },\n                  () => {\n                    notifyError(\n                      `An Error occurred while archiving role please contact\n                   system administrator`\n                    );\n                  }\n                )\n              }\n            />\n          )}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default RoleList;\n","import { postRole, putRole } from '@codetanzania/emis-api-states';\nimport { Button, Col, Form, Input, Row } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { notifyError, notifySuccess } from '../../../../util';\n\n/* constants */\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name RoleForm\n * @description Render React Form\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass RoleForm extends Component {\n  static propTypes = {\n    isEditForm: PropTypes.bool.isRequired,\n    role: PropTypes.shape({\n      name: PropTypes.string,\n      abbreviation: PropTypes.string,\n      description: PropTypes.string,\n    }),\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    onCancel: PropTypes.func.isRequired,\n    posting: PropTypes.bool.isRequired,\n  };\n\n  static defaultProps = {\n    role: null,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Handle form submit action\n   *\n   * @param {Object} event onSubmit event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n      role,\n      isEditForm,\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        if (isEditForm) {\n          const updatedRole = Object.assign({}, role, values);\n          putRole(\n            updatedRole,\n            () => {\n              notifySuccess('Role was updated successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while updating role, please try again!'\n              );\n            }\n          );\n        } else {\n          postRole(\n            values,\n            () => {\n              notifySuccess('Role was created successfully');\n            },\n            () => {\n              notifyError(\n                'Something occurred while saving role, please try again!'\n              );\n            }\n          );\n        }\n      }\n    });\n  };\n\n  render() {\n    const {\n      isEditForm,\n      role,\n      posting,\n      onCancel,\n      form: { getFieldDecorator },\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* role name and abbreviation */}\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={17}>\n            {/* role name */}\n            <Form.Item {...formItemLayout} label=\" Name\">\n              {getFieldDecorator('name', {\n                initialValue: isEditForm ? role.name : undefined,\n                rules: [{ required: true, message: 'Role  name is required' }],\n              })(<Input />)}\n            </Form.Item>\n            {/* end role name */}\n          </Col>\n\n          <Col span={6}>\n            {/* role abbreviation */}\n            <Form.Item {...formItemLayout} label=\"Abbreviation\">\n              {getFieldDecorator('abbreviation', {\n                initialValue: isEditForm ? role.abbreviation : undefined,\n              })(<Input />)}\n            </Form.Item>\n            {/* end role abbreviation */}\n          </Col>\n        </Row>\n        {/* end role name and abbreviation */}\n\n        {/* role description */}\n        <Form.Item {...formItemLayout} label=\"Description\">\n          {getFieldDecorator('description', {\n            initialValue: isEditForm ? role.description : undefined,\n          })(<TextArea autosize={{ minRows: 1, maxRows: 10 }} />)}\n        </Form.Item>\n        {/* end role description */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button\n            style={{ marginLeft: 8 }}\n            type=\"primary\"\n            htmlType=\"submit\"\n            loading={posting}\n          >\n            Save\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(RoleForm);\n","import { httpActions } from '@codetanzania/emis-api-client';\nimport { Button, Form, Input } from 'antd';\nimport map from 'lodash/map';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport SearchableSelectInput from '../../../../components/SearchableSelectInput';\n\n/* constants */\nconst { getStakeholders } = httpActions;\nconst { TextArea } = Input;\n\n/**\n * @class\n * @name NotificationForm\n * @description Render Contacts notification form component\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass NotificationForm extends Component {\n  static propTypes = {\n    recipients: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        title: PropTypes.string,\n        abbreviation: PropTypes.string,\n        mobile: PropTypes.string,\n        email: PropTypes.string,\n      })\n    ).isRequired,\n    form: PropTypes.shape({ getFieldDecorator: PropTypes.func }).isRequired,\n    body: PropTypes.string,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    body: undefined,\n  };\n\n  /**\n   * @function\n   * @name handleSubmit\n   * @description Callback to handle form on submit event\n   *\n   * @param {Object} event onSubmit event\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleSubmit = event => {\n    event.preventDefault();\n\n    const {\n      form: { validateFieldsAndScroll },\n    } = this.props;\n\n    validateFieldsAndScroll((error, values) => {\n      if (!error) {\n        const notification = {\n          to: {\n            _id: {\n              $in: values.recipients,\n            },\n          },\n          subject: values.subject,\n          body: values.body,\n        };\n\n        console.log(notification);\n      }\n    });\n  };\n\n  render() {\n    const {\n      onCancel,\n      form: { getFieldDecorator },\n      recipients,\n      body,\n    } = this.props;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 24 },\n        md: { span: 24 },\n        lg: { span: 24 },\n        xl: { span: 24 },\n        xxl: { span: 24 },\n      },\n    };\n\n    return (\n      <Form onSubmit={this.handleSubmit} autoComplete=\"off\">\n        {/* notification recipients */}\n        <Form.Item {...formItemLayout} label=\"Recipients\">\n          {getFieldDecorator('recipients', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide at least one recipient',\n              },\n            ],\n            initialValue: map(recipients, contact => contact._id), // eslint-disable-line\n          })(\n            <SearchableSelectInput\n              placeholder=\"Enter notification recipients\"\n              onSearch={getStakeholders}\n              optionLabel=\"name\"\n              optionValue=\"_id\"\n              mode=\"multiple\"\n              initialValue={recipients}\n            />\n          )}\n        </Form.Item>\n        {/* end notification recipients */}\n\n        {/* notification subject */}\n        <Form.Item {...formItemLayout} label=\"Subject\">\n          {getFieldDecorator('subject', {})(\n            <Input placeholder=\"Applicable for Email notification only\" />\n          )}\n        </Form.Item>\n        {/* notification subject */}\n\n        {/* notification body */}\n        <Form.Item {...formItemLayout} label=\"Message\">\n          {getFieldDecorator('body', {\n            rules: [\n              {\n                required: true,\n                message: 'Please provide notification message',\n              },\n            ],\n            initialValue: body,\n          })(\n            <TextArea\n              autosize={{ minRows: 6, maxRows: 10 }}\n              placeholder=\"Write notification message here ...\"\n            />\n          )}\n        </Form.Item>\n        {/* end notification body */}\n\n        {/* form actions */}\n        <Form.Item wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n          <Button onClick={onCancel}>Cancel</Button>\n          <Button style={{ marginLeft: 8 }} type=\"primary\" htmlType=\"submit\">\n            Send\n          </Button>\n        </Form.Item>\n        {/* end form actions */}\n      </Form>\n    );\n  }\n}\n\nexport default Form.create()(NotificationForm);\n","import {\n  Connect,\n  getRoles,\n  openRoleForm,\n  selectRole,\n  closeRoleForm,\n} from '@codetanzania/emis-api-states';\nimport { Input, Col, Row, Button, Modal } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport RoleFilters from './Filters';\nimport RoleList from './List';\nimport RoleForm from './Form';\nimport NotificationForm from './NotificationForm';\nimport './styles.css';\n\nconst { Search } = Input;\n\n/**\n * @class\n * @name Roles\n * @description Render role module which has search box, actions and list of roles\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nclass Roles extends Component {\n  state = {\n    showFilters: false,\n    isEditForm: false,\n    showNotificationForm: false,\n    selectedRoles: [],\n    notificationBody: undefined,\n  };\n\n  static propTypes = {\n    showForm: PropTypes.bool.isRequired,\n    posting: PropTypes.bool.isRequired,\n    loading: PropTypes.bool.isRequired,\n    total: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    role: PropTypes.shape({\n      name: PropTypes.string,\n      abbreviation: PropTypes.string,\n      description: PropTypes.string,\n    }),\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string,\n        abbreviation: PropTypes.string,\n        description: PropTypes.string,\n      })\n    ).isRequired,\n  };\n\n  static defaultProps = {\n    role: null,\n  };\n\n  componentWillMount() {\n    getRoles();\n  }\n\n  /**\n   * @function\n   * @name openFiltersModal\n   * @description open filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openFiltersModal = () => {\n    this.setState({ showFilters: true });\n  };\n\n  /**\n   * @function\n   * @name closeFiltersModal\n   * @description Close filters modal by setting it's visible property to false via state\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeFiltersModal = () => {\n    this.setState({ showFilters: false });\n  };\n\n  /**\n   * @function\n   * @name openForm\n   * @description Open role form\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openForm = () => {\n    openRoleForm();\n  };\n\n  /**\n   * @function\n   * @name openForm\n   * @description close role form\n   *\n   * @returns {undefined} - Nothing is returned\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeForm = () => {\n    closeRoleForm();\n    this.setState({ isEditForm: false });\n  };\n\n  /**\n   * @function\n   * @name searchRoles\n   * @description Search Roles List based on supplied filter word\n   *\n   * @param {Object} event Event instance\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  searchRoles = event => {\n    getRoles({ q: event.target.value });\n  };\n\n  /**\n   * @function\n   * @name handleEdit\n   * @description Handle on Edit action for list item\n   *\n   * @param {Object} role - role to be edited\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleEdit = role => {\n    selectRole(role);\n    this.setState({ isEditForm: true });\n    openRoleForm();\n  };\n\n  /**\n   * @function\n   * @name openNotificationForm\n   * @description Handle on notify contacts\n   *\n   * @param {Object[]} role List of contacts selected to be notified\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  openNotificationForm = role => {\n    this.setState({\n      selectedRoles: role,\n      showNotificationForm: true,\n    });\n  };\n\n  /**\n   * @function\n   * @name closeNotificationForm\n   * @description Handle on notify contacts\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  closeNotificationForm = () => {\n    this.setState({ showNotificationForm: false });\n  };\n\n  /**\n   * @function\n   * @name handleAfterCloseForm\n   * @description Performs after close form cleanups\n   *\n   * @version 0.1.0\n   * @since 0.1.0\n   */\n  handleAfterCloseForm = () => {\n    this.setState({ isEditForm: false });\n  };\n\n  render() {\n    const { roles, loading, showForm, posting, page, total, role } = this.props;\n    const {\n      showFilters,\n      isEditForm,\n      showNotificationForm,\n      selectedRoles,\n      notificationBody,\n    } = this.state;\n    return (\n      <div className=\"RoleList\">\n        <Row>\n          <Col span={12}>\n            <Search\n              size=\"large\"\n              placeholder=\"Search for roles here ...\"\n              onChange={this.searchRoles}\n              allowClear\n              title=\"Search roles\"\n            />\n            {/* end search input component */}\n          </Col>\n          {/* primary actions */}\n          <Col span={3} offset={9}>\n            <Button\n              type=\"primary\"\n              icon=\"plus\"\n              size=\"large\"\n              title=\"Add new role\"\n              onClick={this.openForm}\n            >\n              New Role\n            </Button>\n          </Col>\n          {/* end primary actions */}\n        </Row>\n\n        {/* list starts */}\n        <RoleList\n          roles={roles}\n          loading={loading}\n          onEdit={this.handleEdit}\n          total={total}\n          page={page}\n          onFilter={this.openFiltersModal}\n          onNotify={this.openNotificationForm}\n        />\n        {/* end list */}\n\n        {/* filter modal */}\n        <Modal\n          title=\"Filter Roles\"\n          visible={showFilters}\n          onCancel={this.closeFiltersModal}\n          maskClosable={false}\n          destroyOnClose\n          footer={null}\n        >\n          <RoleFilters onCancel={this.closeFiltersModal} />\n        </Modal>\n        {/* end filter modal */}\n\n        {/* Notification Modal modal */}\n        <Modal\n          title=\"Notify according to roles\"\n          visible={showNotificationForm}\n          onCancel={this.closeNotificationForm}\n          footer={null}\n          destroyOnClose\n          maskClosable={false}\n          width=\"40%\"\n          afterClose={this.handleAfterCloseNotificationForm}\n        >\n          <NotificationForm\n            onCancel={this.closeNotificationForm}\n            recipients={selectedRoles}\n            body={notificationBody}\n          />\n        </Modal>\n        {/* end Notification modal */}\n\n        {/* create/edit form modal */}\n        <Modal\n          title={isEditForm ? 'Edit Role' : 'Add New Role'}\n          visible={showForm}\n          footer={null}\n          onCancel={this.closeForm}\n          destroyOnClose\n          maskClosable={false}\n          afterClose={this.handleAfterCloseForm}\n        >\n          <RoleForm\n            posting={posting}\n            isEditForm={isEditForm}\n            role={role}\n            onCancel={this.closeForm}\n          />\n        </Modal>\n        {/* end create/edit form modal */}\n      </div>\n    );\n  }\n}\n\nexport default Connect(Roles, {\n  roles: 'roles.list',\n  role: 'roles.selected',\n  showForm: 'roles.showForm',\n  posting: 'roles.posting',\n  loading: 'roles.loading',\n  page: 'roles.page',\n  total: 'roles.total',\n});\n","import React from 'react';\n// import UIState from '../../components/UIState';\nimport Roles from '../components/Roles';\n\nconst StakeholdersRolesLayout = () => <Roles />;\n\nexport default StakeholdersRolesLayout;\n","import { Col, Row } from 'antd';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport alertIcon from '../../assets/icons/alerts.svg';\nimport dashboardIcon from '../../assets/icons/dashboards-disabled.svg';\nimport geographicalFeaturesIcon from '../../assets/icons/geographicalfeatures.svg';\nimport incidentIcon from '../../assets/icons/incidents-disabled.svg';\nimport stakeholderIcon from '../../assets/icons/stakeholders.svg';\nimport resourceIcon from '../../assets/icons/resources.svg';\nimport planIcon from '../../assets/icons/emergencyplans.svg';\nimport assessmentIcon from '../../assets/icons/assessments.svg';\nimport './styles.css';\n\nconst routes = [\n  { name: 'Alerts', path: '/alerts', icon: alertIcon },\n  { name: 'Assessments', path: '/assessments', icon: assessmentIcon },\n  { name: 'Emergency Plans', path: '/plans', icon: planIcon },\n  {\n    name: 'Geographical Features',\n    path: '/geographicalfeatures',\n    icon: geographicalFeaturesIcon,\n  },\n  { name: 'Incidents', path: '/incidents', icon: incidentIcon, disabled: true },\n  { name: 'Resources', path: '/resources', icon: resourceIcon },\n  { name: 'Stakeholders', path: '/stakeholders', icon: stakeholderIcon },\n  {\n    name: 'Dashboards',\n    path: '/dashboards',\n    icon: dashboardIcon,\n    disabled: true,\n  },\n];\n\n/**\n * @function\n * @name NavItem\n * @description Navigation menu item that have icon(image) and name for the\n * module to navigate to\n *\n * @param {Object} props props object\n * @param {string} props.name  name/description/label for nav item\n * @param {string} props.icon  path to svg image used as nav icon\n * @param {string} props.path  path to navigate to when clicked\n * @param {boolean} props.disabled flag to mark navigation item if is disabled\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst NavItem = ({ name, icon, path, disabled }) => (\n  <Link to={path}>\n    <div className=\"NavItem\">\n      <img\n        src={icon}\n        alt={`${name} icon not available`}\n        width={50}\n        height={50}\n        className=\"image\"\n      />\n      <span className={`text ${disabled ? 'text-disabled' : ''}`}>{name}</span>\n    </div>\n  </Link>\n);\n\n/**\n * @function\n * @name Home\n * @description Home route which shows to navigation icon\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst ModuleNavMenu = () => (\n  <div className=\"ModuleNavMenu\">\n    <Row type=\"flex\" align=\"middle\">\n      {routes.map(route => (\n        <Col key={route.path} span={12}>\n          <NavItem\n            name={route.name}\n            icon={route.icon}\n            path={route.disabled ? '#' : route.path}\n            disabled={route.disabled}\n          />\n        </Col>\n      ))}\n    </Row>\n  </div>\n);\n\n/* props validation */\nNavItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  icon: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n  disabled: PropTypes.string.isRequired,\n};\n\nexport default ModuleNavMenu;\n","import {\n  Breadcrumb,\n  Button,\n  Col,\n  Dropdown,\n  Icon,\n  Layout,\n  Menu,\n  Popover,\n  Row,\n} from 'antd';\nimport React from 'react';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\nimport Alerts from '../Alerts';\nimport AlertsActionsLayout from '../Alerts/layouts/Actions';\nimport AlertsLayout from '../Alerts/layouts/Alerts';\nimport AlertsFeedbackLayout from '../Alerts/layouts/Feedback';\nimport AlertsFeedsLayout from '../Alerts/layouts/Feeds';\nimport AlertsServiceRequestsLayout from '../Alerts/layouts/ServiceRequests';\nimport AlertsSourcesLayout from '../Alerts/layouts/Sources';\nimport Assessments from '../Assessments';\nimport AssessmentsIndicatorsLayout from '../Assessments/layouts/Indicators';\nimport AssessmentsQuestionnairesLayout from '../Assessments/layouts/Questionnaires';\nimport AssessmentsQuestionsLayout from '../Assessments/layouts/Questions';\nimport AssessmentsResponsesLayout from '../Assessments/layouts/Responses';\nimport PageNotFound from '../components/UIState/PageNotFound';\nimport GeographicalFeatures from '../GeographicalFeatures';\nimport AdministrativeBoundariesLayout from '../GeographicalFeatures/layouts/AdministrativeBoundaries';\nimport DistrictsLayout from '../GeographicalFeatures/layouts/Districts';\nimport EvacuationCentersLayout from '../GeographicalFeatures/layouts/EvacuationCenters';\nimport GeographicalFeaturesFacilitiesLayout from '../GeographicalFeatures/layouts/Facilities';\nimport GeographicalFeaturesInfrastructureLayout from '../GeographicalFeatures/layouts/Infrastructure';\nimport RegionsLayout from '../GeographicalFeatures/layouts/Regions';\nimport SubWardsLayout from '../GeographicalFeatures/layouts/SubWards';\nimport WardsLayout from '../GeographicalFeatures/layouts/Wards';\nimport GeographicalFeaturesWarehousesLayout from '../GeographicalFeatures/layouts/Warehouses';\nimport Home from '../Home';\nimport Incidents from '../Incidents';\nimport IncidentsActionsLayout from '../Incidents/layouts/Actions';\nimport IncidentsAssessmentsLayout from '../Incidents/layouts/Assessments';\nimport IncidentsCommandCenterLayout from '../Incidents/layouts/CommandCenter';\nimport IncidentsFeedsLayout from '../Incidents/layouts/Feeds';\nimport IncidentsIncidentTypesLayout from '../Incidents/layouts/IncidentTypes';\nimport IncidentsLossDatabaseLayout from '../Incidents/layouts/LossDatabase';\nimport EmergencyPlans from '../Plans';\nimport EmergencyPlanActivationsLayout from '../Plans/layouts/Activations';\nimport EmergencyPlanActivitiesLayout from '../Plans/layouts/Activities';\nimport EmergencyPlanDisseminationsLayout from '../Plans/layouts/Disseminations';\nimport EmergencyPlanDrillsLayout from '../Plans/layouts/Drills';\nimport EmergencyPlanPlannerLayout from '../Plans/layouts/Planner';\nimport EmergencyPlanProceduresLayout from '../Plans/layouts/Procedures';\nimport Resources from '../Resources';\nimport ResourcesAdjustmentsLayout from '../Resources/layouts/Adjustments';\nimport ResourcesItemCategoriesLayout from '../Resources/layouts/ItemCategories';\nimport ResourcesItemsLayout from '../Resources/layouts/Items';\nimport ResourcesItemUnitLayout from '../Resources/layouts/ItemUnit';\nimport ResourcesStockLayout from '../Resources/layouts/Stock';\nimport ResourcesUtilizationLayout from '../Resources/layouts/Utilization';\nimport ResourcesWarehousesLayout from '../Resources/layouts/Warehouses';\nimport Stakeholders from '../Stakeholders';\nimport StakeholdersAgenciesLayout from '../Stakeholders/layouts/Agencies';\nimport StakeholdersFocalPeopleLayout from '../Stakeholders/layouts/FocalPeople';\nimport StakeholdersNotificationsLayout from '../Stakeholders/layouts/Notifications';\nimport StakeholdersRolesLayout from '../Stakeholders/layouts/Roles';\nimport HeaderNavMenu from './components/HeaderNavMenu';\nimport './styles.css';\n\n/* constants */\nconst { Header, Content } = Layout;\nconst breadcrumbNameMap = {\n  '/': { name: 'Home', title: 'EMIS' },\n  /* Alerts Routes */\n  '/alerts': { name: 'Alerts', title: 'Alerts module' },\n  '/alerts/actions': {\n    name: 'Actions Taken',\n    title: 'List of all performed actions',\n  },\n  '/alerts/feedback': {\n    name: 'Surveys & Feedback',\n    title: 'Alerts surveys and feedback',\n  },\n  '/alerts/feeds': { name: 'Feeds', title: 'Alerts feeds' },\n  '/alerts/alerts': { name: 'Issued Alerts', title: 'List of all alerts' },\n  '/alerts/servicerequests': {\n    name: 'Service Requests',\n    title: 'Alerts service requests',\n  },\n  '/alerts/sources': {\n    name: 'Alerts Sources',\n    title: 'Data sources for alerts',\n  },\n  /* Assessments Routes */\n  '/assessments': { name: 'Assessments', title: 'Assessments module' },\n  '/assessments/indicators': {\n    name: 'Indicators',\n    title: 'Indicators for monitoring assessments',\n  },\n  '/assessments/questionnaires': {\n    name: 'Questionnaires',\n    title: 'List of questionnaires',\n  },\n  '/assessments/questions': {\n    name: 'Questions',\n    title: 'List of questions',\n  },\n  '/assessments/responses': {\n    name: 'Responses & Observations',\n    title: 'Responses and observations',\n  },\n  /* Geographical Features Routes */\n  '/geographicalfeatures/administrativeboundaries': {\n    name: 'Administrative Boundaries',\n    title: 'List of administrative boundaries',\n  },\n  '/geographicalfeatures/districts': {\n    name: 'Districts',\n    title: 'List of Districts',\n  },\n  '/geographicalfeatures/evacuationcenters': {\n    name: 'Evacuation Centers',\n    title: 'List of evacuation centers',\n  },\n  '/geographicalfeatures/facilities': {\n    name: 'Facilities',\n    title: 'Facilities available',\n  },\n  '/geographicalfeatures': {\n    name: 'Geographical Features',\n    title: 'Geographical features module',\n  },\n  '/geographicalfeatures/infrastructure': {\n    name: 'Critical Infrastructure',\n    title: 'List of critical infrastructures ',\n  },\n  '/geographicalfeatures/regions': {\n    name: 'Regions',\n    title: 'List of Regions',\n  },\n  '/geographicalfeatures/subwards': {\n    name: 'Subwards',\n    title: 'List of subwards',\n  },\n  '/geographicalfeatures/warehouses': {\n    name: 'Warehouses',\n    title: 'List of available warehouses',\n  },\n  '/geographicalfeatures/wards': {\n    name: 'Wards',\n    title: 'List of all wards',\n  },\n  /* Incidents Routes */\n  '/incidents/actions': {\n    name: 'Actions',\n    title: 'Incident actions performed',\n  },\n  '/incidents/assessments': {\n    name: 'Assessments',\n    title: 'Assessment of an incident',\n  },\n  '/incidents/commandcenter': {\n    name: 'Command Center',\n    title: 'Incidents command center',\n  },\n  '/incidents/feeds': { name: 'Feeds', title: 'Incident feeds' },\n  '/incidents': { name: 'Incidents', title: 'Incidents module' },\n  '/incidents/incidenttypes': {\n    name: 'Incidents Types',\n    title: 'List of Incidents Types',\n  },\n  '/incidents/lossdatabase': {\n    name: 'Loss Database',\n    title: 'List of previous incidents',\n  },\n  /* Plans Routes */\n  '/plans/activations': { name: 'Activations', title: 'Plans activation' },\n  '/plans/activities': { name: 'Activities', title: 'Plans Activities' },\n  '/plans/disseminations': {\n    name: 'Disseminations',\n    title: 'Dissemination of plans',\n  },\n  '/plans/drills': {\n    name: 'Drills & Exercises',\n    title: 'List of drills and exercises',\n  },\n  '/plans': { name: 'Emergency Plans', title: 'Emergency plans module' },\n  '/plans/planner': { name: 'Planner', title: 'Planner' },\n  '/plans/procedures': {\n    name: 'Standard Operating Procedures',\n    title: 'Standard Operating Procedures(SOP)',\n  },\n  /* Resources Routes */\n  '/resources': { name: 'Resources', title: 'Resource module' },\n  '/resources/adjustments': {\n    name: 'Adjustments',\n    title: 'List of adjusted resources',\n  },\n  '/resources/items': { name: 'Items', title: 'List of available items' },\n  '/resources/itemcategories': {\n    name: 'Item Categories',\n    title: 'List of available item categories',\n  },\n  '/resources/unitsofmeasure': {\n    name: 'Item Unit',\n    title: 'List of available units of measure for items',\n  },\n  '/resources/stocks': { name: 'Stocks', title: 'List of available stocks' },\n  '/resources/utilization': {\n    name: 'Utilizations',\n    title: 'Resource utilizations',\n  },\n  '/resources/warehouses': {\n    name: 'Warehouses',\n    title: 'List of available warehouses',\n  },\n  /* Stakeholders Routes */\n  '/stakeholders/focalpeople': {\n    name: 'Focal People',\n    title: 'List of all focal persons',\n  },\n  '/stakeholders/agencies': {\n    name: 'Agencies',\n    title: 'List of all agencies',\n  },\n  '/stakeholders/notifications': {\n    name: 'Notifications',\n    title: 'Notify stakeholders',\n  },\n  '/stakeholders/roles': {\n    name: 'Roles',\n    title: 'Roles of Stakeholders',\n  },\n  '/stakeholders': { name: 'Stakeholders', title: 'Stakeholders module' },\n};\n\n// profile menu\nconst userMenu = (\n  <Menu>\n    <Menu.Item key=\"1\">\n      <Icon type=\"profile\" />\n      Profile\n    </Menu.Item>\n    <Menu.Item key=\"2\">\n      <Icon type=\"logout\" />\n      Logout\n    </Menu.Item>\n  </Menu>\n);\n\n/**\n * @function\n * @name BaseLayout\n * @description Render base layout for EMIS dashboard\n *\n * @version 0.1.0\n * @since 0.1.0\n */\nconst BaseLayout = withRouter(props => {\n  const { location } = props;\n\n  const pathSnippets = location.pathname.split('/').filter(i => i);\n  const lastPath = pathSnippets[pathSnippets.length - 1];\n\n  // generate dynamic breadcrumb items\n  const extraBreadcrumbItems = pathSnippets.map((_, index) => {\n    const url = `/${pathSnippets.slice(0, index + 1).join('/')}`;\n\n    if (breadcrumbNameMap[url]) {\n      return (\n        <Breadcrumb.Item key={url}>\n          <Link to={url} title={breadcrumbNameMap[url].title}>\n            {breadcrumbNameMap[url].name}\n          </Link>\n        </Breadcrumb.Item>\n      );\n    }\n\n    return (\n      <Breadcrumb.Item key={url}>\n        <span title={lastPath}>{lastPath}</span>\n      </Breadcrumb.Item>\n    );\n  });\n\n  const breadcrumbItems = [\n    <Breadcrumb.Item key=\"home\">\n      <Link to=\"/\">Home</Link>\n    </Breadcrumb.Item>,\n  ].concat(extraBreadcrumbItems);\n\n  return (\n    <Layout className=\"BaseLayout\">\n      <Header className=\"BaseLayoutHeader\">\n        <Row type=\"flex\" align=\"middle\">\n          {/* breadcrumb section start */}\n          <Col span={22}>\n            <Breadcrumb className=\"Breadcrumb\" separator=\">\">\n              {breadcrumbItems}\n            </Breadcrumb>\n          </Col>\n          {/* breadcrumb section end */}\n\n          <Col span={2}>\n            <Row type=\"flex\" justify=\"end\">\n              {/* control showing module navigation menu */}\n              {location.pathname !== '/' && (\n                <Col span={12}>\n                  <Popover\n                    placement=\"bottom\"\n                    content={<HeaderNavMenu />}\n                    trigger=\"click\"\n                  >\n                    <Button icon=\"appstore\" />\n                  </Popover>\n                </Col>\n              )}\n              <Col span={12}>\n                <Dropdown overlay={userMenu}>\n                  <Button\n                    style={{ marginLeft: 8, borderRadius: '50%' }}\n                    icon=\"user\"\n                  />\n                </Dropdown>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Header>\n      <Content className=\"BaseLayoutContent\">\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/alerts\" component={Alerts} />\n          <Route path=\"/alerts/alerts\" component={AlertsLayout} />\n          <Route path=\"/alerts/actions\" component={AlertsActionsLayout} />\n          <Route path=\"/alerts/feeds\" component={AlertsFeedsLayout} />\n          <Route path=\"/alerts/feedback\" component={AlertsFeedbackLayout} />\n          <Route path=\"/alerts/sources\" component={AlertsSourcesLayout} />\n          <Route\n            path=\"/alerts/servicerequests\"\n            component={AlertsServiceRequestsLayout}\n          />\n          <Route exact path=\"/assessments\" component={Assessments} />\n          <Route\n            path=\"/assessments/indicators\"\n            component={AssessmentsIndicatorsLayout}\n          />\n          <Route\n            path=\"/assessments/questionnaires\"\n            component={AssessmentsQuestionnairesLayout}\n          />\n          <Route\n            path=\"/assessments/questions\"\n            component={AssessmentsQuestionsLayout}\n          />\n          <Route\n            path=\"/assessments/responses\"\n            component={AssessmentsResponsesLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures\"\n            component={GeographicalFeatures}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/administrativeboundaries\"\n            component={AdministrativeBoundariesLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/districts\"\n            component={DistrictsLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/evacuationcenters\"\n            component={EvacuationCentersLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/facilities\"\n            component={GeographicalFeaturesFacilitiesLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/infrastructure\"\n            component={GeographicalFeaturesInfrastructureLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/regions\"\n            component={RegionsLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/subwards\"\n            component={SubWardsLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/warehouses\"\n            component={GeographicalFeaturesWarehousesLayout}\n          />\n          <Route\n            exact\n            path=\"/geographicalfeatures/wards\"\n            component={WardsLayout}\n          />\n          <Route exact path=\"/incidents\" component={Incidents} />\n          <Route\n            exact\n            path=\"/incidents/commandcenter\"\n            component={IncidentsCommandCenterLayout}\n          />\n          <Route\n            exact\n            path=\"/incidents/assessments\"\n            component={IncidentsAssessmentsLayout}\n          />\n          <Route\n            exact\n            path=\"/incidents/actions\"\n            component={IncidentsActionsLayout}\n          />\n          <Route\n            exact\n            path=\"/incidents/feeds\"\n            component={IncidentsFeedsLayout}\n          />\n          <Route\n            exact\n            path=\"/incidents/lossdatabase\"\n            component={IncidentsLossDatabaseLayout}\n          />\n          <Route\n            exact\n            path=\"/incidents/incidenttypes\"\n            component={IncidentsIncidentTypesLayout}\n          />\n          <Route exact path=\"/plans\" component={EmergencyPlans} />\n          <Route\n            exact\n            path=\"/plans/planner\"\n            component={EmergencyPlanPlannerLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/planner/:planId/:activityId\"\n            component={EmergencyPlanProceduresLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/activations\"\n            component={EmergencyPlanActivationsLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/activities\"\n            component={EmergencyPlanActivitiesLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/activities/:activityId\"\n            component={EmergencyPlanProceduresLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/planner/:planId\"\n            component={EmergencyPlanActivitiesLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/disseminations\"\n            component={EmergencyPlanDisseminationsLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/drills\"\n            component={EmergencyPlanDrillsLayout}\n          />\n          <Route\n            exact\n            path=\"/plans/procedures\"\n            component={EmergencyPlanProceduresLayout}\n          />\n          <Route exact path=\"/resources\" component={Resources} />\n          <Route\n            exact\n            path=\"/resources/items\"\n            component={ResourcesItemsLayout}\n          />\n          <Route\n            exact\n            path=\"/resources/itemcategories\"\n            component={ResourcesItemCategoriesLayout}\n          />\n          <Route\n            exact\n            path=\"/resources/unitsofmeasure\"\n            component={ResourcesItemUnitLayout}\n          />\n          <Route\n            exact\n            path=\"/resources/warehouses\"\n            component={ResourcesWarehousesLayout}\n          />\n          <Route\n            exact\n            path=\"/resources/stocks\"\n            component={ResourcesStockLayout}\n          />\n          <Route\n            exact\n            path=\"/resources/utilization\"\n            component={ResourcesUtilizationLayout}\n          />\n          <Route\n            exact\n            path=\"/resources/adjustments\"\n            component={ResourcesAdjustmentsLayout}\n          />\n          <Route exact path=\"/stakeholders\" component={Stakeholders} />\n          <Route\n            exact\n            path=\"/stakeholders/notifications\"\n            component={StakeholdersNotificationsLayout}\n          />\n          <Route\n            exact\n            path=\"/stakeholders/focalpeople\"\n            component={StakeholdersFocalPeopleLayout}\n          />\n          <Route\n            exact\n            path=\"/stakeholders/agencies\"\n            component={StakeholdersAgenciesLayout}\n          />\n          <Route\n            exact\n            path=\"/stakeholders/roles\"\n            component={StakeholdersRolesLayout}\n          />\n          <Route component={PageNotFound} />\n        </Switch>\n      </Content>\n    </Layout>\n  );\n});\n\nexport default BaseLayout;\n","import { initializeApp, StoreProvider } from '@codetanzania/emis-api-states';\nimport { Icon, Spin } from 'antd';\nimport React from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport BaseLayout from './layouts/BaseLayout';\n\n// populate app store with schemas\ninitializeApp();\n\n/* configure global spin indicator */\nSpin.setDefaultIndicator(<Icon type=\"loading\" style={{ fontSize: 24 }} spin />);\n\nconst App = () => (\n  <StoreProvider>\n    <HashRouter hashType=\"hashbang\">\n      <BaseLayout />\n    </HashRouter>\n  </StoreProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n/* eslint-disable */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n/* eslint-enable */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst render = Component => {\n  ReactDOM.render(<Component />, document.getElementById('root')); // eslint-disable-line\n};\n\nrender(App);\n\nif (module.hot) {\n  module.hot.accept('./App', () => {\n    const NextApp = require('./App').default; // eslint-disable-line  global-require\n    render(NextApp);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}